2020-09-03 10:45:57.462 INFO  [main]com.linq.web.TestDemos.logStarting:55 -Starting TestDemos on JaydeMacBook-Pro.local with PID 4845 (started by jay in /Users/jay/Desktop/Vue项目集合/新闻发布管理系统/linq/linq-web)
2020-09-03 10:45:57.466 DEBUG [main]com.linq.web.TestDemos.logStarting:56 -Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.8.RELEASE
2020-09-03 10:45:57.467 INFO  [main]com.linq.web.TestDemos.logStartupProfileInfo:655 -The following profiles are active: druid,linq
2020-09-03 10:45:59.572 WARN  [main]org.mybatis.spring.mapper.ClassPathMapperScanner.warn:44 -Skipping MapperFactoryBean with name 'newsDocumentDao' and 'com.linq.news.mapper.NewsDocumentDao' mapperInterface. Bean already defined with the same name!
2020-09-03 10:46:01.342 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-09-03 10:46:01.942 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:1010 -{dataSource-1} inited
2020-09-03 10:46:03.801 WARN  [main]org.springframework.data.convert.CustomConversions.register:273 -Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-09-03 10:46:03.802 WARN  [main]org.springframework.data.convert.CustomConversions.register:263 -Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-09-03 10:46:03.803 WARN  [main]org.springframework.data.convert.CustomConversions.register:273 -Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-09-03 10:46:03.804 WARN  [main]org.springframework.data.convert.CustomConversions.register:263 -Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-09-03 10:46:06.667 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-09-03 10:46:08.114 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-09-03 10:46:08.132 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-09-03 10:46:08.193 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-09-03 10:46:08.422 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_1
2020-09-03 10:46:08.426 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_1
2020-09-03 10:46:08.433 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_1
2020-09-03 10:46:08.444 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_1
2020-09-03 10:46:08.450 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_2
2020-09-03 10:46:08.454 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_2
2020-09-03 10:46:08.466 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_2
2020-09-03 10:46:08.473 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_2
2020-09-03 10:46:08.475 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_1
2020-09-03 10:46:08.480 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_3
2020-09-03 10:46:08.482 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_3
2020-09-03 10:46:08.486 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_3
2020-09-03 10:46:08.497 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_3
2020-09-03 10:46:08.500 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: optionSelectUsingGET_1
2020-09-03 10:46:08.502 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_2
2020-09-03 10:46:08.507 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_4
2020-09-03 10:46:08.511 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_4
2020-09-03 10:46:08.517 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_4
2020-09-03 10:46:08.525 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_4
2020-09-03 10:46:08.528 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_3
2020-09-03 10:46:08.535 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_5
2020-09-03 10:46:08.536 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_5
2020-09-03 10:46:08.547 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_5
2020-09-03 10:46:08.554 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_5
2020-09-03 10:46:08.558 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_4
2020-09-03 10:46:08.570 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_6
2020-09-03 10:46:08.576 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_6
2020-09-03 10:46:08.581 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_6
2020-09-03 10:46:08.587 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_6
2020-09-03 10:46:08.589 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_5
2020-09-03 10:46:08.593 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_7
2020-09-03 10:46:08.595 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: clearCacheUsingDELETE_1
2020-09-03 10:46:08.596 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_7
2020-09-03 10:46:08.600 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_7
2020-09-03 10:46:08.606 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_7
2020-09-03 10:46:08.610 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_6
2020-09-03 10:46:08.612 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_8
2020-09-03 10:46:08.620 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_8
2020-09-03 10:46:08.622 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_8
2020-09-03 10:46:08.628 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_9
2020-09-03 10:46:08.636 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_8
2020-09-03 10:46:08.639 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_7
2020-09-03 10:46:08.645 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_9
2020-09-03 10:46:08.647 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_9
2020-09-03 10:46:08.653 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_10
2020-09-03 10:46:08.666 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_9
2020-09-03 10:46:08.667 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_8
2020-09-03 10:46:08.689 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_10
2020-09-03 10:46:08.691 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: changeStatusUsingPUT_1
2020-09-03 10:46:08.694 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_10
2020-09-03 10:46:08.699 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_11
2020-09-03 10:46:08.706 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_10
2020-09-03 10:46:08.708 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_9
2020-09-03 10:46:08.712 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_11
2020-09-03 10:46:08.716 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: changeStatusUsingPUT_2
2020-09-03 10:46:08.718 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_11
2020-09-03 10:46:08.720 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_12
2020-09-03 10:46:08.722 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_13
2020-09-03 10:46:08.743 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_11
2020-09-03 10:46:08.744 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_10
2020-09-03 10:46:09.255 INFO  [main]com.linq.web.TestDemos.logStarted:61 -Started TestDemos in 12.532 seconds (JVM running for 14.2)
2020-09-03 10:46:10.390 INFO  [SpringContextShutdownHook]com.linq.framework.manager.ShutdownManager.shutdownAsyncManager:25 -====关闭后台任务任务线程池====
2020-09-03 10:46:10.393 WARN  [SpringContextShutdownHook]o.s.context.annotation.CommonAnnotationBeanPostProcessor.postProcessBeforeDestruction:185 -Destroy method on bean with name 'shutdownManager' threw an exception: java.lang.ExceptionInInitializerError
2020-09-03 10:46:10.397 INFO  [SpringContextShutdownHook]com.alibaba.druid.pool.DruidDataSource.close:2003 -{dataSource-1} closing ...
2020-09-03 10:46:10.405 INFO  [SpringContextShutdownHook]com.alibaba.druid.pool.DruidDataSource.close:2075 -{dataSource-1} closed
2020-09-03 11:03:29.744 INFO  [main]com.linq.web.TestDemos.logStarting:55 -Starting TestDemos on JaydeMacBook-Pro.local with PID 4996 (started by jay in /Users/jay/Desktop/Vue项目集合/新闻发布管理系统/linq/linq-web)
2020-09-03 11:03:29.746 DEBUG [main]com.linq.web.TestDemos.logStarting:56 -Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.8.RELEASE
2020-09-03 11:03:29.746 INFO  [main]com.linq.web.TestDemos.logStartupProfileInfo:655 -The following profiles are active: druid,linq
2020-09-03 11:03:32.162 WARN  [main]org.mybatis.spring.mapper.ClassPathMapperScanner.warn:44 -Skipping MapperFactoryBean with name 'newsDocumentDao' and 'com.linq.news.mapper.NewsDocumentDao' mapperInterface. Bean already defined with the same name!
2020-09-03 11:03:34.806 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-09-03 11:03:35.577 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:1010 -{dataSource-1} inited
2020-09-03 11:03:37.766 WARN  [main]org.springframework.data.convert.CustomConversions.register:273 -Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-09-03 11:03:37.767 WARN  [main]org.springframework.data.convert.CustomConversions.register:263 -Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-09-03 11:03:37.768 WARN  [main]org.springframework.data.convert.CustomConversions.register:273 -Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-09-03 11:03:37.768 WARN  [main]org.springframework.data.convert.CustomConversions.register:263 -Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-09-03 11:03:41.280 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-09-03 11:03:42.753 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-09-03 11:03:42.771 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-09-03 11:03:42.852 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-09-03 11:03:43.111 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_1
2020-09-03 11:03:43.114 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_1
2020-09-03 11:03:43.125 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_1
2020-09-03 11:03:43.135 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_1
2020-09-03 11:03:43.140 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_2
2020-09-03 11:03:43.142 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_2
2020-09-03 11:03:43.147 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_2
2020-09-03 11:03:43.153 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_2
2020-09-03 11:03:43.155 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_1
2020-09-03 11:03:43.160 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_3
2020-09-03 11:03:43.162 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_3
2020-09-03 11:03:43.166 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_3
2020-09-03 11:03:43.171 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_3
2020-09-03 11:03:43.174 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: optionSelectUsingGET_1
2020-09-03 11:03:43.176 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_2
2020-09-03 11:03:43.181 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_4
2020-09-03 11:03:43.184 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_4
2020-09-03 11:03:43.190 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_4
2020-09-03 11:03:43.196 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_4
2020-09-03 11:03:43.198 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_3
2020-09-03 11:03:43.205 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_5
2020-09-03 11:03:43.207 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_5
2020-09-03 11:03:43.217 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_5
2020-09-03 11:03:43.225 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_5
2020-09-03 11:03:43.227 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_4
2020-09-03 11:03:43.238 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_6
2020-09-03 11:03:43.244 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_6
2020-09-03 11:03:43.247 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_6
2020-09-03 11:03:43.253 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_6
2020-09-03 11:03:43.254 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_5
2020-09-03 11:03:43.258 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_7
2020-09-03 11:03:43.259 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: clearCacheUsingDELETE_1
2020-09-03 11:03:43.261 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_7
2020-09-03 11:03:43.264 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_7
2020-09-03 11:03:43.270 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_7
2020-09-03 11:03:43.273 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_6
2020-09-03 11:03:43.275 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_8
2020-09-03 11:03:43.283 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_8
2020-09-03 11:03:43.284 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_8
2020-09-03 11:03:43.289 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_9
2020-09-03 11:03:43.295 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_8
2020-09-03 11:03:43.297 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_7
2020-09-03 11:03:43.302 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_9
2020-09-03 11:03:43.304 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_9
2020-09-03 11:03:43.307 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_10
2020-09-03 11:03:43.313 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_9
2020-09-03 11:03:43.314 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_8
2020-09-03 11:03:43.333 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_10
2020-09-03 11:03:43.336 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: changeStatusUsingPUT_1
2020-09-03 11:03:43.338 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_10
2020-09-03 11:03:43.345 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_11
2020-09-03 11:03:43.355 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_10
2020-09-03 11:03:43.356 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_9
2020-09-03 11:03:43.359 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_11
2020-09-03 11:03:43.362 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: changeStatusUsingPUT_2
2020-09-03 11:03:43.364 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_11
2020-09-03 11:03:43.366 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_12
2020-09-03 11:03:43.369 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_13
2020-09-03 11:03:43.388 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_11
2020-09-03 11:03:43.389 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_10
2020-09-03 11:03:43.839 INFO  [main]com.linq.web.TestDemos.logStarted:61 -Started TestDemos in 14.838 seconds (JVM running for 17.122)
2020-09-03 11:03:44.913 INFO  [SpringContextShutdownHook]com.linq.framework.manager.ShutdownManager.shutdownAsyncManager:25 -====关闭后台任务任务线程池====
2020-09-03 11:03:44.914 WARN  [SpringContextShutdownHook]o.s.context.annotation.CommonAnnotationBeanPostProcessor.postProcessBeforeDestruction:185 -Destroy method on bean with name 'shutdownManager' threw an exception: java.lang.ExceptionInInitializerError
2020-09-03 11:03:44.915 INFO  [SpringContextShutdownHook]com.alibaba.druid.pool.DruidDataSource.close:2003 -{dataSource-1} closing ...
2020-09-03 11:03:44.920 INFO  [SpringContextShutdownHook]com.alibaba.druid.pool.DruidDataSource.close:2075 -{dataSource-1} closed
2020-09-03 11:04:49.347 INFO  [main]com.linq.web.TestDemos.logStarting:55 -Starting TestDemos on JaydeMacBook-Pro.local with PID 5013 (started by jay in /Users/jay/Desktop/Vue项目集合/新闻发布管理系统/linq/linq-web)
2020-09-03 11:04:49.349 DEBUG [main]com.linq.web.TestDemos.logStarting:56 -Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.8.RELEASE
2020-09-03 11:04:49.349 INFO  [main]com.linq.web.TestDemos.logStartupProfileInfo:655 -The following profiles are active: druid,linq
2020-09-03 11:04:51.323 WARN  [main]org.mybatis.spring.mapper.ClassPathMapperScanner.warn:44 -Skipping MapperFactoryBean with name 'newsDocumentDao' and 'com.linq.news.mapper.NewsDocumentDao' mapperInterface. Bean already defined with the same name!
2020-09-03 11:04:53.214 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-09-03 11:04:53.970 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:1010 -{dataSource-1} inited
2020-09-03 11:04:56.125 WARN  [main]org.springframework.data.convert.CustomConversions.register:273 -Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-09-03 11:04:56.125 WARN  [main]org.springframework.data.convert.CustomConversions.register:263 -Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-09-03 11:04:56.126 WARN  [main]org.springframework.data.convert.CustomConversions.register:273 -Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-09-03 11:04:56.127 WARN  [main]org.springframework.data.convert.CustomConversions.register:263 -Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-09-03 11:04:59.876 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-09-03 11:05:01.294 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-09-03 11:05:01.312 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-09-03 11:05:01.381 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-09-03 11:05:01.651 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_1
2020-09-03 11:05:01.654 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_1
2020-09-03 11:05:01.691 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_1
2020-09-03 11:05:01.730 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_1
2020-09-03 11:05:01.740 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_2
2020-09-03 11:05:01.742 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_2
2020-09-03 11:05:01.749 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_2
2020-09-03 11:05:01.756 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_2
2020-09-03 11:05:01.759 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_1
2020-09-03 11:05:01.764 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_3
2020-09-03 11:05:01.767 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_3
2020-09-03 11:05:01.771 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_3
2020-09-03 11:05:01.777 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_3
2020-09-03 11:05:01.780 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: optionSelectUsingGET_1
2020-09-03 11:05:01.782 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_2
2020-09-03 11:05:01.789 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_4
2020-09-03 11:05:01.793 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_4
2020-09-03 11:05:01.799 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_4
2020-09-03 11:05:01.806 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_4
2020-09-03 11:05:01.807 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_3
2020-09-03 11:05:01.814 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_5
2020-09-03 11:05:01.815 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_5
2020-09-03 11:05:01.824 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_5
2020-09-03 11:05:01.831 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_5
2020-09-03 11:05:01.836 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_4
2020-09-03 11:05:01.850 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_6
2020-09-03 11:05:01.858 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_6
2020-09-03 11:05:01.863 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_6
2020-09-03 11:05:01.874 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_6
2020-09-03 11:05:01.876 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_5
2020-09-03 11:05:01.880 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_7
2020-09-03 11:05:01.881 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: clearCacheUsingDELETE_1
2020-09-03 11:05:01.883 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_7
2020-09-03 11:05:01.891 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_7
2020-09-03 11:05:01.901 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_7
2020-09-03 11:05:01.905 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_6
2020-09-03 11:05:01.908 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_8
2020-09-03 11:05:01.920 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_8
2020-09-03 11:05:01.924 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_8
2020-09-03 11:05:01.930 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_9
2020-09-03 11:05:01.941 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_8
2020-09-03 11:05:01.945 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_7
2020-09-03 11:05:01.953 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_9
2020-09-03 11:05:01.954 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_9
2020-09-03 11:05:01.959 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_10
2020-09-03 11:05:01.967 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_9
2020-09-03 11:05:01.970 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_8
2020-09-03 11:05:01.992 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_10
2020-09-03 11:05:01.995 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: changeStatusUsingPUT_1
2020-09-03 11:05:01.997 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_10
2020-09-03 11:05:02.004 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_11
2020-09-03 11:05:02.013 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_10
2020-09-03 11:05:02.015 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_9
2020-09-03 11:05:02.018 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_11
2020-09-03 11:05:02.021 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: changeStatusUsingPUT_2
2020-09-03 11:05:02.023 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_11
2020-09-03 11:05:02.026 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_12
2020-09-03 11:05:02.028 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_13
2020-09-03 11:05:02.049 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_11
2020-09-03 11:05:02.052 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_10
2020-09-03 11:05:02.620 INFO  [main]com.linq.web.TestDemos.logStarted:61 -Started TestDemos in 14.129 seconds (JVM running for 16.493)
2020-09-03 11:05:03.742 INFO  [SpringContextShutdownHook]com.linq.framework.manager.ShutdownManager.shutdownAsyncManager:25 -====关闭后台任务任务线程池====
2020-09-03 11:05:03.743 WARN  [SpringContextShutdownHook]o.s.context.annotation.CommonAnnotationBeanPostProcessor.postProcessBeforeDestruction:185 -Destroy method on bean with name 'shutdownManager' threw an exception: java.lang.ExceptionInInitializerError
2020-09-03 11:05:03.745 INFO  [SpringContextShutdownHook]com.alibaba.druid.pool.DruidDataSource.close:2003 -{dataSource-1} closing ...
2020-09-03 11:05:03.750 INFO  [SpringContextShutdownHook]com.alibaba.druid.pool.DruidDataSource.close:2075 -{dataSource-1} closed
2020-09-03 11:05:20.036 INFO  [main]com.linq.web.TestDemos.logStarting:55 -Starting TestDemos on JaydeMacBook-Pro.local with PID 5022 (started by jay in /Users/jay/Desktop/Vue项目集合/新闻发布管理系统/linq/linq-web)
2020-09-03 11:05:20.038 DEBUG [main]com.linq.web.TestDemos.logStarting:56 -Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.8.RELEASE
2020-09-03 11:05:20.038 INFO  [main]com.linq.web.TestDemos.logStartupProfileInfo:655 -The following profiles are active: druid,linq
2020-09-03 11:05:21.866 WARN  [main]org.mybatis.spring.mapper.ClassPathMapperScanner.warn:44 -Skipping MapperFactoryBean with name 'newsDocumentDao' and 'com.linq.news.mapper.NewsDocumentDao' mapperInterface. Bean already defined with the same name!
2020-09-03 11:05:23.432 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-09-03 11:05:24.044 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:1010 -{dataSource-1} inited
2020-09-03 11:05:25.790 WARN  [main]org.springframework.data.convert.CustomConversions.register:273 -Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-09-03 11:05:25.791 WARN  [main]org.springframework.data.convert.CustomConversions.register:263 -Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-09-03 11:05:25.792 WARN  [main]org.springframework.data.convert.CustomConversions.register:273 -Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-09-03 11:05:25.792 WARN  [main]org.springframework.data.convert.CustomConversions.register:263 -Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-09-03 11:05:29.628 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-09-03 11:05:31.056 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-09-03 11:05:31.073 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-09-03 11:05:31.140 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-09-03 11:05:31.385 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_1
2020-09-03 11:05:31.388 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_1
2020-09-03 11:05:31.395 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_1
2020-09-03 11:05:31.406 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_1
2020-09-03 11:05:31.411 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_2
2020-09-03 11:05:31.413 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_2
2020-09-03 11:05:31.418 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_2
2020-09-03 11:05:31.425 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_2
2020-09-03 11:05:31.429 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_1
2020-09-03 11:05:31.436 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_3
2020-09-03 11:05:31.438 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_3
2020-09-03 11:05:31.443 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_3
2020-09-03 11:05:31.448 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_3
2020-09-03 11:05:31.451 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: optionSelectUsingGET_1
2020-09-03 11:05:31.453 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_2
2020-09-03 11:05:31.458 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_4
2020-09-03 11:05:31.462 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_4
2020-09-03 11:05:31.469 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_4
2020-09-03 11:05:31.475 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_4
2020-09-03 11:05:31.477 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_3
2020-09-03 11:05:31.483 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_5
2020-09-03 11:05:31.485 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_5
2020-09-03 11:05:31.493 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_5
2020-09-03 11:05:31.499 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_5
2020-09-03 11:05:31.501 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_4
2020-09-03 11:05:31.514 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_6
2020-09-03 11:05:31.520 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_6
2020-09-03 11:05:31.523 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_6
2020-09-03 11:05:31.529 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_6
2020-09-03 11:05:31.531 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_5
2020-09-03 11:05:31.535 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_7
2020-09-03 11:05:31.536 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: clearCacheUsingDELETE_1
2020-09-03 11:05:31.537 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_7
2020-09-03 11:05:31.541 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_7
2020-09-03 11:05:31.548 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_7
2020-09-03 11:05:31.552 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_6
2020-09-03 11:05:31.554 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_8
2020-09-03 11:05:31.565 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_8
2020-09-03 11:05:31.567 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_8
2020-09-03 11:05:31.574 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_9
2020-09-03 11:05:31.581 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_8
2020-09-03 11:05:31.583 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_7
2020-09-03 11:05:31.588 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_9
2020-09-03 11:05:31.590 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_9
2020-09-03 11:05:31.604 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_10
2020-09-03 11:05:31.615 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_9
2020-09-03 11:05:31.618 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_8
2020-09-03 11:05:31.636 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_10
2020-09-03 11:05:31.639 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: changeStatusUsingPUT_1
2020-09-03 11:05:31.642 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_10
2020-09-03 11:05:31.647 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_11
2020-09-03 11:05:31.657 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_10
2020-09-03 11:05:31.658 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_9
2020-09-03 11:05:31.661 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_11
2020-09-03 11:05:31.663 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: changeStatusUsingPUT_2
2020-09-03 11:05:31.666 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_11
2020-09-03 11:05:31.670 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_12
2020-09-03 11:05:31.672 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_13
2020-09-03 11:05:31.690 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_11
2020-09-03 11:05:31.694 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_10
2020-09-03 11:05:32.178 INFO  [main]com.linq.web.TestDemos.logStarted:61 -Started TestDemos in 12.72 seconds (JVM running for 14.345)
2020-09-03 11:05:33.253 INFO  [SpringContextShutdownHook]com.linq.framework.manager.ShutdownManager.shutdownAsyncManager:25 -====关闭后台任务任务线程池====
2020-09-03 11:05:33.254 WARN  [SpringContextShutdownHook]o.s.context.annotation.CommonAnnotationBeanPostProcessor.postProcessBeforeDestruction:185 -Destroy method on bean with name 'shutdownManager' threw an exception: java.lang.ExceptionInInitializerError
2020-09-03 11:05:33.256 INFO  [SpringContextShutdownHook]com.alibaba.druid.pool.DruidDataSource.close:2003 -{dataSource-1} closing ...
2020-09-03 11:05:33.262 INFO  [SpringContextShutdownHook]com.alibaba.druid.pool.DruidDataSource.close:2075 -{dataSource-1} closed
2020-09-03 11:09:52.134 INFO  [main]com.linq.web.TestDemos.logStarting:55 -Starting TestDemos on JaydeMacBook-Pro.local with PID 5063 (started by jay in /Users/jay/Desktop/Vue项目集合/新闻发布管理系统/linq/linq-web)
2020-09-03 11:09:52.136 DEBUG [main]com.linq.web.TestDemos.logStarting:56 -Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.8.RELEASE
2020-09-03 11:09:52.137 INFO  [main]com.linq.web.TestDemos.logStartupProfileInfo:655 -The following profiles are active: druid,linq
2020-09-03 11:09:53.891 WARN  [main]org.mybatis.spring.mapper.ClassPathMapperScanner.warn:44 -Skipping MapperFactoryBean with name 'newsDocumentDao' and 'com.linq.news.mapper.NewsDocumentDao' mapperInterface. Bean already defined with the same name!
2020-09-03 11:09:56.692 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-09-03 11:09:57.411 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:1010 -{dataSource-1} inited
2020-09-03 11:10:00.272 WARN  [main]org.springframework.data.convert.CustomConversions.register:273 -Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-09-03 11:10:00.273 WARN  [main]org.springframework.data.convert.CustomConversions.register:263 -Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-09-03 11:10:00.276 WARN  [main]org.springframework.data.convert.CustomConversions.register:273 -Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-09-03 11:10:00.277 WARN  [main]org.springframework.data.convert.CustomConversions.register:263 -Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-09-03 11:10:04.578 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-09-03 11:10:05.954 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-09-03 11:10:05.973 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-09-03 11:10:06.040 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-09-03 11:10:06.276 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_1
2020-09-03 11:10:06.278 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_1
2020-09-03 11:10:06.286 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_1
2020-09-03 11:10:06.295 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_1
2020-09-03 11:10:06.300 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_2
2020-09-03 11:10:06.302 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_2
2020-09-03 11:10:06.307 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_2
2020-09-03 11:10:06.316 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_2
2020-09-03 11:10:06.318 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_1
2020-09-03 11:10:06.324 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_3
2020-09-03 11:10:06.326 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_3
2020-09-03 11:10:06.330 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_3
2020-09-03 11:10:06.335 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_3
2020-09-03 11:10:06.339 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: optionSelectUsingGET_1
2020-09-03 11:10:06.341 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_2
2020-09-03 11:10:06.346 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_4
2020-09-03 11:10:06.349 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_4
2020-09-03 11:10:06.357 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_4
2020-09-03 11:10:06.364 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_4
2020-09-03 11:10:06.366 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_3
2020-09-03 11:10:06.374 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_5
2020-09-03 11:10:06.376 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_5
2020-09-03 11:10:06.386 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_5
2020-09-03 11:10:06.395 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_5
2020-09-03 11:10:06.398 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_4
2020-09-03 11:10:06.412 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_6
2020-09-03 11:10:06.419 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_6
2020-09-03 11:10:06.422 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_6
2020-09-03 11:10:06.429 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_6
2020-09-03 11:10:06.431 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_5
2020-09-03 11:10:06.435 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_7
2020-09-03 11:10:06.436 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: clearCacheUsingDELETE_1
2020-09-03 11:10:06.439 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_7
2020-09-03 11:10:06.443 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_7
2020-09-03 11:10:06.450 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_7
2020-09-03 11:10:06.453 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_6
2020-09-03 11:10:06.457 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_8
2020-09-03 11:10:06.466 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_8
2020-09-03 11:10:06.468 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_8
2020-09-03 11:10:06.475 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_9
2020-09-03 11:10:06.481 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_8
2020-09-03 11:10:06.483 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_7
2020-09-03 11:10:06.489 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_9
2020-09-03 11:10:06.492 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_9
2020-09-03 11:10:06.496 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_10
2020-09-03 11:10:06.503 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_9
2020-09-03 11:10:06.507 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_8
2020-09-03 11:10:06.529 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_10
2020-09-03 11:10:06.531 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: changeStatusUsingPUT_1
2020-09-03 11:10:06.534 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_10
2020-09-03 11:10:06.542 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_11
2020-09-03 11:10:06.551 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_10
2020-09-03 11:10:06.556 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_9
2020-09-03 11:10:06.559 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_11
2020-09-03 11:10:06.564 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: changeStatusUsingPUT_2
2020-09-03 11:10:06.567 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_11
2020-09-03 11:10:06.569 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_12
2020-09-03 11:10:06.573 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_13
2020-09-03 11:10:06.594 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_11
2020-09-03 11:10:06.596 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_10
2020-09-03 11:10:07.096 INFO  [main]com.linq.web.TestDemos.logStarted:61 -Started TestDemos in 15.658 seconds (JVM running for 17.179)
2020-09-03 11:10:08.140 INFO  [SpringContextShutdownHook]com.linq.framework.manager.ShutdownManager.shutdownAsyncManager:25 -====关闭后台任务任务线程池====
2020-09-03 11:10:08.141 WARN  [SpringContextShutdownHook]o.s.context.annotation.CommonAnnotationBeanPostProcessor.postProcessBeforeDestruction:185 -Destroy method on bean with name 'shutdownManager' threw an exception: java.lang.ExceptionInInitializerError
2020-09-03 11:10:08.143 INFO  [SpringContextShutdownHook]com.alibaba.druid.pool.DruidDataSource.close:2003 -{dataSource-1} closing ...
2020-09-03 11:10:08.148 INFO  [SpringContextShutdownHook]com.alibaba.druid.pool.DruidDataSource.close:2075 -{dataSource-1} closed
2020-09-03 11:10:15.830 INFO  [main]com.linq.web.TestDemos.logStarting:55 -Starting TestDemos on JaydeMacBook-Pro.local with PID 5069 (started by jay in /Users/jay/Desktop/Vue项目集合/新闻发布管理系统/linq/linq-web)
2020-09-03 11:10:15.834 DEBUG [main]com.linq.web.TestDemos.logStarting:56 -Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.8.RELEASE
2020-09-03 11:10:15.834 INFO  [main]com.linq.web.TestDemos.logStartupProfileInfo:655 -The following profiles are active: druid,linq
2020-09-03 11:10:17.882 WARN  [main]org.mybatis.spring.mapper.ClassPathMapperScanner.warn:44 -Skipping MapperFactoryBean with name 'newsDocumentDao' and 'com.linq.news.mapper.NewsDocumentDao' mapperInterface. Bean already defined with the same name!
2020-09-03 11:10:19.423 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-09-03 11:10:20.063 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:1010 -{dataSource-1} inited
2020-09-03 11:10:21.693 WARN  [main]org.springframework.data.convert.CustomConversions.register:273 -Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-09-03 11:10:21.694 WARN  [main]org.springframework.data.convert.CustomConversions.register:263 -Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-09-03 11:10:21.695 WARN  [main]org.springframework.data.convert.CustomConversions.register:273 -Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-09-03 11:10:21.695 WARN  [main]org.springframework.data.convert.CustomConversions.register:263 -Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-09-03 11:10:24.753 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-09-03 11:10:26.136 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-09-03 11:10:26.157 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-09-03 11:10:26.220 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-09-03 11:10:26.466 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_1
2020-09-03 11:10:26.468 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_1
2020-09-03 11:10:26.475 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_1
2020-09-03 11:10:26.484 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_1
2020-09-03 11:10:26.489 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_2
2020-09-03 11:10:26.491 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_2
2020-09-03 11:10:26.497 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_2
2020-09-03 11:10:26.504 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_2
2020-09-03 11:10:26.506 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_1
2020-09-03 11:10:26.514 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_3
2020-09-03 11:10:26.516 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_3
2020-09-03 11:10:26.520 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_3
2020-09-03 11:10:26.533 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_3
2020-09-03 11:10:26.536 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: optionSelectUsingGET_1
2020-09-03 11:10:26.538 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_2
2020-09-03 11:10:26.546 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_4
2020-09-03 11:10:26.557 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_4
2020-09-03 11:10:26.563 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_4
2020-09-03 11:10:26.569 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_4
2020-09-03 11:10:26.571 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_3
2020-09-03 11:10:26.578 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_5
2020-09-03 11:10:26.582 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_5
2020-09-03 11:10:26.598 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_5
2020-09-03 11:10:26.606 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_5
2020-09-03 11:10:26.608 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_4
2020-09-03 11:10:26.620 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_6
2020-09-03 11:10:26.627 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_6
2020-09-03 11:10:26.630 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_6
2020-09-03 11:10:26.638 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_6
2020-09-03 11:10:26.641 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_5
2020-09-03 11:10:26.646 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_7
2020-09-03 11:10:26.647 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: clearCacheUsingDELETE_1
2020-09-03 11:10:26.649 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_7
2020-09-03 11:10:26.653 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_7
2020-09-03 11:10:26.665 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_7
2020-09-03 11:10:26.669 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_6
2020-09-03 11:10:26.675 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_8
2020-09-03 11:10:26.691 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_8
2020-09-03 11:10:26.693 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_8
2020-09-03 11:10:26.699 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_9
2020-09-03 11:10:26.707 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_8
2020-09-03 11:10:26.709 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_7
2020-09-03 11:10:26.717 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_9
2020-09-03 11:10:26.718 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_9
2020-09-03 11:10:26.727 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_10
2020-09-03 11:10:26.733 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_9
2020-09-03 11:10:26.735 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_8
2020-09-03 11:10:26.756 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_10
2020-09-03 11:10:26.758 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: changeStatusUsingPUT_1
2020-09-03 11:10:26.760 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_10
2020-09-03 11:10:26.768 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_11
2020-09-03 11:10:26.776 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_10
2020-09-03 11:10:26.778 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_9
2020-09-03 11:10:26.781 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_11
2020-09-03 11:10:26.782 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: changeStatusUsingPUT_2
2020-09-03 11:10:26.785 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_11
2020-09-03 11:10:26.787 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_12
2020-09-03 11:10:26.789 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_13
2020-09-03 11:10:26.805 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_11
2020-09-03 11:10:26.809 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_10
2020-09-03 11:10:27.241 INFO  [main]com.linq.web.TestDemos.logStarted:61 -Started TestDemos in 12.228 seconds (JVM running for 14.114)
2020-09-03 11:10:28.567 INFO  [SpringContextShutdownHook]com.linq.framework.manager.ShutdownManager.shutdownAsyncManager:25 -====关闭后台任务任务线程池====
2020-09-03 11:10:28.568 WARN  [SpringContextShutdownHook]o.s.context.annotation.CommonAnnotationBeanPostProcessor.postProcessBeforeDestruction:185 -Destroy method on bean with name 'shutdownManager' threw an exception: java.lang.ExceptionInInitializerError
2020-09-03 11:10:28.570 INFO  [SpringContextShutdownHook]com.alibaba.druid.pool.DruidDataSource.close:2003 -{dataSource-1} closing ...
2020-09-03 11:10:28.575 INFO  [SpringContextShutdownHook]com.alibaba.druid.pool.DruidDataSource.close:2075 -{dataSource-1} closed
2020-09-03 11:40:10.330 INFO  [main]com.linq.web.TestDemos.logStarting:55 -Starting TestDemos on JaydeMacBook-Pro.local with PID 5403 (started by jay in /Users/jay/Desktop/Vue项目集合/新闻发布管理系统/linq/linq-web)
2020-09-03 11:40:10.333 DEBUG [main]com.linq.web.TestDemos.logStarting:56 -Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.8.RELEASE
2020-09-03 11:40:10.333 INFO  [main]com.linq.web.TestDemos.logStartupProfileInfo:655 -The following profiles are active: druid,linq
2020-09-03 11:40:12.099 WARN  [main]org.mybatis.spring.mapper.ClassPathMapperScanner.warn:44 -Skipping MapperFactoryBean with name 'newsDocumentDao' and 'com.linq.news.mapper.NewsDocumentDao' mapperInterface. Bean already defined with the same name!
2020-09-03 11:40:13.973 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-09-03 11:40:14.608 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:1010 -{dataSource-1} inited
2020-09-03 11:40:16.403 WARN  [main]org.springframework.data.convert.CustomConversions.register:273 -Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-09-03 11:40:16.404 WARN  [main]org.springframework.data.convert.CustomConversions.register:263 -Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-09-03 11:40:16.404 WARN  [main]org.springframework.data.convert.CustomConversions.register:273 -Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-09-03 11:40:16.405 WARN  [main]org.springframework.data.convert.CustomConversions.register:263 -Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-09-03 11:40:20.369 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-09-03 11:40:21.840 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-09-03 11:40:21.857 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-09-03 11:40:21.926 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-09-03 11:40:22.191 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_1
2020-09-03 11:40:22.194 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_1
2020-09-03 11:40:22.201 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_1
2020-09-03 11:40:22.212 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_1
2020-09-03 11:40:22.218 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_2
2020-09-03 11:40:22.219 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_2
2020-09-03 11:40:22.226 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_2
2020-09-03 11:40:22.234 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_2
2020-09-03 11:40:22.237 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_1
2020-09-03 11:40:22.241 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_3
2020-09-03 11:40:22.243 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_3
2020-09-03 11:40:22.248 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_3
2020-09-03 11:40:22.254 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_3
2020-09-03 11:40:22.257 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: optionSelectUsingGET_1
2020-09-03 11:40:22.259 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_2
2020-09-03 11:40:22.264 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_4
2020-09-03 11:40:22.268 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_4
2020-09-03 11:40:22.275 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_4
2020-09-03 11:40:22.282 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_4
2020-09-03 11:40:22.284 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_3
2020-09-03 11:40:22.291 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_5
2020-09-03 11:40:22.293 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_5
2020-09-03 11:40:22.304 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_5
2020-09-03 11:40:22.311 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_5
2020-09-03 11:40:22.313 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_4
2020-09-03 11:40:22.328 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_6
2020-09-03 11:40:22.336 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_6
2020-09-03 11:40:22.339 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_6
2020-09-03 11:40:22.347 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_6
2020-09-03 11:40:22.349 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_5
2020-09-03 11:40:22.354 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_7
2020-09-03 11:40:22.355 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: clearCacheUsingDELETE_1
2020-09-03 11:40:22.357 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_7
2020-09-03 11:40:22.361 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_7
2020-09-03 11:40:22.368 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_7
2020-09-03 11:40:22.402 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_6
2020-09-03 11:40:22.405 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_8
2020-09-03 11:40:22.413 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_8
2020-09-03 11:40:22.415 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_8
2020-09-03 11:40:22.421 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_9
2020-09-03 11:40:22.430 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_8
2020-09-03 11:40:22.431 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_7
2020-09-03 11:40:22.439 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_9
2020-09-03 11:40:22.442 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_9
2020-09-03 11:40:22.446 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_10
2020-09-03 11:40:22.455 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_9
2020-09-03 11:40:22.457 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_8
2020-09-03 11:40:22.477 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_10
2020-09-03 11:40:22.481 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: changeStatusUsingPUT_1
2020-09-03 11:40:22.485 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_10
2020-09-03 11:40:22.493 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_11
2020-09-03 11:40:22.501 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_10
2020-09-03 11:40:22.505 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_9
2020-09-03 11:40:22.508 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_11
2020-09-03 11:40:22.510 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: changeStatusUsingPUT_2
2020-09-03 11:40:22.512 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_11
2020-09-03 11:40:22.517 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_12
2020-09-03 11:40:22.519 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_13
2020-09-03 11:40:22.536 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_11
2020-09-03 11:40:22.538 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_10
2020-09-03 11:40:23.033 INFO  [main]com.linq.web.TestDemos.logStarted:61 -Started TestDemos in 13.389 seconds (JVM running for 15.061)
2020-09-03 11:40:24.097 INFO  [SpringContextShutdownHook]com.linq.framework.manager.ShutdownManager.shutdownAsyncManager:25 -====关闭后台任务任务线程池====
2020-09-03 11:40:24.099 WARN  [SpringContextShutdownHook]o.s.context.annotation.CommonAnnotationBeanPostProcessor.postProcessBeforeDestruction:185 -Destroy method on bean with name 'shutdownManager' threw an exception: java.lang.ExceptionInInitializerError
2020-09-03 11:40:24.102 INFO  [SpringContextShutdownHook]com.alibaba.druid.pool.DruidDataSource.close:2003 -{dataSource-1} closing ...
2020-09-03 11:40:24.109 INFO  [SpringContextShutdownHook]com.alibaba.druid.pool.DruidDataSource.close:2075 -{dataSource-1} closed
2020-09-03 11:41:52.561 INFO  [main]com.linq.web.TestDemos.logStarting:55 -Starting TestDemos on JaydeMacBook-Pro.local with PID 5422 (started by jay in /Users/jay/Desktop/Vue项目集合/新闻发布管理系统/linq/linq-web)
2020-09-03 11:41:52.563 DEBUG [main]com.linq.web.TestDemos.logStarting:56 -Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.8.RELEASE
2020-09-03 11:41:52.564 INFO  [main]com.linq.web.TestDemos.logStartupProfileInfo:655 -The following profiles are active: druid,linq
2020-09-03 11:41:54.975 WARN  [main]org.mybatis.spring.mapper.ClassPathMapperScanner.warn:44 -Skipping MapperFactoryBean with name 'newsDocumentDao' and 'com.linq.news.mapper.NewsDocumentDao' mapperInterface. Bean already defined with the same name!
2020-09-03 11:41:56.668 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-09-03 11:41:57.251 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:1010 -{dataSource-1} inited
2020-09-03 11:41:58.898 WARN  [main]org.springframework.data.convert.CustomConversions.register:273 -Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-09-03 11:41:58.899 WARN  [main]org.springframework.data.convert.CustomConversions.register:263 -Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-09-03 11:41:58.899 WARN  [main]org.springframework.data.convert.CustomConversions.register:273 -Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-09-03 11:41:58.900 WARN  [main]org.springframework.data.convert.CustomConversions.register:263 -Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-09-03 11:42:02.069 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-09-03 11:42:03.576 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-09-03 11:42:03.596 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-09-03 11:42:03.673 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-09-03 11:42:03.945 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_1
2020-09-03 11:42:03.947 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_1
2020-09-03 11:42:03.954 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_1
2020-09-03 11:42:03.965 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_1
2020-09-03 11:42:03.973 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_2
2020-09-03 11:42:03.975 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_2
2020-09-03 11:42:03.982 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_2
2020-09-03 11:42:03.989 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_2
2020-09-03 11:42:03.991 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_1
2020-09-03 11:42:03.995 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_3
2020-09-03 11:42:03.997 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_3
2020-09-03 11:42:04.001 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_3
2020-09-03 11:42:04.005 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_3
2020-09-03 11:42:04.008 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: optionSelectUsingGET_1
2020-09-03 11:42:04.010 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_2
2020-09-03 11:42:04.015 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_4
2020-09-03 11:42:04.018 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_4
2020-09-03 11:42:04.026 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_4
2020-09-03 11:42:04.033 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_4
2020-09-03 11:42:04.035 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_3
2020-09-03 11:42:04.042 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_5
2020-09-03 11:42:04.044 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_5
2020-09-03 11:42:04.055 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_5
2020-09-03 11:42:04.062 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_5
2020-09-03 11:42:04.063 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_4
2020-09-03 11:42:04.077 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_6
2020-09-03 11:42:04.085 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_6
2020-09-03 11:42:04.088 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_6
2020-09-03 11:42:04.099 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_6
2020-09-03 11:42:04.102 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_5
2020-09-03 11:42:04.111 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_7
2020-09-03 11:42:04.112 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: clearCacheUsingDELETE_1
2020-09-03 11:42:04.114 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_7
2020-09-03 11:42:04.119 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_7
2020-09-03 11:42:04.126 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_7
2020-09-03 11:42:04.129 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_6
2020-09-03 11:42:04.131 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_8
2020-09-03 11:42:04.140 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_8
2020-09-03 11:42:04.142 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_8
2020-09-03 11:42:04.149 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_9
2020-09-03 11:42:04.158 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_8
2020-09-03 11:42:04.160 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_7
2020-09-03 11:42:04.165 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_9
2020-09-03 11:42:04.167 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_9
2020-09-03 11:42:04.174 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_10
2020-09-03 11:42:04.183 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_9
2020-09-03 11:42:04.186 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_8
2020-09-03 11:42:04.216 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_10
2020-09-03 11:42:04.219 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: changeStatusUsingPUT_1
2020-09-03 11:42:04.225 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_10
2020-09-03 11:42:04.232 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_11
2020-09-03 11:42:04.244 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_10
2020-09-03 11:42:04.246 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_9
2020-09-03 11:42:04.250 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_11
2020-09-03 11:42:04.254 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: changeStatusUsingPUT_2
2020-09-03 11:42:04.258 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_11
2020-09-03 11:42:04.260 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_12
2020-09-03 11:42:04.261 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_13
2020-09-03 11:42:04.276 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_11
2020-09-03 11:42:04.277 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_10
2020-09-03 11:42:04.735 INFO  [main]com.linq.web.TestDemos.logStarted:61 -Started TestDemos in 12.861 seconds (JVM running for 14.574)
2020-09-03 11:42:34.877 INFO  [SpringContextShutdownHook]com.linq.framework.manager.ShutdownManager.shutdownAsyncManager:25 -====关闭后台任务任务线程池====
2020-09-03 11:42:34.878 WARN  [SpringContextShutdownHook]o.s.context.annotation.CommonAnnotationBeanPostProcessor.postProcessBeforeDestruction:185 -Destroy method on bean with name 'shutdownManager' threw an exception: java.lang.ExceptionInInitializerError
2020-09-03 11:42:34.880 INFO  [SpringContextShutdownHook]com.alibaba.druid.pool.DruidDataSource.close:2003 -{dataSource-1} closing ...
2020-09-03 11:42:34.885 INFO  [SpringContextShutdownHook]com.alibaba.druid.pool.DruidDataSource.close:2075 -{dataSource-1} closed
2020-09-03 15:19:10.364 INFO  [main]com.linq.web.TestDemos.logStarting:55 -Starting TestDemos on JaydeMacBook-Pro.local with PID 7369 (started by jay in /Users/jay/Desktop/Vue项目集合/新闻发布管理系统/linq/linq-web)
2020-09-03 15:19:10.366 DEBUG [main]com.linq.web.TestDemos.logStarting:56 -Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.8.RELEASE
2020-09-03 15:19:10.367 INFO  [main]com.linq.web.TestDemos.logStartupProfileInfo:655 -The following profiles are active: druid,linq
2020-09-03 15:19:12.576 WARN  [main]org.mybatis.spring.mapper.ClassPathMapperScanner.warn:44 -Skipping MapperFactoryBean with name 'newsDocumentDao' and 'com.linq.news.mapper.NewsDocumentDao' mapperInterface. Bean already defined with the same name!
2020-09-03 15:19:14.439 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-09-03 15:19:15.203 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:1010 -{dataSource-1} inited
2020-09-03 15:19:16.915 WARN  [main]org.springframework.data.convert.CustomConversions.register:273 -Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-09-03 15:19:16.916 WARN  [main]org.springframework.data.convert.CustomConversions.register:263 -Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-09-03 15:19:16.917 WARN  [main]org.springframework.data.convert.CustomConversions.register:273 -Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-09-03 15:19:16.918 WARN  [main]org.springframework.data.convert.CustomConversions.register:263 -Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-09-03 15:19:20.706 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-09-03 15:19:22.156 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-09-03 15:19:22.175 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-09-03 15:19:22.247 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-09-03 15:19:22.496 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_1
2020-09-03 15:19:22.498 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_1
2020-09-03 15:19:22.506 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_1
2020-09-03 15:19:22.516 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_1
2020-09-03 15:19:22.521 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_2
2020-09-03 15:19:22.523 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_2
2020-09-03 15:19:22.529 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_2
2020-09-03 15:19:22.536 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_2
2020-09-03 15:19:22.539 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_1
2020-09-03 15:19:22.563 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_3
2020-09-03 15:19:22.565 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_3
2020-09-03 15:19:22.569 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_3
2020-09-03 15:19:22.579 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_3
2020-09-03 15:19:22.582 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: optionSelectUsingGET_1
2020-09-03 15:19:22.584 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_2
2020-09-03 15:19:22.592 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_4
2020-09-03 15:19:22.598 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_4
2020-09-03 15:19:22.606 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_4
2020-09-03 15:19:22.614 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_4
2020-09-03 15:19:22.616 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_3
2020-09-03 15:19:22.622 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_5
2020-09-03 15:19:22.627 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_5
2020-09-03 15:19:22.634 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_5
2020-09-03 15:19:22.640 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_5
2020-09-03 15:19:22.642 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_4
2020-09-03 15:19:22.655 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_6
2020-09-03 15:19:22.662 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_6
2020-09-03 15:19:22.665 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_6
2020-09-03 15:19:22.671 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_6
2020-09-03 15:19:22.673 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_5
2020-09-03 15:19:22.677 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_7
2020-09-03 15:19:22.679 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: clearCacheUsingDELETE_1
2020-09-03 15:19:22.680 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_7
2020-09-03 15:19:22.685 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_7
2020-09-03 15:19:22.690 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_7
2020-09-03 15:19:22.694 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_6
2020-09-03 15:19:22.697 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_8
2020-09-03 15:19:22.715 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_8
2020-09-03 15:19:22.719 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_8
2020-09-03 15:19:22.734 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_9
2020-09-03 15:19:22.741 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_8
2020-09-03 15:19:22.745 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_7
2020-09-03 15:19:22.752 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_9
2020-09-03 15:19:22.760 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_9
2020-09-03 15:19:22.765 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_10
2020-09-03 15:19:22.774 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_9
2020-09-03 15:19:22.777 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_8
2020-09-03 15:19:22.807 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_10
2020-09-03 15:19:22.810 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: changeStatusUsingPUT_1
2020-09-03 15:19:22.812 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_10
2020-09-03 15:19:22.816 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_11
2020-09-03 15:19:22.823 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_10
2020-09-03 15:19:22.825 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_9
2020-09-03 15:19:22.828 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: addUsingPOST_11
2020-09-03 15:19:22.830 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: changeStatusUsingPUT_2
2020-09-03 15:19:22.832 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: editUsingPUT_11
2020-09-03 15:19:22.834 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_12
2020-09-03 15:19:22.835 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getInfoUsingGET_13
2020-09-03 15:19:22.848 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: listUsingGET_11
2020-09-03 15:19:22.850 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: removeUsingDELETE_10
2020-09-03 15:19:23.417 INFO  [main]com.linq.web.TestDemos.logStarted:61 -Started TestDemos in 13.716 seconds (JVM running for 15.482)
2020-09-03 15:19:23.436 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:45 -接收到消息的时间----->>> 1599117563436
消费tag->>> 1
从消息队列中拿到数据----------->>>> {csdnNews=LinqNews(newsId=null, userId=1, newsTypeId=18, newsTitle=大厂Redis高并发场景设计，面试问的都在这！, newsContent=<div id="article_content" class="article_content clearfix"> 
 <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3d4dc5c1de.css"> 
 <div id="content_views" class="markdown_views prism-atom-one-dark"> 
  <!-- flowchart 箭头图标 勿删 --> 
  <svg xmlns="http://www.w3.org/2000/svg" style="display: none;"> 
   <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path> 
  </svg> 
  <p></p>
  <div class="toc">
   <h3>文章目录</h3>
   <ul>
    <ul>
     <li><a href="#_1" rel="nofollow">写在前面</a></li>
     <li><a href="#_4" rel="nofollow">正文</a></li>
     <li><a href="#_10" rel="nofollow">一、常用指令</a></li>
     <li><a href="#_18" rel="nofollow">二、场景解析</a></li>
     <ul>
      <li><a href="#11string_20" rel="nofollow">1.1string存储</a></li>
      <li><a href="#12String__23" rel="nofollow">1.2String 类型使用场景</a></li>
      <li><a href="#21hash_44" rel="nofollow">2.1hash存储数据</a></li>
      <li><a href="#22Hash__50" rel="nofollow">2.2Hash 类型使用场景</a></li>
      <li><a href="#23_68" rel="nofollow">2.3实现信息存储的优缺点</a></li>
      <li><a href="#31List__96" rel="nofollow">3.1List 类型使用场景</a></li>
      <li><a href="#41set__123" rel="nofollow">4.1set 类型使用场景</a></li>
      <li><a href="#42Set_137" rel="nofollow">4.2Set集合特殊的操作命令</a></li>
      <li><a href="#43Set_153" rel="nofollow">4.3Set集合特殊的操作命令应用场景</a></li>
      <li><a href="#51_Zset_162" rel="nofollow">5.1 Zset有序集合</a></li>
      <li><a href="#52Zset__169" rel="nofollow">5.2Zset 类型使用场景</a></li>
     </ul>
    </ul>
   </ul>
  </div>
  <p></p> 
  <h2><a id="_1"></a>写在前面</h2> 
  <p><strong>2020年面试必备的Java后端进阶面试题总结了一份复习指南在Github上，内容详细，图文并茂，有需要学习的朋友可以Star一下！</strong><br> <strong>GitHub地址：</strong> <a href="https://github.com/Java-Ling/Java-Interview-guide">https://github.com/Java-Ling/Java-Interview-guide</a></p> 
  <h2><a id="_4"></a>正文</h2> 
  <p>分布式缓存是分布式系统中的重要组件，主要解决高并发、大数据场景下，热点数据访问的性能问题，提供高性能的数据快速访问。</p> 
  <p>使用缓存常见场景是：项目中部分数据访问比较频繁，对下游 DB（例如 MySQL）造成服务压力，这时候可以使用缓存来提高效率。<strong>下面来讲BAT等一线企业中Redis各种应用场景核心设计！</strong></p> 
  <h2><a id="_10"></a>一、常用指令</h2> 
  <p>接下来看看每个数据结构常用的指令有哪些，我们用一张表比较清晰的展示：</p> 
  <p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8zLzEwLzE3MGMzYmE5MmZmZjcyNTQ?x-oss-process=image/format,png" alt="img"></p> 
  <h2><a id="_18"></a>二、场景解析</h2> 
  <h3><a id="11string_20"></a>1.1string存储</h3> 
  <p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8zLzEwLzE3MGMzYmMyMzcyYWRmNmI?x-oss-process=image/format,png" alt="img"></p> 
  <h3><a id="12String__23"></a>1.2String 类型使用场景</h3> 
  <p><strong>场景一：商品库存数</strong></p> 
  <p>从业务上，商品库存数据是热点数据，交易行为会直接影响库存。而 Redis 自身 String 类型提供了：</p> 
  <ol> 
   <li>set goods_id 10; 设置 id 为 good_id 的商品的库存初始值为 10；</li> 
   <li>decr goods_id; 当商品被购买时候，库存数据减 1。</li> 
  </ol> 
  <p><strong>依次类推的场景</strong>：商品的浏览次数，问题或者回复的点赞次数等。这种计数的场景都可以考虑利用 Redis 来实现。</p> 
  <p><strong>场景二：时效信息存储</strong></p> 
  <p>Redis 的数据存储具有自动失效能力。也就是存储的 key-value 可以设置过期时间：set(key, value, expireTime)。</p> 
  <p>比如，用户登录某个 App 需要获取登录验证码， 验证码在 30 秒内有效。那么我们就可以使用 String 类型存储验证码，同时设置 30 秒的失效时间。</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200519213848101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J4aDgxMQ==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-YVYYAIf9-1589895386136)(data:image/svg+xml;utf8,)]"></p> 
  <h3><a id="21hash_44"></a>2.1hash存储数据</h3> 
  <p><img src="https://img-blog.csdnimg.cn/20200519213854667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J4aDgxMQ==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-EJFSijlP-1589895386138)(data:image/svg+xml;utf8,)]"></p> 
  <h3><a id="22Hash__50"></a>2.2Hash 类型使用场景</h3> 
  <p>Redis 在存储对象（例如：用户信息）的时候需要对对象进行序列化转换然后存储。</p> 
  <p>还有一种形式，就是将对象数据转换为 JSON 结构数据，然后存储 JSON 的字符串到 Redis。</p> 
  <p>对于一些对象类型，还有一种比较方便的类型，那就是按照 Redis 的 Hash 类型进行存储。</p> 
  <p>例如，我们存储一些网站用户的基本信息， 我们可以使用：</p> 
  <p>这样就存储了一个用户基本信息，存储信息有：{name : 小明， phone : “123456”，sex : “男”}</p> 
  <p>当然这种类似场景还非常多， 比如存储订单的数据，产品的数据，商家基本信息等。<strong>以淘宝购物车为主</strong></p> 
  <p><img src="https://img-blog.csdnimg.cn/20200519213903365.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J4aDgxMQ==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-rKfgbmuK-1589895386139)(data:image/svg+xml;utf8,)]"></p> 
  <h3><a id="23_68"></a>2.3实现信息存储的优缺点</h3> 
  <p><strong>1.原生:</strong></p> 
  <ul> 
   <li>set user: 1:name james;</li> 
   <li>set user:1:age 23;</li> 
   <li>set user:1:sex boy;</li> 
  </ul> 
  <p><strong>优点:</strong> 简单直观，每个键对应一个值</p> 
  <p><strong>缺点:</strong> 键数过多，占用内存多，用户信息过于分散，不用于生产环境</p> 
  <p><strong>2.将对象序列化存入</strong></p> 
  <p>redis set user:1 serial ize (userInfo);</p> 
  <p><strong>优点:</strong> 编程简单，若使用序列化合理内存使用率高</p> 
  <p><strong>缺点:</strong> 序列化与反序列化有一定开销，更新属性时需要把userInfo全取出来进行反序列化，更新后再序列化到redis</p> 
  <p><strong>3.hash存储:</strong></p> 
  <p>hmset user:1 name james age 23 sex boy</p> 
  <p><strong>优点:</strong> 简单直观，使用合理可减少内存空间消耗</p> 
  <p><strong>缺点:</strong> 要控制ziplist 与hashtable两种编码转换，Mhashtable会消耗更多内存。</p> 
  <h3><a id="31List__96"></a>3.1List 类型使用场景</h3> 
  <p>list 是按照插入顺序排序的字符串链表。可以在头部和尾部插入新的元素（双向链表实现，两端添加元素的时间复杂度为 O(1)） 。</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200519213932776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J4aDgxMQ==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Zvx5IVDF-1589895386139)(data:image/svg+xml;utf8,)]"></p> 
  <p><strong>场景一：消息队列实现</strong></p> 
  <p>目前有很多专业的消息队列组件 Kafka、RabbitMQ 等。 我们在这里仅仅是使用 list 的特征来实现消息队列的要求。在实际技术选型的过程中，大家可以慎重思考。</p> 
  <p><strong>list 存储就是一个队列的存储形式：</strong></p> 
  <ol> 
   <li>lpush key value; 在 key 对应 list 的头部添加字符串元素；</li> 
   <li>rpop key;移除列表的最后一个元素，返回值为移除的元素。</li> 
  </ol> 
  <p><strong>场景二：最新上架商品</strong></p> 
  <p>在交易网站首页经常会有新上架产品推荐的模块， 这个模块是存储了最新上架前 100 名。</p> 
  <p>这时候使用 Redis 的 list 数据结构，来进行 TOP 100 新上架产品的存储。</p> 
  <p>Redis ltrim 指令对一个列表进行修剪（trim），这样 list 就会只包含指定范围的指定元素。</p> 
  <p>start 和 stop 都是由 0 开始计数的，这里的 0 是列表里的第一个元素（表头），1 是第二个元素。</p> 
  <h3><a id="41set__123"></a>4.1set 类型使用场景</h3> 
  <p>set 也是存储了一个集合列表功能。和 list 不同，set 具备去重功能。当需要存储一个列表信息，同时要求列表内的元素不能有重复，这时候使用 set 比较合适。与此同时，set 还提供的交集、并集、差集。</p> 
  <p>例如，在交易网站，我们会存储用户感兴趣的商品信息，在进行相似用户分析的时候， 可以通过计算两个不同用户之间感兴趣商品的数量来提供一些依据。</p> 
  <p>获取到两个用户相似的产品， 然后确定相似产品的类目就可以进行用户分析。</p> 
  <p>类似的应用场景还有， 社交场景下共同关注好友， 相似兴趣 tag 等场景的支持。</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200519213955472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J4aDgxMQ==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Ig9Ydf02-1589895386140)(data:image/svg+xml;utf8,)]"></p> 
  <h3><a id="42Set_137"></a>4.2Set集合特殊的操作命令</h3> 
  <p><strong>setA={A,B,C} setB={B, C}</strong></p> 
  <blockquote> 
   <p>1）集合与集合之间的交集</p> 
   <p>sinter setA setB－－&gt;得到集合{B,C}</p> 
   <ol start="2"> 
    <li>集合与集合之间的并集</li> 
   </ol> 
   <p>sunion setA setB －－&gt;得到集合{A,B,C}</p> 
   <p>3）集合与集合之间的差集</p> 
   <p>sdiff setA setB－－&gt;得到集合{A}</p> 
  </blockquote> 
  <h3><a id="43Set_153"></a>4.3Set集合特殊的操作命令应用场景</h3> 
  <p><strong>如何实现微博的微关系设计？（看视频更香）</strong></p> 
  <p><a href="https://www.bilibili.com/video/av92159723" rel="nofollow">www.bilibili.com/video/av921…</a></p> 
  <p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8zLzEwLzE3MGMzYzU5NDk2NTE1MWI?x-oss-process=image/format,png" alt="img"></p> 
  <h3><a id="51_Zset_162"></a>5.1 Zset有序集合</h3> 
  <p>常用于排行榜，如视频网站需要对用户上传视频做排行榜，或点赞数与集合有联系，不能有重复的成员</p> 
  <p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8zLzEwLzE3MGMzYzZlZmIzNWUwYzM?x-oss-process=image/format,png" alt="img"></p> 
  <h3><a id="52Zset__169"></a>5.2Zset 类型使用场景</h3> 
  <p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8zLzEwLzE3MGMzYzhjMjVmYzU3MTQ?x-oss-process=image/format,png" alt="img"></p> 
 </div> 
 <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e0530931f4.css" rel="stylesheet"> 
</div>, newsAttr=2, newsImage=https://profile.csdnimg.cn/1/4/0/3_rxh811, orderNum=null, isPublic=null, thumbs=132, visits=6, comments=null, collects=132, newsSource=https://blog.csdn.net/rxh811, newsSourceAuthor=码农清风, newsSourceTags=链表,Redis,队列,java,列表,redis, status=null, delFlag=null, createBy=null, createTime=null, updateBy=null, updateTime=null, remark=null, beginTime=null, endTime=null, params={}, newsType=null)}
2020-09-03 15:19:23.437 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:50 -获取peNews--->>>null
2020-09-03 15:19:23.437 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:51 -获取entertainmentNews--->>>null
2020-09-03 15:19:23.437 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:52 -获取csdnNews--->>>LinqNews(newsId=null, userId=1, newsTypeId=18, newsTitle=大厂Redis高并发场景设计，面试问的都在这！, newsContent=<div id="article_content" class="article_content clearfix"> 
 <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3d4dc5c1de.css"> 
 <div id="content_views" class="markdown_views prism-atom-one-dark"> 
  <!-- flowchart 箭头图标 勿删 --> 
  <svg xmlns="http://www.w3.org/2000/svg" style="display: none;"> 
   <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path> 
  </svg> 
  <p></p>
  <div class="toc">
   <h3>文章目录</h3>
   <ul>
    <ul>
     <li><a href="#_1" rel="nofollow">写在前面</a></li>
     <li><a href="#_4" rel="nofollow">正文</a></li>
     <li><a href="#_10" rel="nofollow">一、常用指令</a></li>
     <li><a href="#_18" rel="nofollow">二、场景解析</a></li>
     <ul>
      <li><a href="#11string_20" rel="nofollow">1.1string存储</a></li>
      <li><a href="#12String__23" rel="nofollow">1.2String 类型使用场景</a></li>
      <li><a href="#21hash_44" rel="nofollow">2.1hash存储数据</a></li>
      <li><a href="#22Hash__50" rel="nofollow">2.2Hash 类型使用场景</a></li>
      <li><a href="#23_68" rel="nofollow">2.3实现信息存储的优缺点</a></li>
      <li><a href="#31List__96" rel="nofollow">3.1List 类型使用场景</a></li>
      <li><a href="#41set__123" rel="nofollow">4.1set 类型使用场景</a></li>
      <li><a href="#42Set_137" rel="nofollow">4.2Set集合特殊的操作命令</a></li>
      <li><a href="#43Set_153" rel="nofollow">4.3Set集合特殊的操作命令应用场景</a></li>
      <li><a href="#51_Zset_162" rel="nofollow">5.1 Zset有序集合</a></li>
      <li><a href="#52Zset__169" rel="nofollow">5.2Zset 类型使用场景</a></li>
     </ul>
    </ul>
   </ul>
  </div>
  <p></p> 
  <h2><a id="_1"></a>写在前面</h2> 
  <p><strong>2020年面试必备的Java后端进阶面试题总结了一份复习指南在Github上，内容详细，图文并茂，有需要学习的朋友可以Star一下！</strong><br> <strong>GitHub地址：</strong> <a href="https://github.com/Java-Ling/Java-Interview-guide">https://github.com/Java-Ling/Java-Interview-guide</a></p> 
  <h2><a id="_4"></a>正文</h2> 
  <p>分布式缓存是分布式系统中的重要组件，主要解决高并发、大数据场景下，热点数据访问的性能问题，提供高性能的数据快速访问。</p> 
  <p>使用缓存常见场景是：项目中部分数据访问比较频繁，对下游 DB（例如 MySQL）造成服务压力，这时候可以使用缓存来提高效率。<strong>下面来讲BAT等一线企业中Redis各种应用场景核心设计！</strong></p> 
  <h2><a id="_10"></a>一、常用指令</h2> 
  <p>接下来看看每个数据结构常用的指令有哪些，我们用一张表比较清晰的展示：</p> 
  <p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8zLzEwLzE3MGMzYmE5MmZmZjcyNTQ?x-oss-process=image/format,png" alt="img"></p> 
  <h2><a id="_18"></a>二、场景解析</h2> 
  <h3><a id="11string_20"></a>1.1string存储</h3> 
  <p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8zLzEwLzE3MGMzYmMyMzcyYWRmNmI?x-oss-process=image/format,png" alt="img"></p> 
  <h3><a id="12String__23"></a>1.2String 类型使用场景</h3> 
  <p><strong>场景一：商品库存数</strong></p> 
  <p>从业务上，商品库存数据是热点数据，交易行为会直接影响库存。而 Redis 自身 String 类型提供了：</p> 
  <ol> 
   <li>set goods_id 10; 设置 id 为 good_id 的商品的库存初始值为 10；</li> 
   <li>decr goods_id; 当商品被购买时候，库存数据减 1。</li> 
  </ol> 
  <p><strong>依次类推的场景</strong>：商品的浏览次数，问题或者回复的点赞次数等。这种计数的场景都可以考虑利用 Redis 来实现。</p> 
  <p><strong>场景二：时效信息存储</strong></p> 
  <p>Redis 的数据存储具有自动失效能力。也就是存储的 key-value 可以设置过期时间：set(key, value, expireTime)。</p> 
  <p>比如，用户登录某个 App 需要获取登录验证码， 验证码在 30 秒内有效。那么我们就可以使用 String 类型存储验证码，同时设置 30 秒的失效时间。</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200519213848101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J4aDgxMQ==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-YVYYAIf9-1589895386136)(data:image/svg+xml;utf8,)]"></p> 
  <h3><a id="21hash_44"></a>2.1hash存储数据</h3> 
  <p><img src="https://img-blog.csdnimg.cn/20200519213854667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J4aDgxMQ==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-EJFSijlP-1589895386138)(data:image/svg+xml;utf8,)]"></p> 
  <h3><a id="22Hash__50"></a>2.2Hash 类型使用场景</h3> 
  <p>Redis 在存储对象（例如：用户信息）的时候需要对对象进行序列化转换然后存储。</p> 
  <p>还有一种形式，就是将对象数据转换为 JSON 结构数据，然后存储 JSON 的字符串到 Redis。</p> 
  <p>对于一些对象类型，还有一种比较方便的类型，那就是按照 Redis 的 Hash 类型进行存储。</p> 
  <p>例如，我们存储一些网站用户的基本信息， 我们可以使用：</p> 
  <p>这样就存储了一个用户基本信息，存储信息有：{name : 小明， phone : “123456”，sex : “男”}</p> 
  <p>当然这种类似场景还非常多， 比如存储订单的数据，产品的数据，商家基本信息等。<strong>以淘宝购物车为主</strong></p> 
  <p><img src="https://img-blog.csdnimg.cn/20200519213903365.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J4aDgxMQ==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-rKfgbmuK-1589895386139)(data:image/svg+xml;utf8,)]"></p> 
  <h3><a id="23_68"></a>2.3实现信息存储的优缺点</h3> 
  <p><strong>1.原生:</strong></p> 
  <ul> 
   <li>set user: 1:name james;</li> 
   <li>set user:1:age 23;</li> 
   <li>set user:1:sex boy;</li> 
  </ul> 
  <p><strong>优点:</strong> 简单直观，每个键对应一个值</p> 
  <p><strong>缺点:</strong> 键数过多，占用内存多，用户信息过于分散，不用于生产环境</p> 
  <p><strong>2.将对象序列化存入</strong></p> 
  <p>redis set user:1 serial ize (userInfo);</p> 
  <p><strong>优点:</strong> 编程简单，若使用序列化合理内存使用率高</p> 
  <p><strong>缺点:</strong> 序列化与反序列化有一定开销，更新属性时需要把userInfo全取出来进行反序列化，更新后再序列化到redis</p> 
  <p><strong>3.hash存储:</strong></p> 
  <p>hmset user:1 name james age 23 sex boy</p> 
  <p><strong>优点:</strong> 简单直观，使用合理可减少内存空间消耗</p> 
  <p><strong>缺点:</strong> 要控制ziplist 与hashtable两种编码转换，Mhashtable会消耗更多内存。</p> 
  <h3><a id="31List__96"></a>3.1List 类型使用场景</h3> 
  <p>list 是按照插入顺序排序的字符串链表。可以在头部和尾部插入新的元素（双向链表实现，两端添加元素的时间复杂度为 O(1)） 。</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200519213932776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J4aDgxMQ==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Zvx5IVDF-1589895386139)(data:image/svg+xml;utf8,)]"></p> 
  <p><strong>场景一：消息队列实现</strong></p> 
  <p>目前有很多专业的消息队列组件 Kafka、RabbitMQ 等。 我们在这里仅仅是使用 list 的特征来实现消息队列的要求。在实际技术选型的过程中，大家可以慎重思考。</p> 
  <p><strong>list 存储就是一个队列的存储形式：</strong></p> 
  <ol> 
   <li>lpush key value; 在 key 对应 list 的头部添加字符串元素；</li> 
   <li>rpop key;移除列表的最后一个元素，返回值为移除的元素。</li> 
  </ol> 
  <p><strong>场景二：最新上架商品</strong></p> 
  <p>在交易网站首页经常会有新上架产品推荐的模块， 这个模块是存储了最新上架前 100 名。</p> 
  <p>这时候使用 Redis 的 list 数据结构，来进行 TOP 100 新上架产品的存储。</p> 
  <p>Redis ltrim 指令对一个列表进行修剪（trim），这样 list 就会只包含指定范围的指定元素。</p> 
  <p>start 和 stop 都是由 0 开始计数的，这里的 0 是列表里的第一个元素（表头），1 是第二个元素。</p> 
  <h3><a id="41set__123"></a>4.1set 类型使用场景</h3> 
  <p>set 也是存储了一个集合列表功能。和 list 不同，set 具备去重功能。当需要存储一个列表信息，同时要求列表内的元素不能有重复，这时候使用 set 比较合适。与此同时，set 还提供的交集、并集、差集。</p> 
  <p>例如，在交易网站，我们会存储用户感兴趣的商品信息，在进行相似用户分析的时候， 可以通过计算两个不同用户之间感兴趣商品的数量来提供一些依据。</p> 
  <p>获取到两个用户相似的产品， 然后确定相似产品的类目就可以进行用户分析。</p> 
  <p>类似的应用场景还有， 社交场景下共同关注好友， 相似兴趣 tag 等场景的支持。</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200519213955472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J4aDgxMQ==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Ig9Ydf02-1589895386140)(data:image/svg+xml;utf8,)]"></p> 
  <h3><a id="42Set_137"></a>4.2Set集合特殊的操作命令</h3> 
  <p><strong>setA={A,B,C} setB={B, C}</strong></p> 
  <blockquote> 
   <p>1）集合与集合之间的交集</p> 
   <p>sinter setA setB－－&gt;得到集合{B,C}</p> 
   <ol start="2"> 
    <li>集合与集合之间的并集</li> 
   </ol> 
   <p>sunion setA setB －－&gt;得到集合{A,B,C}</p> 
   <p>3）集合与集合之间的差集</p> 
   <p>sdiff setA setB－－&gt;得到集合{A}</p> 
  </blockquote> 
  <h3><a id="43Set_153"></a>4.3Set集合特殊的操作命令应用场景</h3> 
  <p><strong>如何实现微博的微关系设计？（看视频更香）</strong></p> 
  <p><a href="https://www.bilibili.com/video/av92159723" rel="nofollow">www.bilibili.com/video/av921…</a></p> 
  <p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8zLzEwLzE3MGMzYzU5NDk2NTE1MWI?x-oss-process=image/format,png" alt="img"></p> 
  <h3><a id="51_Zset_162"></a>5.1 Zset有序集合</h3> 
  <p>常用于排行榜，如视频网站需要对用户上传视频做排行榜，或点赞数与集合有联系，不能有重复的成员</p> 
  <p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8zLzEwLzE3MGMzYzZlZmIzNWUwYzM?x-oss-process=image/format,png" alt="img"></p> 
  <h3><a id="52Zset__169"></a>5.2Zset 类型使用场景</h3> 
  <p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8zLzEwLzE3MGMzYzhjMjVmYzU3MTQ?x-oss-process=image/format,png" alt="img"></p> 
 </div> 
 <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e0530931f4.css" rel="stylesheet"> 
</div>, newsAttr=2, newsImage=https://profile.csdnimg.cn/1/4/0/3_rxh811, orderNum=null, isPublic=null, thumbs=132, visits=6, comments=null, collects=132, newsSource=https://blog.csdn.net/rxh811, newsSourceAuthor=码农清风, newsSourceTags=链表,Redis,队列,java,列表,redis, status=null, delFlag=null, createBy=null, createTime=null, updateBy=null, updateTime=null, remark=null, beginTime=null, endTime=null, params={}, newsType=null)
2020-09-03 15:19:23.466 WARN  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]o.s.a.rabbit.listener.ConditionalRejectingErrorHandler.log:129 -Execution of Rabbit message listener failed.
org.springframework.amqp.rabbit.support.ListenerExecutionFailedException: Listener method 'public void com.linq.news.task.listener.NewsConsumer.receiveNews(org.springframework.messaging.Message<java.util.HashMap<java.lang.String, java.lang.Object>>,com.rabbitmq.client.Channel) throws java.io.IOException' threw exception
	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:228)
	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandlerAndProcessResult(MessagingMessageListenerAdapter.java:148)
	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.onMessage(MessagingMessageListenerAdapter.java:133)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:1591)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.actualInvokeListener(AbstractMessageListenerContainer.java:1510)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:1498)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:1489)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.executeListener(AbstractMessageListenerContainer.java:1433)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.doReceiveAndExecute(SimpleMessageListenerContainer.java:970)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.receiveAndExecute(SimpleMessageListenerContainer.java:916)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.access$1600(SimpleMessageListenerContainer.java:83)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer$AsyncMessageProcessingConsumer.mainLoop(SimpleMessageListenerContainer.java:1291)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer$AsyncMessageProcessingConsumer.run(SimpleMessageListenerContainer.java:1197)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.linq.common.exception.CustomException: 消息队列消费异常新增新闻'大厂Redis高并发场景设计，面试问的都在这！'失败，新闻标题已存在
	at com.linq.news.task.listener.NewsConsumer.receiveNews(NewsConsumer.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:171)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:120)
	at org.springframework.amqp.rabbit.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:53)
	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:220)
	... 13 common frames omitted
2020-09-03 15:19:23.565 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:45 -接收到消息的时间----->>> 1599117563565
消费tag->>> 2
从消息队列中拿到数据----------->>>> {csdnNews=LinqNews(newsId=null, userId=1, newsTypeId=18, newsTitle=520了，用32做个简单的小程序, newsContent=<div id="article_content" class="article_content clearfix"> 
 <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3d4dc5c1de.css"> 
 <div id="content_views" class="markdown_views prism-atelier-sulphurpool-light"> 
  <!-- flowchart 箭头图标 勿删 --> 
  <svg xmlns="http://www.w3.org/2000/svg" style="display: none;"> 
   <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path> 
  </svg> 
  <p>520到了，看着朋友圈里的花式秀恩爱，平常午餐最爱吃的泡面都变得不那么香了。于是！突发奇想，突然就来了更新的想法，今天用32来做一个非常简单的小程序：<br> </p>
  <div class="toc">
   <h3>简单放个歌，再放个图</h3>
   <ul>
    <li><a href="#stm32f103c8t6_2" rel="nofollow">stm32f103c8t6</a></li>
    <li><a href="#_5" rel="nofollow">无源蜂鸣器</a></li>
    <ul>
     <li><a href="#_7" rel="nofollow">库函数</a></li>
     <ul>
      <li><a href="#void_Bee_Initvoid_18" rel="nofollow">void Bee_Init(void)</a></li>
      <li><a href="#void_Bee_testvoid_31" rel="nofollow">void Bee_test(void)</a></li>
      <li><a href="#_50" rel="nofollow">乐谱（简谱）</a></li>
      <li><a href="#void_Play_Musicvoid_68" rel="nofollow">void Play_Music(void)</a></li>
     </ul>
    </ul>
    <li><a href="#OLED764128_93" rel="nofollow">OLED模块（7脚64*128）</a></li>
    <ul>
     <li><a href="#SPI_96" rel="nofollow">模拟SPI</a></li>
     <ul>
      <li><a href="#h_97" rel="nofollow">.h</a></li>
      <li><a href="#c_114" rel="nofollow">.c</a></li>
     </ul>
     <li><a href="#OLED_154" rel="nofollow">OLED</a></li>
     <ul>
      <li><a href="#h_155" rel="nofollow">.h</a></li>
      <li><a href="#c_165" rel="nofollow">.c</a></li>
      <li><a href="#1616_246" rel="nofollow">显示16*16的字符</a></li>
      <li><a href="#_270" rel="nofollow">字符/图片库，取模</a></li>
     </ul>
    </ul>
   </ul>
  </div>
  <p></p> 
  <h1><a id="stm32f103c8t6_2"></a>stm32f103c8t6</h1> 
  <p>因为基本只用到两个外设，程序容量也很小，所以用c8t6就刚刚好<br> <img src="https://img-blog.csdnimg.cn/20200520123045284.png#pic_center" alt="在这里插入图片描述"></p> 
  <h1><a id="_5"></a>无源蜂鸣器</h1> 
  <p>这里要用的是<strong>无源蜂鸣器</strong>，其音调是可调的。</p> 
  <h2><a id="_7"></a>库函数</h2> 
  <p>我们先声明要用到的引脚以及相应的函数：</p> 
  <pre><code class="prism language-c"><span class="token macro property">#<span class="token directive keyword">define</span> BeeGpio GPIO自选</span>
<span class="token macro property">#<span class="token directive keyword">define</span> Bee GPIO_Pin_自选 </span>

<span class="token keyword">void</span> <span class="token function">Bee_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//蜂鸣器初始化</span>
<span class="token keyword">void</span> <span class="token function">Bee_test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//蜂鸣器测试</span>
<span class="token keyword">void</span> <span class="token function">Play_Music</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//播放音乐</span>
</code></pre> 
  <h3><a id="void_Bee_Initvoid_18"></a>void Bee_Init(void)</h3> 
  <p>这个也非常好理解，和初始化引脚是一样的 。</p> 
  <pre><code class="prism language-c"><span class="token keyword">void</span> <span class="token function">Bee_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	GPIO_InitTypeDef  GPIO_InitStructure<span class="token punctuation">;</span> 	
    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> Bee<span class="token punctuation">;</span> 
    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_Out_PP<span class="token punctuation">;</span> <span class="token comment">//推挽输出</span>
    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span> 
	<span class="token function">GPIO_Init</span><span class="token punctuation">(</span>BeeGpio<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>	
	
	<span class="token function">GPIO_WriteBit</span><span class="token punctuation">(</span>BeeGpio<span class="token punctuation">,</span>Bee<span class="token punctuation">,</span><span class="token punctuation">(</span>BitAction<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre> 
  <h3><a id="void_Bee_testvoid_31"></a>void Bee_test(void)</h3> 
  <p>在主函数演奏之前，我们先测试一下蜂鸣器好不好使，让它先响一声：</p> 
  <pre><code class="prism language-c"><span class="token keyword">void</span> <span class="token function">Bee_test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
	u16 i<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">200</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token function">GPIO_WriteBit</span><span class="token punctuation">(</span>BeeGpio<span class="token punctuation">,</span>Bee<span class="token punctuation">,</span><span class="token punctuation">(</span>BitAction<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
		<span class="token function">GPIO_WriteBit</span><span class="token punctuation">(</span>BeeGpio<span class="token punctuation">,</span>Bee<span class="token punctuation">,</span><span class="token punctuation">(</span>BitAction<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre> 
  <p><font color="#DC143C" size="4" face="黑体">为了给下文的演奏做铺垫，发出声响的原理现在要着重强调一下：</font><br> （delay函数是已经写好的，有us、ms、s等等单位，这里用的是us）</p> 
  <ul> 
   <li>在这个for循环里，先后两次的delay_us(500)加在一起构成了<strong>一个周期</strong>，这个周期的时间长是1000us，也就是1ms。在这1ms的时间里，一半的时间蜂鸣器不响，另一半的时间响，如此重复200次，就成为了我们人类耳朵听到的一个时间约为200ms的响声。</li> 
  </ul> 
  <h3><a id="_50"></a>乐谱（简谱）</h3> 
  <p>以一个非常简单的粉刷匠为例：（希望我没有记错谱子哈哈哈）<br> <img src="https://img-blog.csdnimg.cn/20200520125811854.png#pic_center" alt="在这里插入图片描述"></p> 
  <ul> 
   <li>C调中音12345对应的声音频率分别是：523、587、659、698、784Hz。所以我们就可以把简谱中的数字依次替换（<strong>C调其他音对应频率见文末注脚</strong><sup class="footnote-ref"><a href="#fn1" rel="nofollow" id="fnref1">1</a></sup>）</li> 
   <li>每个音都是要持续一定时间的，以ms为单位，比如“2432”的声音要保持一致，而“5-”要持续略长的时间</li> 
  </ul> 
  <p>以“2432|5-”为例，我们把音调与对应的时间 两两一组，放到一个数组里：</p> 
  <pre><code class="prism language-c">uc16 m_24325<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token comment">//奇数项为频率，偶数项为持续时间（ms）</span>
	<span class="token number">587</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span>
	<span class="token number">698</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span>
	<span class="token number">659</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span>
	<span class="token number">587</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span>
	<span class="token number">784</span><span class="token punctuation">,</span><span class="token number">750</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre> 
  <p>我在测试的时候发现如果严格按照音调对应频率的话，听起来反而与想象中的音乐差了不少（难道是蜂鸣器的事？）所以稍微改了一下频率。</p> 
  <h3><a id="void_Play_Musicvoid_68"></a>void Play_Music(void)</h3> 
  <pre><code class="prism language-c"> <span class="token keyword">void</span> <span class="token function">Play_Music</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
	u16 i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m_24325<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">*</span>m_24325<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token function">GPIO_WriteBit</span><span class="token punctuation">(</span>BeeGpio<span class="token punctuation">,</span>Bee<span class="token punctuation">,</span><span class="token punctuation">(</span>BitAction<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">500000</span><span class="token operator">/</span>m_24325<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">GPIO_WriteBit</span><span class="token punctuation">(</span>BeeGpio<span class="token punctuation">,</span>Bee<span class="token punctuation">,</span><span class="token punctuation">(</span>BitAction<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
			<span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">500000</span><span class="token operator">/</span>m_24325<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
		<span class="token punctuation">}</span>	
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre> 
  <ul> 
   <li>因为在前文的乐谱中，记了10个数据，5对音调与时间，所以令i=0;i&lt;5</li> 
   <li>在第二个for循环中，先后两次delay_us(500000/music1[i*2])，使得周期变为1000 000/频率</li> 
   <li>而 j&lt;m_24325[i*2]<em>m_24325[i</em>2+1]/1000 和 周期共同决定了蜂鸣器发出这个频率对应音调的时间</li> 
  </ul> 
  <p>演算一下：以“523Hz”响750ms为例：<br> <img src="https://img-blog.csdnimg.cn/20200520135502513.png" alt="在这里插入图片描述"><br> 如此，我们便能演奏一些基本的曲子了，只需要自己写一个乐谱就好了。<br> void Play_Music(void)也可以写为有输入参数的函数，这样便于我们用同一个函数调用不同的乐谱。</p> 
  <p>接下来就到了另一个模块：</p> 
  <h1><a id="OLED764128_93"></a>OLED模块（7脚64*128）</h1> 
  <p>买到OLED模块以后，商家往往都会附赠配套程序的，不过往往都会赠IIC的程序。这里把我以前用的SPI程序放上。</p> 
  <h2><a id="SPI_96"></a>模拟SPI</h2> 
  <h3><a id="h_97"></a>.h</h3> 
  <pre><code class="prism language-c"><span class="token macro property">#<span class="token directive keyword">define</span> OLED_CMD 0 </span>
<span class="token macro property">#<span class="token directive keyword">define</span> OLED_DATA 1 </span>

<span class="token macro property">#<span class="token directive keyword">define</span> OLED_CLK PAout(4) </span>
<span class="token macro property">#<span class="token directive keyword">define</span> OLED_MOSI PAout(3) </span>
<span class="token macro property">#<span class="token directive keyword">define</span> OLED_RST PAout(2) </span>
<span class="token macro property">#<span class="token directive keyword">define</span> OLED_DC PAout(1) </span>

<span class="token keyword">void</span> <span class="token function">OLED_SPI_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">void</span> <span class="token function">SPI_WriteByte</span><span class="token punctuation">(</span>uint8_t addr<span class="token punctuation">,</span>uint8_t data<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">void</span> <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> cmd<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">void</span> <span class="token function">WriteData</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre> 
  <h3><a id="c_114"></a>.c</h3> 
  <pre><code class="prism language-c"><span class="token keyword">void</span> <span class="token function">OLED_SPI_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>
    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOA <span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin<span class="token operator">=</span>GPIO_Pin_1<span class="token operator">|</span>GPIO_Pin_2<span class="token operator">|</span>GPIO_Pin_3<span class="token operator">|</span>GPIO_Pin_4<span class="token punctuation">;</span> 
    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode<span class="token operator">=</span>GPIO_Mode_Out_PP<span class="token punctuation">;</span>
    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed<span class="token operator">=</span>GPIO_Speed_50MHz<span class="token punctuation">;</span>
    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span><span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">void</span> <span class="token function">SPI_WriteByte</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> data<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    OLED_DC <span class="token operator">=</span>cmd<span class="token punctuation">;</span>
    OLED_CLK<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        OLED_CLK<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token operator">&amp;</span><span class="token number">0x80</span><span class="token punctuation">)</span>OLED_MOSI<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> 
        <span class="token keyword">else</span> OLED_MOSI<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        OLED_CLK<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        data<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    OLED_CLK<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    OLED_DC<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">SPI_WriteByte</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">WriteData</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">SPI_WriteByte</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>OLED_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
  <h2><a id="OLED_154"></a>OLED</h2> 
  <h3><a id="h_155"></a>.h</h3> 
  <pre><code class="prism language-c"><span class="token keyword">void</span> <span class="token function">OLED_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">OLED_ON</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">OLED_OFF</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">OLED_Refresh_Gram</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">OLED_Clear</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
  <h3><a id="c_165"></a>.c</h3> 
  <pre><code class="prism language-c">u8 OLED_GRAM<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   

<span class="token keyword">void</span> <span class="token function">OLED_DLY_ms</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> ms<span class="token punctuation">)</span>
<span class="token punctuation">{</span>                         
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    a<span class="token operator">=</span><span class="token number">1335</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ms<span class="token operator">--</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">OLED_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">OLED_SPI_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    OLED_CLK <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    OLED_RST <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">OLED_DLY_ms</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    OLED_RST <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

      <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xae</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xd5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xa8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x3f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xd3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xB0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x8d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xa1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xc8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xda</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x81</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xd9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xf1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xdb</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xa4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xa6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xaf</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

    <span class="token function">OLED_Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">OLED_Refresh_Gram</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    u8 i<span class="token punctuation">,</span>n<span class="token punctuation">;</span>         
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  
    <span class="token punctuation">{</span>  
        <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xb0</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>   
        <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      
        <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      
        <span class="token keyword">for</span><span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>n<span class="token operator">&lt;</span><span class="token number">128</span><span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">WriteData</span><span class="token punctuation">(</span>OLED_GRAM<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>   
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">OLED_Clear</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>  
<span class="token punctuation">{</span>  
   	u8 j<span class="token punctuation">,</span>t<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>t<span class="token operator">=</span><span class="token number">0xB0</span><span class="token punctuation">;</span>t<span class="token operator">&lt;</span><span class="token number">0xB8</span><span class="token punctuation">;</span>t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	   <span class="token function">WriteCmd</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
		 <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		 <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
		<span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">132</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 			    <span class="token function">WriteData</span><span class="token punctuation">(</span><span class="token number">0x11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre> 
  <h3><a id="1616_246"></a>显示16*16的字符</h3> 
  <p>这个是仿照商家的IIC例程改成SPI的写法，其实驱动OLED的方法都是一样的，只不过IIC和SPI略有不同而已（3个输入参数会在稍后讲到）</p> 
  <pre><code class="prism language-c"><span class="token keyword">void</span> <span class="token function">OLED_DISPLAY_16x16</span><span class="token punctuation">(</span>u8 x<span class="token punctuation">,</span>u8 y<span class="token punctuation">,</span> u16 w<span class="token punctuation">)</span><span class="token punctuation">{</span> 
	u8 j<span class="token punctuation">,</span>t<span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	y<span class="token operator">=</span>y<span class="token operator">-</span><span class="token number">14</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>t<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span>t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xb0</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> 
		<span class="token function">WriteCmd</span><span class="token punctuation">(</span>y<span class="token operator">/</span><span class="token number">16</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
		<span class="token function">WriteCmd</span><span class="token punctuation">(</span>y<span class="token operator">%</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 			<span class="token function">WriteData</span><span class="token punctuation">(</span>M_16<span class="token punctuation">[</span><span class="token punctuation">(</span>w<span class="token operator">*</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token operator">+</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			c<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span>x<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xAF</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre> 
  <ul> 
   <li>第一个参数x:字符的行：0、2、4、6共4行（4*16=64，把64个像素分为4行）</li> 
   <li>第二个参数y:字符的列：共128列（像素），但是因为字符是16*16的，所以用n * 16代替，便于计算</li> 
   <li>第三个参数w:对应库中的第几个字符</li> 
   <li>库：M_16（在倒数第5行），这个内容马上就讲到</li> 
  </ul> 
  <p>比如：OLED_DISPLAY_16x16(4,8*16,8)，在OLED屏幕第3行的第8列，显示<strong>库</strong>中的第9个字符</p> 
  <h3><a id="_270"></a>字符/图片库，取模</h3> 
  <p>这个库是需要咱们自己建立的，可以由取模软件自动生成每个字符对应的16进制数据。<br> 我们用到的取模软件是：<strong>PCtoLCD2002</strong><br> 配置如图：<br> <img src="https://img-blog.csdnimg.cn/20200520143131768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tfa3N5,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> 用它生成数据以后就可以把数据放到一个单独的.h文件中，作为我们自己的字符库。这里以两个16*16的空白为例</p> 
  <pre><code class="prism language-c">uc8 M_16<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//" "</span>
<span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span>
<span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span>
  <span class="token comment">//" "</span>
<span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span>
<span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre> 
  <p>这个软件还是很好用的，而且像素也可以自定，比如用64 * 128的图片铺满oled等等。详见<a href="https://www.bilibili.com/video/BV1cE411N7WA/" rel="nofollow">生日快乐（b站投稿）</a>。这里用的就是杜洋老师的开发板，我最初学32的时候就是学习杜洋老师的教程，虽然后来我又学了野火的32，正点原子的linux…(我很专一的/doge)</p> 
  <p>跑题了，这里只是举了一个16 * 16字符的例子，还有8 * 16字符、字符串、64 * 128图片等等，就请各位自己研究了/doge</p> 
  <hr> 
  <p>我是康，希望做一名能帮助到各位的博主！ <strong>我不是本来要更机器学习的嘛？</strong> 在做了在做了（0%）预计下周会发布，欢迎感兴趣的小伙伴与我共同学习，一起进步！</p> 
  <hr> 
  <table> 
   <thead> 
    <tr> 
     <th>C调低音</th> 
     <th>频率（Hz）</th> 
     <th>C调中音</th> 
     <th>频率（Hz）</th> 
     <th>C调高音</th> 
     <th>频率（Hz）</th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <td>1</td> 
     <td>262</td> 
     <td>1</td> 
     <td>523</td> 
     <td>1</td> 
     <td>1046</td> 
    </tr> 
    <tr> 
     <td>1#</td> 
     <td>277</td> 
     <td>1#</td> 
     <td>554</td> 
     <td>1#</td> 
     <td>1109</td> 
    </tr> 
    <tr> 
     <td>2</td> 
     <td>294</td> 
     <td>2</td> 
     <td>587</td> 
     <td>2</td> 
     <td>1175</td> 
    </tr> 
    <tr> 
     <td>2#</td> 
     <td>311</td> 
     <td>2#</td> 
     <td>622</td> 
     <td>2#</td> 
     <td>1245</td> 
    </tr> 
    <tr> 
     <td>3</td> 
     <td>330</td> 
     <td>3</td> 
     <td>659</td> 
     <td>3</td> 
     <td>1318</td> 
    </tr> 
    <tr> 
     <td>4</td> 
     <td>349</td> 
     <td>4</td> 
     <td>698</td> 
     <td>4</td> 
     <td>1397</td> 
    </tr> 
    <tr> 
     <td>4#</td> 
     <td>370</td> 
     <td>4#</td> 
     <td>740</td> 
     <td>4#</td> 
     <td>1480</td> 
    </tr> 
    <tr> 
     <td>5</td> 
     <td>392</td> 
     <td>5</td> 
     <td>784</td> 
     <td>5</td> 
     <td>1568</td> 
    </tr> 
    <tr> 
     <td>5#</td> 
     <td>415</td> 
     <td>5#</td> 
     <td>831</td> 
     <td>5#</td> 
     <td>1661</td> 
    </tr> 
    <tr> 
     <td>6</td> 
     <td>440</td> 
     <td>6</td> 
     <td>880</td> 
     <td>6</td> 
     <td>1760</td> 
    </tr> 
    <tr> 
     <td>6#</td> 
     <td>466</td> 
     <td>6#</td> 
     <td>932</td> 
     <td>6#</td> 
     <td>1865</td> 
    </tr> 
    <tr> 
     <td>7</td> 
     <td>494</td> 
     <td>7</td> 
     <td>988</td> 
     <td>7</td> 
     <td>1976</td> 
    </tr> 
   </tbody> 
  </table>
  <hr class="footnotes-sep"> 
  <section class="footnotes"> 
   <ol class="footnotes-list"> 
    <li id="fn1" class="footnote-item"> <a href="#fnref1" rel="nofollow" class="footnote-backref">↩︎</a></li> 
   </ol> 
  </section> 
 </div> 
 <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e0530931f4.css" rel="stylesheet"> 
</div>, newsAttr=2, newsImage=https://profile.csdnimg.cn/8/2/A/3_k_ksy, orderNum=null, isPublic=null, thumbs=86, visits=8, comments=null, collects=86, newsSource=https://blog.csdn.net/k_ksy, newsSourceAuthor=康., newsSourceTags=小程序集合,stm32,嵌入式,单片机, status=null, delFlag=null, createBy=null, createTime=null, updateBy=null, updateTime=null, remark=null, beginTime=null, endTime=null, params={}, newsType=null)}
2020-09-03 15:19:23.566 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:50 -获取peNews--->>>null
2020-09-03 15:19:23.566 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:51 -获取entertainmentNews--->>>null
2020-09-03 15:19:23.566 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:52 -获取csdnNews--->>>LinqNews(newsId=null, userId=1, newsTypeId=18, newsTitle=520了，用32做个简单的小程序, newsContent=<div id="article_content" class="article_content clearfix"> 
 <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3d4dc5c1de.css"> 
 <div id="content_views" class="markdown_views prism-atelier-sulphurpool-light"> 
  <!-- flowchart 箭头图标 勿删 --> 
  <svg xmlns="http://www.w3.org/2000/svg" style="display: none;"> 
   <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path> 
  </svg> 
  <p>520到了，看着朋友圈里的花式秀恩爱，平常午餐最爱吃的泡面都变得不那么香了。于是！突发奇想，突然就来了更新的想法，今天用32来做一个非常简单的小程序：<br> </p>
  <div class="toc">
   <h3>简单放个歌，再放个图</h3>
   <ul>
    <li><a href="#stm32f103c8t6_2" rel="nofollow">stm32f103c8t6</a></li>
    <li><a href="#_5" rel="nofollow">无源蜂鸣器</a></li>
    <ul>
     <li><a href="#_7" rel="nofollow">库函数</a></li>
     <ul>
      <li><a href="#void_Bee_Initvoid_18" rel="nofollow">void Bee_Init(void)</a></li>
      <li><a href="#void_Bee_testvoid_31" rel="nofollow">void Bee_test(void)</a></li>
      <li><a href="#_50" rel="nofollow">乐谱（简谱）</a></li>
      <li><a href="#void_Play_Musicvoid_68" rel="nofollow">void Play_Music(void)</a></li>
     </ul>
    </ul>
    <li><a href="#OLED764128_93" rel="nofollow">OLED模块（7脚64*128）</a></li>
    <ul>
     <li><a href="#SPI_96" rel="nofollow">模拟SPI</a></li>
     <ul>
      <li><a href="#h_97" rel="nofollow">.h</a></li>
      <li><a href="#c_114" rel="nofollow">.c</a></li>
     </ul>
     <li><a href="#OLED_154" rel="nofollow">OLED</a></li>
     <ul>
      <li><a href="#h_155" rel="nofollow">.h</a></li>
      <li><a href="#c_165" rel="nofollow">.c</a></li>
      <li><a href="#1616_246" rel="nofollow">显示16*16的字符</a></li>
      <li><a href="#_270" rel="nofollow">字符/图片库，取模</a></li>
     </ul>
    </ul>
   </ul>
  </div>
  <p></p> 
  <h1><a id="stm32f103c8t6_2"></a>stm32f103c8t6</h1> 
  <p>因为基本只用到两个外设，程序容量也很小，所以用c8t6就刚刚好<br> <img src="https://img-blog.csdnimg.cn/20200520123045284.png#pic_center" alt="在这里插入图片描述"></p> 
  <h1><a id="_5"></a>无源蜂鸣器</h1> 
  <p>这里要用的是<strong>无源蜂鸣器</strong>，其音调是可调的。</p> 
  <h2><a id="_7"></a>库函数</h2> 
  <p>我们先声明要用到的引脚以及相应的函数：</p> 
  <pre><code class="prism language-c"><span class="token macro property">#<span class="token directive keyword">define</span> BeeGpio GPIO自选</span>
<span class="token macro property">#<span class="token directive keyword">define</span> Bee GPIO_Pin_自选 </span>

<span class="token keyword">void</span> <span class="token function">Bee_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//蜂鸣器初始化</span>
<span class="token keyword">void</span> <span class="token function">Bee_test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//蜂鸣器测试</span>
<span class="token keyword">void</span> <span class="token function">Play_Music</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//播放音乐</span>
</code></pre> 
  <h3><a id="void_Bee_Initvoid_18"></a>void Bee_Init(void)</h3> 
  <p>这个也非常好理解，和初始化引脚是一样的 。</p> 
  <pre><code class="prism language-c"><span class="token keyword">void</span> <span class="token function">Bee_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	GPIO_InitTypeDef  GPIO_InitStructure<span class="token punctuation">;</span> 	
    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> Bee<span class="token punctuation">;</span> 
    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_Out_PP<span class="token punctuation">;</span> <span class="token comment">//推挽输出</span>
    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span> 
	<span class="token function">GPIO_Init</span><span class="token punctuation">(</span>BeeGpio<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>	
	
	<span class="token function">GPIO_WriteBit</span><span class="token punctuation">(</span>BeeGpio<span class="token punctuation">,</span>Bee<span class="token punctuation">,</span><span class="token punctuation">(</span>BitAction<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre> 
  <h3><a id="void_Bee_testvoid_31"></a>void Bee_test(void)</h3> 
  <p>在主函数演奏之前，我们先测试一下蜂鸣器好不好使，让它先响一声：</p> 
  <pre><code class="prism language-c"><span class="token keyword">void</span> <span class="token function">Bee_test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
	u16 i<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">200</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token function">GPIO_WriteBit</span><span class="token punctuation">(</span>BeeGpio<span class="token punctuation">,</span>Bee<span class="token punctuation">,</span><span class="token punctuation">(</span>BitAction<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
		<span class="token function">GPIO_WriteBit</span><span class="token punctuation">(</span>BeeGpio<span class="token punctuation">,</span>Bee<span class="token punctuation">,</span><span class="token punctuation">(</span>BitAction<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre> 
  <p><font color="#DC143C" size="4" face="黑体">为了给下文的演奏做铺垫，发出声响的原理现在要着重强调一下：</font><br> （delay函数是已经写好的，有us、ms、s等等单位，这里用的是us）</p> 
  <ul> 
   <li>在这个for循环里，先后两次的delay_us(500)加在一起构成了<strong>一个周期</strong>，这个周期的时间长是1000us，也就是1ms。在这1ms的时间里，一半的时间蜂鸣器不响，另一半的时间响，如此重复200次，就成为了我们人类耳朵听到的一个时间约为200ms的响声。</li> 
  </ul> 
  <h3><a id="_50"></a>乐谱（简谱）</h3> 
  <p>以一个非常简单的粉刷匠为例：（希望我没有记错谱子哈哈哈）<br> <img src="https://img-blog.csdnimg.cn/20200520125811854.png#pic_center" alt="在这里插入图片描述"></p> 
  <ul> 
   <li>C调中音12345对应的声音频率分别是：523、587、659、698、784Hz。所以我们就可以把简谱中的数字依次替换（<strong>C调其他音对应频率见文末注脚</strong><sup class="footnote-ref"><a href="#fn1" rel="nofollow" id="fnref1">1</a></sup>）</li> 
   <li>每个音都是要持续一定时间的，以ms为单位，比如“2432”的声音要保持一致，而“5-”要持续略长的时间</li> 
  </ul> 
  <p>以“2432|5-”为例，我们把音调与对应的时间 两两一组，放到一个数组里：</p> 
  <pre><code class="prism language-c">uc16 m_24325<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token comment">//奇数项为频率，偶数项为持续时间（ms）</span>
	<span class="token number">587</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span>
	<span class="token number">698</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span>
	<span class="token number">659</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span>
	<span class="token number">587</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span>
	<span class="token number">784</span><span class="token punctuation">,</span><span class="token number">750</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre> 
  <p>我在测试的时候发现如果严格按照音调对应频率的话，听起来反而与想象中的音乐差了不少（难道是蜂鸣器的事？）所以稍微改了一下频率。</p> 
  <h3><a id="void_Play_Musicvoid_68"></a>void Play_Music(void)</h3> 
  <pre><code class="prism language-c"> <span class="token keyword">void</span> <span class="token function">Play_Music</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
	u16 i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m_24325<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">*</span>m_24325<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token function">GPIO_WriteBit</span><span class="token punctuation">(</span>BeeGpio<span class="token punctuation">,</span>Bee<span class="token punctuation">,</span><span class="token punctuation">(</span>BitAction<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">500000</span><span class="token operator">/</span>m_24325<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">GPIO_WriteBit</span><span class="token punctuation">(</span>BeeGpio<span class="token punctuation">,</span>Bee<span class="token punctuation">,</span><span class="token punctuation">(</span>BitAction<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
			<span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">500000</span><span class="token operator">/</span>m_24325<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
		<span class="token punctuation">}</span>	
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre> 
  <ul> 
   <li>因为在前文的乐谱中，记了10个数据，5对音调与时间，所以令i=0;i&lt;5</li> 
   <li>在第二个for循环中，先后两次delay_us(500000/music1[i*2])，使得周期变为1000 000/频率</li> 
   <li>而 j&lt;m_24325[i*2]<em>m_24325[i</em>2+1]/1000 和 周期共同决定了蜂鸣器发出这个频率对应音调的时间</li> 
  </ul> 
  <p>演算一下：以“523Hz”响750ms为例：<br> <img src="https://img-blog.csdnimg.cn/20200520135502513.png" alt="在这里插入图片描述"><br> 如此，我们便能演奏一些基本的曲子了，只需要自己写一个乐谱就好了。<br> void Play_Music(void)也可以写为有输入参数的函数，这样便于我们用同一个函数调用不同的乐谱。</p> 
  <p>接下来就到了另一个模块：</p> 
  <h1><a id="OLED764128_93"></a>OLED模块（7脚64*128）</h1> 
  <p>买到OLED模块以后，商家往往都会附赠配套程序的，不过往往都会赠IIC的程序。这里把我以前用的SPI程序放上。</p> 
  <h2><a id="SPI_96"></a>模拟SPI</h2> 
  <h3><a id="h_97"></a>.h</h3> 
  <pre><code class="prism language-c"><span class="token macro property">#<span class="token directive keyword">define</span> OLED_CMD 0 </span>
<span class="token macro property">#<span class="token directive keyword">define</span> OLED_DATA 1 </span>

<span class="token macro property">#<span class="token directive keyword">define</span> OLED_CLK PAout(4) </span>
<span class="token macro property">#<span class="token directive keyword">define</span> OLED_MOSI PAout(3) </span>
<span class="token macro property">#<span class="token directive keyword">define</span> OLED_RST PAout(2) </span>
<span class="token macro property">#<span class="token directive keyword">define</span> OLED_DC PAout(1) </span>

<span class="token keyword">void</span> <span class="token function">OLED_SPI_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">void</span> <span class="token function">SPI_WriteByte</span><span class="token punctuation">(</span>uint8_t addr<span class="token punctuation">,</span>uint8_t data<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">void</span> <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> cmd<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">void</span> <span class="token function">WriteData</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre> 
  <h3><a id="c_114"></a>.c</h3> 
  <pre><code class="prism language-c"><span class="token keyword">void</span> <span class="token function">OLED_SPI_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>
    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOA <span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin<span class="token operator">=</span>GPIO_Pin_1<span class="token operator">|</span>GPIO_Pin_2<span class="token operator">|</span>GPIO_Pin_3<span class="token operator">|</span>GPIO_Pin_4<span class="token punctuation">;</span> 
    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode<span class="token operator">=</span>GPIO_Mode_Out_PP<span class="token punctuation">;</span>
    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed<span class="token operator">=</span>GPIO_Speed_50MHz<span class="token punctuation">;</span>
    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span><span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">void</span> <span class="token function">SPI_WriteByte</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> data<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    OLED_DC <span class="token operator">=</span>cmd<span class="token punctuation">;</span>
    OLED_CLK<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        OLED_CLK<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token operator">&amp;</span><span class="token number">0x80</span><span class="token punctuation">)</span>OLED_MOSI<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> 
        <span class="token keyword">else</span> OLED_MOSI<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        OLED_CLK<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        data<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    OLED_CLK<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    OLED_DC<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">SPI_WriteByte</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">WriteData</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">SPI_WriteByte</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>OLED_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
  <h2><a id="OLED_154"></a>OLED</h2> 
  <h3><a id="h_155"></a>.h</h3> 
  <pre><code class="prism language-c"><span class="token keyword">void</span> <span class="token function">OLED_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">OLED_ON</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">OLED_OFF</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">OLED_Refresh_Gram</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">OLED_Clear</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
  <h3><a id="c_165"></a>.c</h3> 
  <pre><code class="prism language-c">u8 OLED_GRAM<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   

<span class="token keyword">void</span> <span class="token function">OLED_DLY_ms</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> ms<span class="token punctuation">)</span>
<span class="token punctuation">{</span>                         
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    a<span class="token operator">=</span><span class="token number">1335</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ms<span class="token operator">--</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">OLED_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">OLED_SPI_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    OLED_CLK <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    OLED_RST <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">OLED_DLY_ms</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    OLED_RST <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

      <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xae</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xd5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xa8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x3f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xd3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xB0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x8d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xa1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xc8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xda</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x81</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xd9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xf1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xdb</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xa4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xa6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xaf</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

    <span class="token function">OLED_Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">OLED_Refresh_Gram</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    u8 i<span class="token punctuation">,</span>n<span class="token punctuation">;</span>         
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  
    <span class="token punctuation">{</span>  
        <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xb0</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>   
        <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      
        <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      
        <span class="token keyword">for</span><span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>n<span class="token operator">&lt;</span><span class="token number">128</span><span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">WriteData</span><span class="token punctuation">(</span>OLED_GRAM<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>   
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">OLED_Clear</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>  
<span class="token punctuation">{</span>  
   	u8 j<span class="token punctuation">,</span>t<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>t<span class="token operator">=</span><span class="token number">0xB0</span><span class="token punctuation">;</span>t<span class="token operator">&lt;</span><span class="token number">0xB8</span><span class="token punctuation">;</span>t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	   <span class="token function">WriteCmd</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
		 <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		 <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
		<span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">132</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 			    <span class="token function">WriteData</span><span class="token punctuation">(</span><span class="token number">0x11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre> 
  <h3><a id="1616_246"></a>显示16*16的字符</h3> 
  <p>这个是仿照商家的IIC例程改成SPI的写法，其实驱动OLED的方法都是一样的，只不过IIC和SPI略有不同而已（3个输入参数会在稍后讲到）</p> 
  <pre><code class="prism language-c"><span class="token keyword">void</span> <span class="token function">OLED_DISPLAY_16x16</span><span class="token punctuation">(</span>u8 x<span class="token punctuation">,</span>u8 y<span class="token punctuation">,</span> u16 w<span class="token punctuation">)</span><span class="token punctuation">{</span> 
	u8 j<span class="token punctuation">,</span>t<span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	y<span class="token operator">=</span>y<span class="token operator">-</span><span class="token number">14</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>t<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span>t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xb0</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> 
		<span class="token function">WriteCmd</span><span class="token punctuation">(</span>y<span class="token operator">/</span><span class="token number">16</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
		<span class="token function">WriteCmd</span><span class="token punctuation">(</span>y<span class="token operator">%</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 			<span class="token function">WriteData</span><span class="token punctuation">(</span>M_16<span class="token punctuation">[</span><span class="token punctuation">(</span>w<span class="token operator">*</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token operator">+</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			c<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span>x<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xAF</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre> 
  <ul> 
   <li>第一个参数x:字符的行：0、2、4、6共4行（4*16=64，把64个像素分为4行）</li> 
   <li>第二个参数y:字符的列：共128列（像素），但是因为字符是16*16的，所以用n * 16代替，便于计算</li> 
   <li>第三个参数w:对应库中的第几个字符</li> 
   <li>库：M_16（在倒数第5行），这个内容马上就讲到</li> 
  </ul> 
  <p>比如：OLED_DISPLAY_16x16(4,8*16,8)，在OLED屏幕第3行的第8列，显示<strong>库</strong>中的第9个字符</p> 
  <h3><a id="_270"></a>字符/图片库，取模</h3> 
  <p>这个库是需要咱们自己建立的，可以由取模软件自动生成每个字符对应的16进制数据。<br> 我们用到的取模软件是：<strong>PCtoLCD2002</strong><br> 配置如图：<br> <img src="https://img-blog.csdnimg.cn/20200520143131768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tfa3N5,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> 用它生成数据以后就可以把数据放到一个单独的.h文件中，作为我们自己的字符库。这里以两个16*16的空白为例</p> 
  <pre><code class="prism language-c">uc8 M_16<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//" "</span>
<span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span>
<span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span>
  <span class="token comment">//" "</span>
<span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span>
<span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre> 
  <p>这个软件还是很好用的，而且像素也可以自定，比如用64 * 128的图片铺满oled等等。详见<a href="https://www.bilibili.com/video/BV1cE411N7WA/" rel="nofollow">生日快乐（b站投稿）</a>。这里用的就是杜洋老师的开发板，我最初学32的时候就是学习杜洋老师的教程，虽然后来我又学了野火的32，正点原子的linux…(我很专一的/doge)</p> 
  <p>跑题了，这里只是举了一个16 * 16字符的例子，还有8 * 16字符、字符串、64 * 128图片等等，就请各位自己研究了/doge</p> 
  <hr> 
  <p>我是康，希望做一名能帮助到各位的博主！ <strong>我不是本来要更机器学习的嘛？</strong> 在做了在做了（0%）预计下周会发布，欢迎感兴趣的小伙伴与我共同学习，一起进步！</p> 
  <hr> 
  <table> 
   <thead> 
    <tr> 
     <th>C调低音</th> 
     <th>频率（Hz）</th> 
     <th>C调中音</th> 
     <th>频率（Hz）</th> 
     <th>C调高音</th> 
     <th>频率（Hz）</th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <td>1</td> 
     <td>262</td> 
     <td>1</td> 
     <td>523</td> 
     <td>1</td> 
     <td>1046</td> 
    </tr> 
    <tr> 
     <td>1#</td> 
     <td>277</td> 
     <td>1#</td> 
     <td>554</td> 
     <td>1#</td> 
     <td>1109</td> 
    </tr> 
    <tr> 
     <td>2</td> 
     <td>294</td> 
     <td>2</td> 
     <td>587</td> 
     <td>2</td> 
     <td>1175</td> 
    </tr> 
    <tr> 
     <td>2#</td> 
     <td>311</td> 
     <td>2#</td> 
     <td>622</td> 
     <td>2#</td> 
     <td>1245</td> 
    </tr> 
    <tr> 
     <td>3</td> 
     <td>330</td> 
     <td>3</td> 
     <td>659</td> 
     <td>3</td> 
     <td>1318</td> 
    </tr> 
    <tr> 
     <td>4</td> 
     <td>349</td> 
     <td>4</td> 
     <td>698</td> 
     <td>4</td> 
     <td>1397</td> 
    </tr> 
    <tr> 
     <td>4#</td> 
     <td>370</td> 
     <td>4#</td> 
     <td>740</td> 
     <td>4#</td> 
     <td>1480</td> 
    </tr> 
    <tr> 
     <td>5</td> 
     <td>392</td> 
     <td>5</td> 
     <td>784</td> 
     <td>5</td> 
     <td>1568</td> 
    </tr> 
    <tr> 
     <td>5#</td> 
     <td>415</td> 
     <td>5#</td> 
     <td>831</td> 
     <td>5#</td> 
     <td>1661</td> 
    </tr> 
    <tr> 
     <td>6</td> 
     <td>440</td> 
     <td>6</td> 
     <td>880</td> 
     <td>6</td> 
     <td>1760</td> 
    </tr> 
    <tr> 
     <td>6#</td> 
     <td>466</td> 
     <td>6#</td> 
     <td>932</td> 
     <td>6#</td> 
     <td>1865</td> 
    </tr> 
    <tr> 
     <td>7</td> 
     <td>494</td> 
     <td>7</td> 
     <td>988</td> 
     <td>7</td> 
     <td>1976</td> 
    </tr> 
   </tbody> 
  </table>
  <hr class="footnotes-sep"> 
  <section class="footnotes"> 
   <ol class="footnotes-list"> 
    <li id="fn1" class="footnote-item"> <a href="#fnref1" rel="nofollow" class="footnote-backref">↩︎</a></li> 
   </ol> 
  </section> 
 </div> 
 <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e0530931f4.css" rel="stylesheet"> 
</div>, newsAttr=2, newsImage=https://profile.csdnimg.cn/8/2/A/3_k_ksy, orderNum=null, isPublic=null, thumbs=86, visits=8, comments=null, collects=86, newsSource=https://blog.csdn.net/k_ksy, newsSourceAuthor=康., newsSourceTags=小程序集合,stm32,嵌入式,单片机, status=null, delFlag=null, createBy=null, createTime=null, updateBy=null, updateTime=null, remark=null, beginTime=null, endTime=null, params={}, newsType=null)
2020-09-03 15:19:23.581 WARN  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]o.s.a.rabbit.listener.ConditionalRejectingErrorHandler.log:129 -Execution of Rabbit message listener failed.
org.springframework.amqp.rabbit.support.ListenerExecutionFailedException: Listener method 'public void com.linq.news.task.listener.NewsConsumer.receiveNews(org.springframework.messaging.Message<java.util.HashMap<java.lang.String, java.lang.Object>>,com.rabbitmq.client.Channel) throws java.io.IOException' threw exception
	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:228)
	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandlerAndProcessResult(MessagingMessageListenerAdapter.java:148)
	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.onMessage(MessagingMessageListenerAdapter.java:133)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:1591)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.actualInvokeListener(AbstractMessageListenerContainer.java:1510)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:1498)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:1489)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.executeListener(AbstractMessageListenerContainer.java:1433)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.doReceiveAndExecute(SimpleMessageListenerContainer.java:970)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.receiveAndExecute(SimpleMessageListenerContainer.java:916)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.access$1600(SimpleMessageListenerContainer.java:83)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer$AsyncMessageProcessingConsumer.mainLoop(SimpleMessageListenerContainer.java:1291)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer$AsyncMessageProcessingConsumer.run(SimpleMessageListenerContainer.java:1197)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.linq.common.exception.CustomException: 消息队列消费异常新增新闻'520了，用32做个简单的小程序'失败，新闻标题已存在
	at com.linq.news.task.listener.NewsConsumer.receiveNews(NewsConsumer.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:171)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:120)
	at org.springframework.amqp.rabbit.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:53)
	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:220)
	... 13 common frames omitted
2020-09-03 15:19:23.601 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:45 -接收到消息的时间----->>> 1599117563601
消费tag->>> 3
从消息队列中拿到数据----------->>>> {csdnNews=LinqNews(newsId=null, userId=1, newsTypeId=18, newsTitle=逆向工程，调试Hello World ！程序（更新中）, newsContent=<div id="article_content" class="article_content clearfix"> 
 <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3d4dc5c1de.css"> 
 <div id="content_views" class="markdown_views prism-atom-one-dark"> 
  <!-- flowchart 箭头图标 勿删 --> 
  <svg xmlns="http://www.w3.org/2000/svg" style="display: none;"> 
   <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path> 
  </svg> 
  <p></p>
  <div class="toc">
   <h3>逆向工程，调试Hello,World ！ 程序（更新中）</h3>
   <ul>
    <li><a href="#_2" rel="nofollow">逆向分析法</a></li>
    <ul>
     <li><a href="#_3" rel="nofollow">静态分析法</a></li>
     <li><a href="#_5" rel="nofollow">动态分析法</a></li>
    </ul>
    <li><a href="#hello_world__8" rel="nofollow">调试hello world 程序</a></li>
    <ul>
     <li><a href="#_9" rel="nofollow">代码</a></li>
    </ul>
    <li><a href="#_21" rel="nofollow">开始调试</a></li>
    <ul>
     <li><a href="#OllyDbg___35" rel="nofollow">OllyDbg 基本指令 （适用于代码窗口）</a></li>
     <li><a href="#_45" rel="nofollow">设置断点的四种方法</a></li>
     <ul>
      <li><a href="#1goto__46" rel="nofollow">1.goto 命令</a></li>
      <li><a href="#2_51" rel="nofollow">2.设置断点</a></li>
      <li><a href="#3_59" rel="nofollow">3.注释</a></li>
      <li><a href="#4_64" rel="nofollow">4.标签</a></li>
     </ul>
     <li><a href="#_73" rel="nofollow">快速查找指定代码的四种方法</a></li>
     <ul>
      <li><a href="#1__76" rel="nofollow">1. 代码执行法</a></li>
      <li><a href="#2_79" rel="nofollow">2.字符串检索法</a></li>
      <li><a href="#3_82" rel="nofollow">3.在调试代码中设置断点</a></li>
      <li><a href="#4API_85" rel="nofollow">4.在API代码中设置断点</a></li>
     </ul>
     <li><a href="#hello_world_88" rel="nofollow">使用“打补丁”方式修改“hello world！”字符串</a></li>
     <ul>
      <li><a href="#_89" rel="nofollow">修改字符的两种方法</a></li>
      <ul>
       <li><a href="#1_90" rel="nofollow">1.直接修改缓冲区</a></li>
       <ul>
        <li><a href="#_103" rel="nofollow">保存更改到可执行文件</a></li>
       </ul>
       <li><a href="#2_111" rel="nofollow">2.在其他内存区域新建字符串并传递给消息函数</a></li>
      </ul>
     </ul>
    </ul>
    <li><a href="#_117" rel="nofollow">更新中。。。。</a></li>
   </ul>
  </div>
  <p></p> 
  <h1><a id="_2"></a>逆向分析法</h1> 
  <h2><a id="_3"></a>静态分析法</h2> 
  <p>是在<strong>不执行代码文件</strong>的情形下，对代码进行静态分析的一种方法。并不执行代码，而是观察代码文件的外部特征，获取文件的类型，大小，PE头信息，内部字符串，是否运行时解压缩等。</p> 
  <h2><a id="_5"></a>动态分析法</h2> 
  <p>是在程序文件的执行过程中对代码进行动态分析的一种方法，它通过调试来分析代码流，获得内存的状态等。<br> <mark>虽然代码调试过程在代码逆向分析过程中占据很大比重，但它只是代码逆向分析的一个从属概念</mark></p> 
  <h1><a id="hello_world__8"></a>调试hello world 程序</h1> 
  <h2><a id="_9"></a>代码</h2> 
  <pre><code class="prism language-javascript">#include <span class="token string">"windows.h"</span>
#include <span class="token string">"tchar.h"</span>

int <span class="token function">_tmain</span><span class="token punctuation">(</span>int argc<span class="token punctuation">,</span> <span class="token constant">TCHAR</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">MessageBox</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token string">"Hello World!"</span><span class="token punctuation">,</span><span class="token string">"张轩瑞"</span><span class="token punctuation">,</span><span class="token constant">MB_OK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre> 
  <h1><a id="_21"></a>开始调试</h1> 
  <p>用OllyDbg调试工具打开程序<br> 左上 代码窗口</p> 
  <ul> 
   <li>默认用于显示反汇编代码，还用于显示各种注释、标签，分析代码时显示循环、跳转位置等信息。</li> 
  </ul> 
  <p>右上 寄存器窗口</p> 
  <ul> 
   <li>实时显示CPU寄存器的值，可用于修改特定的寄存器。</li> 
  </ul> 
  <p>左下 数据窗口</p> 
  <ul> 
   <li>以Hex/ASCII/Unicode值的形式显示进程的内存地址，也可在修改内存地址。</li> 
  </ul> 
  <p>右下 栈窗口</p> 
  <ul> 
   <li>实时显示ESP寄存器指向的进程栈内存，并修改。<br> <img src="https://img-blog.csdnimg.cn/20200507185143941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JpdHNfc3RkYw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li> 
  </ul> 
  <h2><a id="OllyDbg___35"></a>OllyDbg 基本指令 （适用于代码窗口）</h2> 
  <table> 
   <thead> 
    <tr> 
     <th>项目</th> 
     <th>Value</th> 
     <th>含义</th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <td>Restart</td> 
     <td>Ctrl+F2</td> 
     <td>重新开始调试</td> 
    </tr> 
    <tr> 
     <td>Step Into</td> 
     <td>F7</td> 
     <td>执行一句OP code (操作码)，若遇到调用命令（CALL），将进入函数代码内部</td> 
    </tr> 
    <tr> 
     <td>Step Over</td> 
     <td>F8</td> 
     <td>执行一句OP code (操作码)，若遇到调用命令（CALL），仅执行函数自身，不跟随进入</td> 
    </tr> 
    <tr> 
     <td>Execute till Return</td> 
     <td>Ctrl+F9</td> 
     <td>一直在函数代码内部运行，直到遇到RETN命令，跳出函数</td> 
    </tr> 
   </tbody> 
  </table>
  <h2><a id="_45"></a>设置断点的四种方法</h2> 
  <h3><a id="1goto__46"></a>1.goto 命令</h3> 
  <p>执行Go to(Ctrl + G) 命令，打开一个“输入跟踪表达式”的对话框。<br> 在文本框中输入“地址”。<br> <img src="https://img-blog.csdnimg.cn/20200518190038195.png" alt="在这里插入图片描述"><br> 光标自动定位到该地址处，执行F4命令，让调试流运到此处，然后从该处调试。</p> 
  <h3><a id="2_51"></a>2.设置断点</h3> 
  <p>可以设置BP(Break Point,断点) （快捷键F2）</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200518190558243.png" alt="在这里插入图片描述"><br> 设置断点后，运行到断点处就会暂停。<br> 可以打开Breakpoints框（ATL+B)查看设置的断点。<br> <img src="https://img-blog.csdnimg.cn/20200518190741546.png" alt="在这里插入图片描述"><br> 双击某个断点会直接跳转到相应位置。</p> 
  <h3><a id="3_59"></a>3.注释</h3> 
  <p>按键盘上的“；”可以添加注释<br> <img src="https://img-blog.csdnimg.cn/20200518191827314.png" alt="在这里插入图片描述"><br> 同时也可以查找到他。<br> <img src="https://img-blog.csdnimg.cn/20200518191807915.png" alt="在这里插入图片描述"></p> 
  <h3><a id="4_64"></a>4.标签</h3> 
  <p>我们也可以通过标签提供的功能在指定地址<br> <img src="https://img-blog.csdnimg.cn/2020051819265876.png" alt="在这里插入图片描述"><br> 比如在00401BF0中设置标签，main func<br> 因为00401385处调用00401BF0的函数，所以就会显示，main func</p> 
  <p><img src="https://img-blog.csdnimg.cn/2020051819262069.png" alt="在这里插入图片描述"><br> 标签和注释一样也可以检索</p> 
  <h2><a id="_73"></a>快速查找指定代码的四种方法</h2> 
  <p>调试代码时，main（）函数并不直接位于可执行文件的EP位置上，出现在此的是开发工具生成的启动函数。<br> （EP是windows可执行文件（EXE,DLL,SYS等）的代码入口点，是执行应用程序时最先执行的代码的起始位置，它依赖于CPU。）</p> 
  <h3><a id="1__76"></a>1. 代码执行法</h3> 
  <p><strong>逐条执行</strong>指令来查找需要查找的位置。代码执行法仅使用于被调试的代码量不大、且程序功能明确的情况。</p> 
  <h3><a id="2_79"></a>2.字符串检索法</h3> 
  <p>直接查找字符串。<br> 寻找所需要的字符串，然后双击。</p> 
  <h3><a id="3_82"></a>3.在调试代码中设置断点</h3> 
  <p>查找-&gt;所有模块间的调用<br> 查看调用了那些函数</p> 
  <h3><a id="4API_85"></a>4.在API代码中设置断点</h3> 
  <p>打开“所有模块中的名称”并敲下MessageBox,光标会直接定位。<br> <img src="https://img-blog.csdnimg.cn/20200519193843770.png" alt="在这里插入图片描述"></p> 
  <h2><a id="hello_world_88"></a>使用“打补丁”方式修改“hello world！”字符串</h2> 
  <h3><a id="_89"></a>修改字符的两种方法</h3> 
  <h4><a id="1_90"></a>1.直接修改缓冲区</h4> 
  <p>我在搜索的时候，发现注释hello world的地方更改没有用。<br> 找到主函数后，设置断点。<br> 然后按F4，进行调试。<br> 在右下方站窗口找到ASCII码“hello world”。<br> <img src="https://img-blog.csdnimg.cn/20200601215426323.png" alt="在这里插入图片描述"><br> 然后双击查看，进入数据窗口，去更改缓存区。<br> <img src="https://img-blog.csdnimg.cn/20200601215621469.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JpdHNfc3RkYw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 去更改，hello world 改成 hello rever<br> 尽量不要用更长的字符串，覆盖原字符串，这样会使数据遭到破坏。<br> 改完之后，去运行程序，之后就会弹出窗口。<br> <img src="https://img-blog.csdnimg.cn/20200601215857170.png" alt="在这里插入图片描述"><br> 我们发现以前的hello world 变成了 hello rever。</p> 
  <h5><a id="_103"></a>保存更改到可执行文件</h5> 
  <p>上面的调试中，我们通过修改字符串缓冲区更改了程序显示的消息内容，但是这种更改只是暂时的，我们终止调试的时候。程序中的原字符串没有改变。如果想保存下来，就要把更改后的程序保存一个可执行文件。</p> 
  <ul> 
   <li>在左下数据窗口中，选中更改后的字符串，点击鼠标右键，在弹出的菜单中选择“复制到可执行文件”，然后点击“备份”——&gt;“保存到数据文件”然后输入文件名保存为exe文件。</li> 
  </ul> 
  <p>当我们打开这个已经保存好的文件的时候，弹出的字符串变成了“hello rever”。<br> <img src="https://img-blog.csdnimg.cn/20200603153715826.png" alt="在这里插入图片描述"></p> 
  <h4><a id="2_111"></a>2.在其他内存区域新建字符串并传递给消息函数</h4> 
  <h1><a id="_117"></a>更新中。。。。</h1> 
 </div> 
 <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e0530931f4.css" rel="stylesheet"> 
</div>, newsAttr=2, newsImage=https://profile.csdnimg.cn/5/3/8/3_bits_stdc, orderNum=null, isPublic=null, thumbs=0, visits=0, comments=null, collects=0, newsSource=https://blog.csdn.net/bits_stdc, newsSourceAuthor=_ZXR_, newsSourceTags=安全,笔记, status=null, delFlag=null, createBy=null, createTime=null, updateBy=null, updateTime=null, remark=null, beginTime=null, endTime=null, params={}, newsType=null)}
2020-09-03 15:19:23.602 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:50 -获取peNews--->>>null
2020-09-03 15:19:23.602 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:51 -获取entertainmentNews--->>>null
2020-09-03 15:19:23.602 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:52 -获取csdnNews--->>>LinqNews(newsId=null, userId=1, newsTypeId=18, newsTitle=逆向工程，调试Hello World ！程序（更新中）, newsContent=<div id="article_content" class="article_content clearfix"> 
 <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3d4dc5c1de.css"> 
 <div id="content_views" class="markdown_views prism-atom-one-dark"> 
  <!-- flowchart 箭头图标 勿删 --> 
  <svg xmlns="http://www.w3.org/2000/svg" style="display: none;"> 
   <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path> 
  </svg> 
  <p></p>
  <div class="toc">
   <h3>逆向工程，调试Hello,World ！ 程序（更新中）</h3>
   <ul>
    <li><a href="#_2" rel="nofollow">逆向分析法</a></li>
    <ul>
     <li><a href="#_3" rel="nofollow">静态分析法</a></li>
     <li><a href="#_5" rel="nofollow">动态分析法</a></li>
    </ul>
    <li><a href="#hello_world__8" rel="nofollow">调试hello world 程序</a></li>
    <ul>
     <li><a href="#_9" rel="nofollow">代码</a></li>
    </ul>
    <li><a href="#_21" rel="nofollow">开始调试</a></li>
    <ul>
     <li><a href="#OllyDbg___35" rel="nofollow">OllyDbg 基本指令 （适用于代码窗口）</a></li>
     <li><a href="#_45" rel="nofollow">设置断点的四种方法</a></li>
     <ul>
      <li><a href="#1goto__46" rel="nofollow">1.goto 命令</a></li>
      <li><a href="#2_51" rel="nofollow">2.设置断点</a></li>
      <li><a href="#3_59" rel="nofollow">3.注释</a></li>
      <li><a href="#4_64" rel="nofollow">4.标签</a></li>
     </ul>
     <li><a href="#_73" rel="nofollow">快速查找指定代码的四种方法</a></li>
     <ul>
      <li><a href="#1__76" rel="nofollow">1. 代码执行法</a></li>
      <li><a href="#2_79" rel="nofollow">2.字符串检索法</a></li>
      <li><a href="#3_82" rel="nofollow">3.在调试代码中设置断点</a></li>
      <li><a href="#4API_85" rel="nofollow">4.在API代码中设置断点</a></li>
     </ul>
     <li><a href="#hello_world_88" rel="nofollow">使用“打补丁”方式修改“hello world！”字符串</a></li>
     <ul>
      <li><a href="#_89" rel="nofollow">修改字符的两种方法</a></li>
      <ul>
       <li><a href="#1_90" rel="nofollow">1.直接修改缓冲区</a></li>
       <ul>
        <li><a href="#_103" rel="nofollow">保存更改到可执行文件</a></li>
       </ul>
       <li><a href="#2_111" rel="nofollow">2.在其他内存区域新建字符串并传递给消息函数</a></li>
      </ul>
     </ul>
    </ul>
    <li><a href="#_117" rel="nofollow">更新中。。。。</a></li>
   </ul>
  </div>
  <p></p> 
  <h1><a id="_2"></a>逆向分析法</h1> 
  <h2><a id="_3"></a>静态分析法</h2> 
  <p>是在<strong>不执行代码文件</strong>的情形下，对代码进行静态分析的一种方法。并不执行代码，而是观察代码文件的外部特征，获取文件的类型，大小，PE头信息，内部字符串，是否运行时解压缩等。</p> 
  <h2><a id="_5"></a>动态分析法</h2> 
  <p>是在程序文件的执行过程中对代码进行动态分析的一种方法，它通过调试来分析代码流，获得内存的状态等。<br> <mark>虽然代码调试过程在代码逆向分析过程中占据很大比重，但它只是代码逆向分析的一个从属概念</mark></p> 
  <h1><a id="hello_world__8"></a>调试hello world 程序</h1> 
  <h2><a id="_9"></a>代码</h2> 
  <pre><code class="prism language-javascript">#include <span class="token string">"windows.h"</span>
#include <span class="token string">"tchar.h"</span>

int <span class="token function">_tmain</span><span class="token punctuation">(</span>int argc<span class="token punctuation">,</span> <span class="token constant">TCHAR</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">MessageBox</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token string">"Hello World!"</span><span class="token punctuation">,</span><span class="token string">"张轩瑞"</span><span class="token punctuation">,</span><span class="token constant">MB_OK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre> 
  <h1><a id="_21"></a>开始调试</h1> 
  <p>用OllyDbg调试工具打开程序<br> 左上 代码窗口</p> 
  <ul> 
   <li>默认用于显示反汇编代码，还用于显示各种注释、标签，分析代码时显示循环、跳转位置等信息。</li> 
  </ul> 
  <p>右上 寄存器窗口</p> 
  <ul> 
   <li>实时显示CPU寄存器的值，可用于修改特定的寄存器。</li> 
  </ul> 
  <p>左下 数据窗口</p> 
  <ul> 
   <li>以Hex/ASCII/Unicode值的形式显示进程的内存地址，也可在修改内存地址。</li> 
  </ul> 
  <p>右下 栈窗口</p> 
  <ul> 
   <li>实时显示ESP寄存器指向的进程栈内存，并修改。<br> <img src="https://img-blog.csdnimg.cn/20200507185143941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JpdHNfc3RkYw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li> 
  </ul> 
  <h2><a id="OllyDbg___35"></a>OllyDbg 基本指令 （适用于代码窗口）</h2> 
  <table> 
   <thead> 
    <tr> 
     <th>项目</th> 
     <th>Value</th> 
     <th>含义</th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <td>Restart</td> 
     <td>Ctrl+F2</td> 
     <td>重新开始调试</td> 
    </tr> 
    <tr> 
     <td>Step Into</td> 
     <td>F7</td> 
     <td>执行一句OP code (操作码)，若遇到调用命令（CALL），将进入函数代码内部</td> 
    </tr> 
    <tr> 
     <td>Step Over</td> 
     <td>F8</td> 
     <td>执行一句OP code (操作码)，若遇到调用命令（CALL），仅执行函数自身，不跟随进入</td> 
    </tr> 
    <tr> 
     <td>Execute till Return</td> 
     <td>Ctrl+F9</td> 
     <td>一直在函数代码内部运行，直到遇到RETN命令，跳出函数</td> 
    </tr> 
   </tbody> 
  </table>
  <h2><a id="_45"></a>设置断点的四种方法</h2> 
  <h3><a id="1goto__46"></a>1.goto 命令</h3> 
  <p>执行Go to(Ctrl + G) 命令，打开一个“输入跟踪表达式”的对话框。<br> 在文本框中输入“地址”。<br> <img src="https://img-blog.csdnimg.cn/20200518190038195.png" alt="在这里插入图片描述"><br> 光标自动定位到该地址处，执行F4命令，让调试流运到此处，然后从该处调试。</p> 
  <h3><a id="2_51"></a>2.设置断点</h3> 
  <p>可以设置BP(Break Point,断点) （快捷键F2）</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200518190558243.png" alt="在这里插入图片描述"><br> 设置断点后，运行到断点处就会暂停。<br> 可以打开Breakpoints框（ATL+B)查看设置的断点。<br> <img src="https://img-blog.csdnimg.cn/20200518190741546.png" alt="在这里插入图片描述"><br> 双击某个断点会直接跳转到相应位置。</p> 
  <h3><a id="3_59"></a>3.注释</h3> 
  <p>按键盘上的“；”可以添加注释<br> <img src="https://img-blog.csdnimg.cn/20200518191827314.png" alt="在这里插入图片描述"><br> 同时也可以查找到他。<br> <img src="https://img-blog.csdnimg.cn/20200518191807915.png" alt="在这里插入图片描述"></p> 
  <h3><a id="4_64"></a>4.标签</h3> 
  <p>我们也可以通过标签提供的功能在指定地址<br> <img src="https://img-blog.csdnimg.cn/2020051819265876.png" alt="在这里插入图片描述"><br> 比如在00401BF0中设置标签，main func<br> 因为00401385处调用00401BF0的函数，所以就会显示，main func</p> 
  <p><img src="https://img-blog.csdnimg.cn/2020051819262069.png" alt="在这里插入图片描述"><br> 标签和注释一样也可以检索</p> 
  <h2><a id="_73"></a>快速查找指定代码的四种方法</h2> 
  <p>调试代码时，main（）函数并不直接位于可执行文件的EP位置上，出现在此的是开发工具生成的启动函数。<br> （EP是windows可执行文件（EXE,DLL,SYS等）的代码入口点，是执行应用程序时最先执行的代码的起始位置，它依赖于CPU。）</p> 
  <h3><a id="1__76"></a>1. 代码执行法</h3> 
  <p><strong>逐条执行</strong>指令来查找需要查找的位置。代码执行法仅使用于被调试的代码量不大、且程序功能明确的情况。</p> 
  <h3><a id="2_79"></a>2.字符串检索法</h3> 
  <p>直接查找字符串。<br> 寻找所需要的字符串，然后双击。</p> 
  <h3><a id="3_82"></a>3.在调试代码中设置断点</h3> 
  <p>查找-&gt;所有模块间的调用<br> 查看调用了那些函数</p> 
  <h3><a id="4API_85"></a>4.在API代码中设置断点</h3> 
  <p>打开“所有模块中的名称”并敲下MessageBox,光标会直接定位。<br> <img src="https://img-blog.csdnimg.cn/20200519193843770.png" alt="在这里插入图片描述"></p> 
  <h2><a id="hello_world_88"></a>使用“打补丁”方式修改“hello world！”字符串</h2> 
  <h3><a id="_89"></a>修改字符的两种方法</h3> 
  <h4><a id="1_90"></a>1.直接修改缓冲区</h4> 
  <p>我在搜索的时候，发现注释hello world的地方更改没有用。<br> 找到主函数后，设置断点。<br> 然后按F4，进行调试。<br> 在右下方站窗口找到ASCII码“hello world”。<br> <img src="https://img-blog.csdnimg.cn/20200601215426323.png" alt="在这里插入图片描述"><br> 然后双击查看，进入数据窗口，去更改缓存区。<br> <img src="https://img-blog.csdnimg.cn/20200601215621469.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JpdHNfc3RkYw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 去更改，hello world 改成 hello rever<br> 尽量不要用更长的字符串，覆盖原字符串，这样会使数据遭到破坏。<br> 改完之后，去运行程序，之后就会弹出窗口。<br> <img src="https://img-blog.csdnimg.cn/20200601215857170.png" alt="在这里插入图片描述"><br> 我们发现以前的hello world 变成了 hello rever。</p> 
  <h5><a id="_103"></a>保存更改到可执行文件</h5> 
  <p>上面的调试中，我们通过修改字符串缓冲区更改了程序显示的消息内容，但是这种更改只是暂时的，我们终止调试的时候。程序中的原字符串没有改变。如果想保存下来，就要把更改后的程序保存一个可执行文件。</p> 
  <ul> 
   <li>在左下数据窗口中，选中更改后的字符串，点击鼠标右键，在弹出的菜单中选择“复制到可执行文件”，然后点击“备份”——&gt;“保存到数据文件”然后输入文件名保存为exe文件。</li> 
  </ul> 
  <p>当我们打开这个已经保存好的文件的时候，弹出的字符串变成了“hello rever”。<br> <img src="https://img-blog.csdnimg.cn/20200603153715826.png" alt="在这里插入图片描述"></p> 
  <h4><a id="2_111"></a>2.在其他内存区域新建字符串并传递给消息函数</h4> 
  <h1><a id="_117"></a>更新中。。。。</h1> 
 </div> 
 <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e0530931f4.css" rel="stylesheet"> 
</div>, newsAttr=2, newsImage=https://profile.csdnimg.cn/5/3/8/3_bits_stdc, orderNum=null, isPublic=null, thumbs=0, visits=0, comments=null, collects=0, newsSource=https://blog.csdn.net/bits_stdc, newsSourceAuthor=_ZXR_, newsSourceTags=安全,笔记, status=null, delFlag=null, createBy=null, createTime=null, updateBy=null, updateTime=null, remark=null, beginTime=null, endTime=null, params={}, newsType=null)
2020-09-03 15:19:23.613 WARN  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]o.s.a.rabbit.listener.ConditionalRejectingErrorHandler.log:129 -Execution of Rabbit message listener failed.
org.springframework.amqp.rabbit.support.ListenerExecutionFailedException: Listener method 'public void com.linq.news.task.listener.NewsConsumer.receiveNews(org.springframework.messaging.Message<java.util.HashMap<java.lang.String, java.lang.Object>>,com.rabbitmq.client.Channel) throws java.io.IOException' threw exception
	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:228)
	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandlerAndProcessResult(MessagingMessageListenerAdapter.java:148)
	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.onMessage(MessagingMessageListenerAdapter.java:133)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:1591)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.actualInvokeListener(AbstractMessageListenerContainer.java:1510)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:1498)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:1489)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.executeListener(AbstractMessageListenerContainer.java:1433)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.doReceiveAndExecute(SimpleMessageListenerContainer.java:970)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.receiveAndExecute(SimpleMessageListenerContainer.java:916)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.access$1600(SimpleMessageListenerContainer.java:83)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer$AsyncMessageProcessingConsumer.mainLoop(SimpleMessageListenerContainer.java:1291)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer$AsyncMessageProcessingConsumer.run(SimpleMessageListenerContainer.java:1197)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.linq.common.exception.CustomException: 消息队列消费异常新增新闻'逆向工程，调试Hello World ！程序（更新中）'失败，新闻标题已存在
	at com.linq.news.task.listener.NewsConsumer.receiveNews(NewsConsumer.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:171)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:120)
	at org.springframework.amqp.rabbit.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:53)
	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:220)
	... 13 common frames omitted
2020-09-03 15:19:23.636 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:45 -接收到消息的时间----->>> 1599117563636
消费tag->>> 4
从消息队列中拿到数据----------->>>> {csdnNews=LinqNews(newsId=null, userId=1, newsTypeId=18, newsTitle=人工智能能力提升指导总结, newsContent=<div id="article_content" class="article_content clearfix"> 
 <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3d4dc5c1de.css"> 
 <div id="content_views" class="markdown_views prism-atom-one-light"> 
  <!-- flowchart 箭头图标 勿删 --> 
  <svg xmlns="http://www.w3.org/2000/svg" style="display: none;"> 
   <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path> 
  </svg> 
  <p></p>
  <div class="toc">
   <h3>文章目录</h3>
   <ul>
    <li><a href="#_3" rel="nofollow">基础知识</a></li>
    <li><a href="#_8" rel="nofollow">人工智能自学之路</a></li>
    <li><a href="#1__10" rel="nofollow">1. 人工智能、机器学习、深度学习的关系</a></li>
    <li><a href="#2__13" rel="nofollow">2. 数据集---需求</a></li>
    <li><a href="#3__35" rel="nofollow">3. 深度学习平台比较</a></li>
    <li><a href="#4__38" rel="nofollow">4. 训练过程可视化</a></li>
    <li><a href="#5__45" rel="nofollow">5. 经典训练案例</a></li>
    <ul>
     <li><a href="#_51" rel="nofollow">训练通用规则</a></li>
     <ul>
      <li><a href="#1__52" rel="nofollow">1. 设置目标</a></li>
      <li><a href="#2__55" rel="nofollow">2. 准备数据集</a></li>
      <li><a href="#3__61" rel="nofollow">3. 模型搭建</a></li>
      <li><a href="#4__67" rel="nofollow">4. 训练网络与测试</a></li>
      <li><a href="#5__72" rel="nofollow">5. 保存模型</a></li>
      <li><a href="#6__84" rel="nofollow">6. 验证模型</a></li>
      <li><a href="#7__87" rel="nofollow">7. 评价模型的方法</a></li>
     </ul>
    </ul>
    <li><a href="#_93" rel="nofollow">参考链接</a></li>
   </ul>
  </div>
  <p></p> 
  <h1><a id="_3"></a>基础知识</h1> 
  <ol> 
   <li><a href="https://www.cis.rit.edu/class/simg782/lectures/" rel="nofollow">传统图像处理基本知识</a><br> 从<a href="https://www.cis.rit.edu/class/simg782/lectures/" rel="nofollow">传统图像处理基本知识</a>可以明白为什么卷积神经网络是有效的。</li> 
   <li><a href="https://seeing-theory.brown.edu/basic-probability/cn.html" rel="nofollow">数学统计基础可视化学习</a></li> 
  </ol> 
  <h1><a id="_8"></a>人工智能自学之路</h1> 
  <p>直接参考这个路线： <a href="https://blog.csdn.net/sinat_36458870/article/details/104829909">人工智能能力构建和模型调参经验分享</a></p> 
  <h1><a id="1__10"></a>1. 人工智能、机器学习、深度学习的关系</h1> 
  <p><a href="https://blog.csdn.net/sinat_36458870/article/details/104793158">博文链接</a></p> 
  <h1><a id="2__13"></a>2. 数据集—需求</h1> 
  <p><a href="https://en.wikipedia.org/wiki/List_of_datasets_for_machine-learning_research" rel="nofollow">所有人工智能数据集总结</a></p> 
  <p><a href="https://www.cs.toronto.edu/~kriz/cifar.html" rel="nofollow">加拿大高级研究所CIFAR-X 系列数据集解析</a></p> 
  <ol> 
   <li> <p><strong>CIFAR-10</strong>：<br> CIFAR-10数据集包含10个不同类，的60,000张32x32彩色图像，有50000个训练图和10000个测试图。</p> </li> 
   <li> <p><strong>CIFAR-100</strong>：<br> Cifar-100数据集包含有100个类，的60000张32X32彩色图片，每个分类包含500-1000，600张图片500-100。</p> </li> 
   <li> <p><strong>Tiny Images</strong>： 该数据集由79,302,017个图像组成，每个图像为32x32彩色图像（500G）；</p> </li> 
   <li> <p><strong>ImageNet-ILSVRC</strong>（Large Scale Visual Recognition Challenge）<br> AI研究员Fei-Fei Li，手工注释了超过1400万个图像，并且在至少100万个图像中，还提供了边界框。<br> ImageNet包含超过20,000个具有典型类别的类别，8<em>8、32</em>32和64*64。</p> </li> 
   <li> <p><strong>COCO</strong> 数据集<br> COCO数据集是微软团队获取的一个可以用来图像识别、分割、标注，数据集.<br> 330K图像、80个对象类别、每幅图像有5个标签、25万个关键点</p> </li> 
  </ol> 
  <h1><a id="3__35"></a>3. 深度学习平台比较</h1> 
  <p><a href="https://en.wikipedia.org/wiki/Comparison_of_deep-learning_software" rel="nofollow">https://en.wikipedia.org/wiki/Comparison_of_deep-learning_software</a></p> 
  <h1><a id="4__38"></a>4. 训练过程可视化</h1> 
  <p><a href="https://playground.tensorflow.org/" rel="nofollow">https://playground.tensorflow.org/</a><br> 很好用：<a href="https://cs.stanford.edu/people/karpathy/convnetjs/" rel="nofollow">https://cs.stanford.edu/people/karpathy/convnetjs/</a><br> <a href="http://vision.stanford.edu/teaching/cs231n/index.html" rel="nofollow">http://vision.stanford.edu/teaching/cs231n/index.html</a><br> <a href="http://neuralnetworksanddeeplearning.com/chap4.html" rel="nofollow">http://neuralnetworksanddeeplearning.com/chap4.html</a><br> <a href="http://colah.github.io/posts/2014-03-NN-Manifolds-Topology/" rel="nofollow">http://colah.github.io/posts/2014-03-NN-Manifolds-Topology/</a></p> 
  <h1><a id="5__45"></a>5. 经典训练案例</h1> 
  <p><a href="https://www.python-course.eu/neural_network_mnist.php" rel="nofollow">通过python 训练 mnist：</a><br> <a href="https://katacoda.com/basiafusinska/courses/tensorflow-getting-started/tensorflow-mnist-beginner" rel="nofollow">TensorFlow: MNIST for beginners step by step：</a><br> <a href="https://machinelearningmastery.com/handwritten-digit-recognition-using-convolutional-neural-networks-python-keras/" rel="nofollow">Handwritten Digit Recognition using Convolutional Neural Networks in Python with Keras</a></p> 
  <hr> 
  <h2><a id="_51"></a>训练通用规则</h2> 
  <h3><a id="1__52"></a>1. 设置目标</h3> 
  <p>基于CIFAR-10数据集，训练一个简单CNN网络；保存训练好的模型，测试；使用GPU训练；</p> 
  <h3><a id="2__55"></a>2. 准备数据集</h3> 
  <p><a href="https://en.wikipedia.org/wiki/List_of_datasets_for_machine-learning_research" rel="nofollow">所有人工智能数据集总结</a><br> <a href="https://www.cs.toronto.edu/~kriz/cifar.html" rel="nofollow">加拿大高级研究所CIFAR-X 系列数据集解析</a></p> 
  <p>找数据，打标签，数据增强，预处理，现在一般都直接用现有的数据；例如：CIFAR-10</p> 
  <h3><a id="3__61"></a>3. 模型搭建</h3> 
  <p><strong>定义网络</strong>—设置<strong>损失函数</strong>，优化<strong>迭代方法</strong></p> 
  <p><a href="https://blog.csdn.net/qq_35082030/article/details/73368962">常见模型</a><br> <a href="https://zhuanlan.zhihu.com/p/35709485" rel="nofollow">常见损失函数</a><br> <a href="https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/3-4-A-speed-up-learning/" rel="nofollow">常见优化方法</a></p> 
  <h3><a id="4__67"></a>4. 训练网络与测试</h3> 
  <p>实际的和标签的差就是loss</p> 
  <p>这里看PPT：<a href="https://github.com/yuneming/DeepLearningTutorial">李宏毅一天搞懂深度学习</a></p> 
  <h3><a id="5__72"></a>5. 保存模型</h3> 
  <ul> 
   <li> <p><code>cfair10.pth（pytorch）</code>：<br> 多 GPU 训练的方法是使用 torch.nn.DataParallel</p> </li> 
   <li> <p><code>model.ckpt</code>：—&gt;&gt;&gt;<code>checkpoint</code><br> <code>xxx.ckpt.data-0000-of-00001</code> 权重;<br> <code>xxx.ckpt.meta</code> 图结构;<br> <code>xxx.ckpt.index</code> 权重节点索引）</p> </li> 
   <li> <p><code>model_deploy.prototxt</code> (描述了网络结构和数据集信息);</p> </li> 
   <li> <p><code>train_iter_100.caffemodel</code>（权重）</p> </li> 
  </ul> 
  <h3><a id="6__84"></a>6. 验证模型</h3> 
  <p>拿些没有用过的图，去用训练好的模型。</p> 
  <h3><a id="7__87"></a>7. 评价模型的方法</h3> 
  <p>待上传</p> 
  <p>例如输出一个模糊矩阵</p> 
  <h1><a id="_93"></a>参考链接</h1> 
  <p><a href="https://www.jianshu.com/p/e704a6f6e8d3" rel="nofollow">https://www.jianshu.com/p/e704a6f6e8d3</a></p> 
 </div> 
 <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e0530931f4.css" rel="stylesheet"> 
</div>, newsAttr=2, newsImage=https://profile.csdnimg.cn/3/8/C/3_sinat_36458870, orderNum=null, isPublic=null, thumbs=536, visits=164, comments=null, collects=536, newsSource=https://blog.csdn.net/sinat_36458870, newsSourceAuthor=BRUCE_WUANG, newsSourceTags=人工智能,深度学习, status=null, delFlag=null, createBy=null, createTime=null, updateBy=null, updateTime=null, remark=null, beginTime=null, endTime=null, params={}, newsType=null)}
2020-09-03 15:19:23.637 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:50 -获取peNews--->>>null
2020-09-03 15:19:23.637 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:51 -获取entertainmentNews--->>>null
2020-09-03 15:19:23.637 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:52 -获取csdnNews--->>>LinqNews(newsId=null, userId=1, newsTypeId=18, newsTitle=人工智能能力提升指导总结, newsContent=<div id="article_content" class="article_content clearfix"> 
 <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3d4dc5c1de.css"> 
 <div id="content_views" class="markdown_views prism-atom-one-light"> 
  <!-- flowchart 箭头图标 勿删 --> 
  <svg xmlns="http://www.w3.org/2000/svg" style="display: none;"> 
   <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path> 
  </svg> 
  <p></p>
  <div class="toc">
   <h3>文章目录</h3>
   <ul>
    <li><a href="#_3" rel="nofollow">基础知识</a></li>
    <li><a href="#_8" rel="nofollow">人工智能自学之路</a></li>
    <li><a href="#1__10" rel="nofollow">1. 人工智能、机器学习、深度学习的关系</a></li>
    <li><a href="#2__13" rel="nofollow">2. 数据集---需求</a></li>
    <li><a href="#3__35" rel="nofollow">3. 深度学习平台比较</a></li>
    <li><a href="#4__38" rel="nofollow">4. 训练过程可视化</a></li>
    <li><a href="#5__45" rel="nofollow">5. 经典训练案例</a></li>
    <ul>
     <li><a href="#_51" rel="nofollow">训练通用规则</a></li>
     <ul>
      <li><a href="#1__52" rel="nofollow">1. 设置目标</a></li>
      <li><a href="#2__55" rel="nofollow">2. 准备数据集</a></li>
      <li><a href="#3__61" rel="nofollow">3. 模型搭建</a></li>
      <li><a href="#4__67" rel="nofollow">4. 训练网络与测试</a></li>
      <li><a href="#5__72" rel="nofollow">5. 保存模型</a></li>
      <li><a href="#6__84" rel="nofollow">6. 验证模型</a></li>
      <li><a href="#7__87" rel="nofollow">7. 评价模型的方法</a></li>
     </ul>
    </ul>
    <li><a href="#_93" rel="nofollow">参考链接</a></li>
   </ul>
  </div>
  <p></p> 
  <h1><a id="_3"></a>基础知识</h1> 
  <ol> 
   <li><a href="https://www.cis.rit.edu/class/simg782/lectures/" rel="nofollow">传统图像处理基本知识</a><br> 从<a href="https://www.cis.rit.edu/class/simg782/lectures/" rel="nofollow">传统图像处理基本知识</a>可以明白为什么卷积神经网络是有效的。</li> 
   <li><a href="https://seeing-theory.brown.edu/basic-probability/cn.html" rel="nofollow">数学统计基础可视化学习</a></li> 
  </ol> 
  <h1><a id="_8"></a>人工智能自学之路</h1> 
  <p>直接参考这个路线： <a href="https://blog.csdn.net/sinat_36458870/article/details/104829909">人工智能能力构建和模型调参经验分享</a></p> 
  <h1><a id="1__10"></a>1. 人工智能、机器学习、深度学习的关系</h1> 
  <p><a href="https://blog.csdn.net/sinat_36458870/article/details/104793158">博文链接</a></p> 
  <h1><a id="2__13"></a>2. 数据集—需求</h1> 
  <p><a href="https://en.wikipedia.org/wiki/List_of_datasets_for_machine-learning_research" rel="nofollow">所有人工智能数据集总结</a></p> 
  <p><a href="https://www.cs.toronto.edu/~kriz/cifar.html" rel="nofollow">加拿大高级研究所CIFAR-X 系列数据集解析</a></p> 
  <ol> 
   <li> <p><strong>CIFAR-10</strong>：<br> CIFAR-10数据集包含10个不同类，的60,000张32x32彩色图像，有50000个训练图和10000个测试图。</p> </li> 
   <li> <p><strong>CIFAR-100</strong>：<br> Cifar-100数据集包含有100个类，的60000张32X32彩色图片，每个分类包含500-1000，600张图片500-100。</p> </li> 
   <li> <p><strong>Tiny Images</strong>： 该数据集由79,302,017个图像组成，每个图像为32x32彩色图像（500G）；</p> </li> 
   <li> <p><strong>ImageNet-ILSVRC</strong>（Large Scale Visual Recognition Challenge）<br> AI研究员Fei-Fei Li，手工注释了超过1400万个图像，并且在至少100万个图像中，还提供了边界框。<br> ImageNet包含超过20,000个具有典型类别的类别，8<em>8、32</em>32和64*64。</p> </li> 
   <li> <p><strong>COCO</strong> 数据集<br> COCO数据集是微软团队获取的一个可以用来图像识别、分割、标注，数据集.<br> 330K图像、80个对象类别、每幅图像有5个标签、25万个关键点</p> </li> 
  </ol> 
  <h1><a id="3__35"></a>3. 深度学习平台比较</h1> 
  <p><a href="https://en.wikipedia.org/wiki/Comparison_of_deep-learning_software" rel="nofollow">https://en.wikipedia.org/wiki/Comparison_of_deep-learning_software</a></p> 
  <h1><a id="4__38"></a>4. 训练过程可视化</h1> 
  <p><a href="https://playground.tensorflow.org/" rel="nofollow">https://playground.tensorflow.org/</a><br> 很好用：<a href="https://cs.stanford.edu/people/karpathy/convnetjs/" rel="nofollow">https://cs.stanford.edu/people/karpathy/convnetjs/</a><br> <a href="http://vision.stanford.edu/teaching/cs231n/index.html" rel="nofollow">http://vision.stanford.edu/teaching/cs231n/index.html</a><br> <a href="http://neuralnetworksanddeeplearning.com/chap4.html" rel="nofollow">http://neuralnetworksanddeeplearning.com/chap4.html</a><br> <a href="http://colah.github.io/posts/2014-03-NN-Manifolds-Topology/" rel="nofollow">http://colah.github.io/posts/2014-03-NN-Manifolds-Topology/</a></p> 
  <h1><a id="5__45"></a>5. 经典训练案例</h1> 
  <p><a href="https://www.python-course.eu/neural_network_mnist.php" rel="nofollow">通过python 训练 mnist：</a><br> <a href="https://katacoda.com/basiafusinska/courses/tensorflow-getting-started/tensorflow-mnist-beginner" rel="nofollow">TensorFlow: MNIST for beginners step by step：</a><br> <a href="https://machinelearningmastery.com/handwritten-digit-recognition-using-convolutional-neural-networks-python-keras/" rel="nofollow">Handwritten Digit Recognition using Convolutional Neural Networks in Python with Keras</a></p> 
  <hr> 
  <h2><a id="_51"></a>训练通用规则</h2> 
  <h3><a id="1__52"></a>1. 设置目标</h3> 
  <p>基于CIFAR-10数据集，训练一个简单CNN网络；保存训练好的模型，测试；使用GPU训练；</p> 
  <h3><a id="2__55"></a>2. 准备数据集</h3> 
  <p><a href="https://en.wikipedia.org/wiki/List_of_datasets_for_machine-learning_research" rel="nofollow">所有人工智能数据集总结</a><br> <a href="https://www.cs.toronto.edu/~kriz/cifar.html" rel="nofollow">加拿大高级研究所CIFAR-X 系列数据集解析</a></p> 
  <p>找数据，打标签，数据增强，预处理，现在一般都直接用现有的数据；例如：CIFAR-10</p> 
  <h3><a id="3__61"></a>3. 模型搭建</h3> 
  <p><strong>定义网络</strong>—设置<strong>损失函数</strong>，优化<strong>迭代方法</strong></p> 
  <p><a href="https://blog.csdn.net/qq_35082030/article/details/73368962">常见模型</a><br> <a href="https://zhuanlan.zhihu.com/p/35709485" rel="nofollow">常见损失函数</a><br> <a href="https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/3-4-A-speed-up-learning/" rel="nofollow">常见优化方法</a></p> 
  <h3><a id="4__67"></a>4. 训练网络与测试</h3> 
  <p>实际的和标签的差就是loss</p> 
  <p>这里看PPT：<a href="https://github.com/yuneming/DeepLearningTutorial">李宏毅一天搞懂深度学习</a></p> 
  <h3><a id="5__72"></a>5. 保存模型</h3> 
  <ul> 
   <li> <p><code>cfair10.pth（pytorch）</code>：<br> 多 GPU 训练的方法是使用 torch.nn.DataParallel</p> </li> 
   <li> <p><code>model.ckpt</code>：—&gt;&gt;&gt;<code>checkpoint</code><br> <code>xxx.ckpt.data-0000-of-00001</code> 权重;<br> <code>xxx.ckpt.meta</code> 图结构;<br> <code>xxx.ckpt.index</code> 权重节点索引）</p> </li> 
   <li> <p><code>model_deploy.prototxt</code> (描述了网络结构和数据集信息);</p> </li> 
   <li> <p><code>train_iter_100.caffemodel</code>（权重）</p> </li> 
  </ul> 
  <h3><a id="6__84"></a>6. 验证模型</h3> 
  <p>拿些没有用过的图，去用训练好的模型。</p> 
  <h3><a id="7__87"></a>7. 评价模型的方法</h3> 
  <p>待上传</p> 
  <p>例如输出一个模糊矩阵</p> 
  <h1><a id="_93"></a>参考链接</h1> 
  <p><a href="https://www.jianshu.com/p/e704a6f6e8d3" rel="nofollow">https://www.jianshu.com/p/e704a6f6e8d3</a></p> 
 </div> 
 <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e0530931f4.css" rel="stylesheet"> 
</div>, newsAttr=2, newsImage=https://profile.csdnimg.cn/3/8/C/3_sinat_36458870, orderNum=null, isPublic=null, thumbs=536, visits=164, comments=null, collects=536, newsSource=https://blog.csdn.net/sinat_36458870, newsSourceAuthor=BRUCE_WUANG, newsSourceTags=人工智能,深度学习, status=null, delFlag=null, createBy=null, createTime=null, updateBy=null, updateTime=null, remark=null, beginTime=null, endTime=null, params={}, newsType=null)
2020-09-03 15:19:23.647 WARN  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]o.s.a.rabbit.listener.ConditionalRejectingErrorHandler.log:129 -Execution of Rabbit message listener failed.
org.springframework.amqp.rabbit.support.ListenerExecutionFailedException: Listener method 'public void com.linq.news.task.listener.NewsConsumer.receiveNews(org.springframework.messaging.Message<java.util.HashMap<java.lang.String, java.lang.Object>>,com.rabbitmq.client.Channel) throws java.io.IOException' threw exception
	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:228)
	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandlerAndProcessResult(MessagingMessageListenerAdapter.java:148)
	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.onMessage(MessagingMessageListenerAdapter.java:133)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:1591)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.actualInvokeListener(AbstractMessageListenerContainer.java:1510)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:1498)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:1489)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.executeListener(AbstractMessageListenerContainer.java:1433)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.doReceiveAndExecute(SimpleMessageListenerContainer.java:970)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.receiveAndExecute(SimpleMessageListenerContainer.java:916)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.access$1600(SimpleMessageListenerContainer.java:83)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer$AsyncMessageProcessingConsumer.mainLoop(SimpleMessageListenerContainer.java:1291)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer$AsyncMessageProcessingConsumer.run(SimpleMessageListenerContainer.java:1197)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.linq.common.exception.CustomException: 消息队列消费异常新增新闻'人工智能能力提升指导总结'失败，新闻标题已存在
	at com.linq.news.task.listener.NewsConsumer.receiveNews(NewsConsumer.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:171)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:120)
	at org.springframework.amqp.rabbit.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:53)
	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:220)
	... 13 common frames omitted
2020-09-03 15:19:23.661 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:45 -接收到消息的时间----->>> 1599117563661
消费tag->>> 5
从消息队列中拿到数据----------->>>> {csdnNews=LinqNews(newsId=null, userId=1, newsTypeId=18, newsTitle=如何根据普通ip地址获取当前地理位置, newsContent=<div id="article_content" class="article_content clearfix"> 
 <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3d4dc5c1de.css"> 
 <div class="htmledit_views" id="content_views"> 
  <h2>前言：</h2> 
  <p>我们现在需要做的功能是根据ip地址获取当前地理位置，是Web 服务API,获取后的位置信息一般是城市级别的，不是很精确的那种获取。</p> 
  <p><span style="color:#3399ea;"><strong>（1）开发者需要做的准备工作：</strong></span></p> 
  <p><img alt="" height="189" src="https://img-blog.csdnimg.cn/20200517164926676.png" width="731"></p> 
  <p>需要登录百度地图的api,点击web 服务API.</p> 
  <p><img alt="" height="783" src="https://img-blog.csdnimg.cn/20200517165445645.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1200"></p> 
  <p>&nbsp;</p> 
  <p>开发文档的地址：<a href="http://lbsyun.baidu.com/index.php?title=webapi/ip-api" rel="nofollow">http://lbsyun.baidu.com/index.php?title=webapi/ip-api</a></p> 
  <p><span style="color:#86ca5e;"><strong>请求的URL</strong></span> 有俩个，</p> 
  <pre>
<code class="language-html">http://api.map.baidu.com/location/ip?ak=您的AK&amp;ip=您的IP&amp;coor=bd09ll //HTTP协议 

https://api.map.baidu.com/location/ip?ak=您的AK&amp;ip=您的IP&amp;coor=bd09ll //HTTPS协议</code></pre> 
  <p><span style="color:#86ca5e;"><strong>请求的参数</strong></span></p> 
  <p>其中需要注意的是： <span style="color:#f33b45;"><strong>ak 是必填的，其他几个参数可选。</strong></span></p> 
  <p><img alt="" height="844" src="https://img-blog.csdnimg.cn/20200517165640331.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1200"></p> 
  <p><span style="color:#3399ea;"><strong>（2）如何申请AK</strong></span></p> 
  <p>地址：<a href="http://lbsyun.baidu.com/apiconsole/key#/home" rel="nofollow">http://lbsyun.baidu.com/apiconsole/key#/home</a></p> 
  <p>首先需要点到我的应用里面，新建应用，我这下面是已经建好了。</p> 
  <p><img alt="" height="614" src="https://img-blog.csdnimg.cn/2020051717003282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1200"></p> 
  <p>&nbsp;</p> 
  <p><img alt="" height="942" src="https://img-blog.csdnimg.cn/20200517170122967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1014"></p> 
  <p>&nbsp;</p> 
  <p>点击确定即可。</p> 
  <p>需要注意的是：ip白名单不建议使用 0.0.0.0/0&nbsp; 可以使用具体的ip名称。</p> 
  <p><span style="color:#3399ea;"><strong>（3）代码调用</strong></span></p> 
  <p><img alt="" height="480" src="https://img-blog.csdnimg.cn/20200517170457816.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1200"></p> 
  <p>获取到的json 我把他复制出来，看一下怎么解析这个json.&nbsp; 我这里用的是阿里巴巴下的jsonObject ,所以需要引用jar 包。</p> 
  <pre>
<code class="language-java">{
	"address": "CN|上海|上海|None|CHINANET|0|0",
	"content": {
		"address_detail": {
			"province": "上海市",
			"city": "上海市",
			"street": "",
			"district": "",
			"street_number": "",
			"city_code": 289
		},
		"address": "上海市",
		"point": {
			"x": "13524118.26",
			"y": "3642780.37"
		}
	},
	"status": 0
}</code></pre> 
  <p><img alt="" height="924" src="https://img-blog.csdnimg.cn/20200517171924477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1200"></p> 
  <p><span style="color:#3399ea;"><strong>（4）代码</strong></span></p> 
  <pre>
<code class="language-java">package com.bos.test;

import com.alibaba.fastjson.JSONObject;
import com.bos.util.SendRequest;


public class MenuTest {

    public static void main(String[] args) {
        String url = "http://api.map.baidu.com/location/ip?&amp;ak=lGhonqkkoUGZurajdlpL1QqciA215kkq";
        JSONObject jsonObject = SendRequest.sendGet2(url);
        System.out.println(jsonObject);
        //获取content中的值
        JSONObject contentJsonObject = jsonObject.getJSONObject("content");
        System.out.println("contentJsonObject-------"+contentJsonObject);
        //获取详细地址数据
        JSONObject addressDetailJsonObject = contentJsonObject.getJSONObject("address_detail");
        String address = addressDetailJsonObject.getString("province");
        String city = addressDetailJsonObject.getString("city");
        System.out.println("address_detail-------"+addressDetailJsonObject);
        System.out.println("address-------"+address);
        System.out.println("city-------"+city);

        String address2 = contentJsonObject.getString("address");
        System.out.println("address2-----"+address2);

        JSONObject pointJsonObject = contentJsonObject.getJSONObject("point");
        String x = pointJsonObject.getString("x");
        String y = pointJsonObject.getString("y");
        System.out.println("x----"+x);
        System.out.println("y----"+y);
    }


}
</code></pre> 
  <pre>
<code class="language-java"> /**
     * 发送get 请求，比如定时任务调用的就是请求
     * @param url
     * @return
     */
    public static JSONObject sendGet2(String url) {
        JSONObject jsonObject = null;
        StringBuffer sb = new StringBuffer();
        BufferedReader in = null;
        try {
            String urlName = url;
            URL realUrl = new URL(urlName);
            // 打开和URL之间的连接
            URLConnection conn = realUrl.openConnection();
            // 设置通用的请求属性
            conn.setRequestProperty("accept", "*/*");
            conn.setRequestProperty("connection", "Keep-Alive");
            conn.setRequestProperty("user-agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)");
            conn.setConnectTimeout(10000);
            // 建立实际的连接
            conn.connect();
            // 定义BufferedReader输入流来读取URL的响应
            in = new BufferedReader(new InputStreamReader(conn.getInputStream(), "UTF-8"));
            String line;
            while ((line = in.readLine()) != null) {
                sb.append(line);
            }
            jsonObject = JSON.parseObject(sb.toString());
        } catch (Exception e) {
            System.out.println("发送GET请求出现异常！" + e);
            // 使用finally块来关闭输入流
        } finally {
            try {
                if (in != null) {
                    in.close();
                }
            } catch (IOException ex) {
                System.out.println("关闭流异常");
            }
        }
        return jsonObject;
    }</code></pre> 
  <p>做到上面其实就可以了，但是如果调用次数太多的话也会报异常。这个时候就需要申请开发者资质认证，我这边先申请一下个人开发者。</p> 
  <p><img alt="" height="1200" src="https://img-blog.csdnimg.cn/20200521084449229.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1080"></p> 
  <p>&nbsp;</p> 
  <p><img alt="" height="621" src="https://img-blog.csdnimg.cn/20200521084602757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1200"></p> 
  <p>&nbsp;</p> 
  <p><img alt="" height="564" src="https://img-blog.csdnimg.cn/2020052108570653.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1073"></p> 
  <p>&nbsp;</p> 
  <p>&nbsp;</p> 
  <h3>番外加赠：</h3> 
  <p>上面的文档可以获取到当前城市的中心点，比如我在上海 ，获取的就是上海市等。 如果想要精确信息，可以根据返回的经纬度做一步查询。</p> 
  <p>文档地址：<a href="http://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-geocoding-abroad" rel="nofollow">http://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-geocoding-abroad</a></p> 
  <p>&nbsp;</p> 
  <p><img alt="" height="778" src="https://img-blog.csdnimg.cn/20200527144127208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1200"></p> 
  <p>&nbsp;</p> 
  <p>其中需要注意的就是要查询自己是否有逆地理编码权限，具体操作图在下面。、</p> 
  <p><img alt="" height="573" src="https://img-blog.csdnimg.cn/20200527144329805.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1200"></p> 
  <p>查询应用是否有逆地理编码的权限。像我的话，没有，点击申请权限。</p> 
  <p><img alt="" height="790" src="https://img-blog.csdnimg.cn/20200527144514646.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1083"></p> 
  <p>点击申请权限往下做下去，我这边就不做了</p> 
  <p>&nbsp;&nbsp;<img alt="" height="883" src="https://img-blog.csdnimg.cn/20200527144611414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="930"></p> 
  <p>&nbsp;</p> 
 </div> 
</div>, newsAttr=2, newsImage=https://profile.csdnimg.cn/8/5/D/3_tangthh123, orderNum=null, isPublic=null, thumbs=153, visits=64, comments=null, collects=153, newsSource=https://blog.csdn.net/tangthh123, newsSourceAuthor=soup_tang, newsSourceTags=知识集锦,# 功能需求, status=null, delFlag=null, createBy=null, createTime=null, updateBy=null, updateTime=null, remark=null, beginTime=null, endTime=null, params={}, newsType=null)}
2020-09-03 15:19:23.662 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:50 -获取peNews--->>>null
2020-09-03 15:19:23.662 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:51 -获取entertainmentNews--->>>null
2020-09-03 15:19:23.662 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:52 -获取csdnNews--->>>LinqNews(newsId=null, userId=1, newsTypeId=18, newsTitle=如何根据普通ip地址获取当前地理位置, newsContent=<div id="article_content" class="article_content clearfix"> 
 <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3d4dc5c1de.css"> 
 <div class="htmledit_views" id="content_views"> 
  <h2>前言：</h2> 
  <p>我们现在需要做的功能是根据ip地址获取当前地理位置，是Web 服务API,获取后的位置信息一般是城市级别的，不是很精确的那种获取。</p> 
  <p><span style="color:#3399ea;"><strong>（1）开发者需要做的准备工作：</strong></span></p> 
  <p><img alt="" height="189" src="https://img-blog.csdnimg.cn/20200517164926676.png" width="731"></p> 
  <p>需要登录百度地图的api,点击web 服务API.</p> 
  <p><img alt="" height="783" src="https://img-blog.csdnimg.cn/20200517165445645.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1200"></p> 
  <p>&nbsp;</p> 
  <p>开发文档的地址：<a href="http://lbsyun.baidu.com/index.php?title=webapi/ip-api" rel="nofollow">http://lbsyun.baidu.com/index.php?title=webapi/ip-api</a></p> 
  <p><span style="color:#86ca5e;"><strong>请求的URL</strong></span> 有俩个，</p> 
  <pre>
<code class="language-html">http://api.map.baidu.com/location/ip?ak=您的AK&amp;ip=您的IP&amp;coor=bd09ll //HTTP协议 

https://api.map.baidu.com/location/ip?ak=您的AK&amp;ip=您的IP&amp;coor=bd09ll //HTTPS协议</code></pre> 
  <p><span style="color:#86ca5e;"><strong>请求的参数</strong></span></p> 
  <p>其中需要注意的是： <span style="color:#f33b45;"><strong>ak 是必填的，其他几个参数可选。</strong></span></p> 
  <p><img alt="" height="844" src="https://img-blog.csdnimg.cn/20200517165640331.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1200"></p> 
  <p><span style="color:#3399ea;"><strong>（2）如何申请AK</strong></span></p> 
  <p>地址：<a href="http://lbsyun.baidu.com/apiconsole/key#/home" rel="nofollow">http://lbsyun.baidu.com/apiconsole/key#/home</a></p> 
  <p>首先需要点到我的应用里面，新建应用，我这下面是已经建好了。</p> 
  <p><img alt="" height="614" src="https://img-blog.csdnimg.cn/2020051717003282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1200"></p> 
  <p>&nbsp;</p> 
  <p><img alt="" height="942" src="https://img-blog.csdnimg.cn/20200517170122967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1014"></p> 
  <p>&nbsp;</p> 
  <p>点击确定即可。</p> 
  <p>需要注意的是：ip白名单不建议使用 0.0.0.0/0&nbsp; 可以使用具体的ip名称。</p> 
  <p><span style="color:#3399ea;"><strong>（3）代码调用</strong></span></p> 
  <p><img alt="" height="480" src="https://img-blog.csdnimg.cn/20200517170457816.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1200"></p> 
  <p>获取到的json 我把他复制出来，看一下怎么解析这个json.&nbsp; 我这里用的是阿里巴巴下的jsonObject ,所以需要引用jar 包。</p> 
  <pre>
<code class="language-java">{
	"address": "CN|上海|上海|None|CHINANET|0|0",
	"content": {
		"address_detail": {
			"province": "上海市",
			"city": "上海市",
			"street": "",
			"district": "",
			"street_number": "",
			"city_code": 289
		},
		"address": "上海市",
		"point": {
			"x": "13524118.26",
			"y": "3642780.37"
		}
	},
	"status": 0
}</code></pre> 
  <p><img alt="" height="924" src="https://img-blog.csdnimg.cn/20200517171924477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1200"></p> 
  <p><span style="color:#3399ea;"><strong>（4）代码</strong></span></p> 
  <pre>
<code class="language-java">package com.bos.test;

import com.alibaba.fastjson.JSONObject;
import com.bos.util.SendRequest;


public class MenuTest {

    public static void main(String[] args) {
        String url = "http://api.map.baidu.com/location/ip?&amp;ak=lGhonqkkoUGZurajdlpL1QqciA215kkq";
        JSONObject jsonObject = SendRequest.sendGet2(url);
        System.out.println(jsonObject);
        //获取content中的值
        JSONObject contentJsonObject = jsonObject.getJSONObject("content");
        System.out.println("contentJsonObject-------"+contentJsonObject);
        //获取详细地址数据
        JSONObject addressDetailJsonObject = contentJsonObject.getJSONObject("address_detail");
        String address = addressDetailJsonObject.getString("province");
        String city = addressDetailJsonObject.getString("city");
        System.out.println("address_detail-------"+addressDetailJsonObject);
        System.out.println("address-------"+address);
        System.out.println("city-------"+city);

        String address2 = contentJsonObject.getString("address");
        System.out.println("address2-----"+address2);

        JSONObject pointJsonObject = contentJsonObject.getJSONObject("point");
        String x = pointJsonObject.getString("x");
        String y = pointJsonObject.getString("y");
        System.out.println("x----"+x);
        System.out.println("y----"+y);
    }


}
</code></pre> 
  <pre>
<code class="language-java"> /**
     * 发送get 请求，比如定时任务调用的就是请求
     * @param url
     * @return
     */
    public static JSONObject sendGet2(String url) {
        JSONObject jsonObject = null;
        StringBuffer sb = new StringBuffer();
        BufferedReader in = null;
        try {
            String urlName = url;
            URL realUrl = new URL(urlName);
            // 打开和URL之间的连接
            URLConnection conn = realUrl.openConnection();
            // 设置通用的请求属性
            conn.setRequestProperty("accept", "*/*");
            conn.setRequestProperty("connection", "Keep-Alive");
            conn.setRequestProperty("user-agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)");
            conn.setConnectTimeout(10000);
            // 建立实际的连接
            conn.connect();
            // 定义BufferedReader输入流来读取URL的响应
            in = new BufferedReader(new InputStreamReader(conn.getInputStream(), "UTF-8"));
            String line;
            while ((line = in.readLine()) != null) {
                sb.append(line);
            }
            jsonObject = JSON.parseObject(sb.toString());
        } catch (Exception e) {
            System.out.println("发送GET请求出现异常！" + e);
            // 使用finally块来关闭输入流
        } finally {
            try {
                if (in != null) {
                    in.close();
                }
            } catch (IOException ex) {
                System.out.println("关闭流异常");
            }
        }
        return jsonObject;
    }</code></pre> 
  <p>做到上面其实就可以了，但是如果调用次数太多的话也会报异常。这个时候就需要申请开发者资质认证，我这边先申请一下个人开发者。</p> 
  <p><img alt="" height="1200" src="https://img-blog.csdnimg.cn/20200521084449229.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1080"></p> 
  <p>&nbsp;</p> 
  <p><img alt="" height="621" src="https://img-blog.csdnimg.cn/20200521084602757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1200"></p> 
  <p>&nbsp;</p> 
  <p><img alt="" height="564" src="https://img-blog.csdnimg.cn/2020052108570653.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1073"></p> 
  <p>&nbsp;</p> 
  <p>&nbsp;</p> 
  <h3>番外加赠：</h3> 
  <p>上面的文档可以获取到当前城市的中心点，比如我在上海 ，获取的就是上海市等。 如果想要精确信息，可以根据返回的经纬度做一步查询。</p> 
  <p>文档地址：<a href="http://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-geocoding-abroad" rel="nofollow">http://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-geocoding-abroad</a></p> 
  <p>&nbsp;</p> 
  <p><img alt="" height="778" src="https://img-blog.csdnimg.cn/20200527144127208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1200"></p> 
  <p>&nbsp;</p> 
  <p>其中需要注意的就是要查询自己是否有逆地理编码权限，具体操作图在下面。、</p> 
  <p><img alt="" height="573" src="https://img-blog.csdnimg.cn/20200527144329805.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1200"></p> 
  <p>查询应用是否有逆地理编码的权限。像我的话，没有，点击申请权限。</p> 
  <p><img alt="" height="790" src="https://img-blog.csdnimg.cn/20200527144514646.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1083"></p> 
  <p>点击申请权限往下做下去，我这边就不做了</p> 
  <p>&nbsp;&nbsp;<img alt="" height="883" src="https://img-blog.csdnimg.cn/20200527144611414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="930"></p> 
  <p>&nbsp;</p> 
 </div> 
</div>, newsAttr=2, newsImage=https://profile.csdnimg.cn/8/5/D/3_tangthh123, orderNum=null, isPublic=null, thumbs=153, visits=64, comments=null, collects=153, newsSource=https://blog.csdn.net/tangthh123, newsSourceAuthor=soup_tang, newsSourceTags=知识集锦,# 功能需求, status=null, delFlag=null, createBy=null, createTime=null, updateBy=null, updateTime=null, remark=null, beginTime=null, endTime=null, params={}, newsType=null)
2020-09-03 15:19:23.673 WARN  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]o.s.a.rabbit.listener.ConditionalRejectingErrorHandler.log:129 -Execution of Rabbit message listener failed.
org.springframework.amqp.rabbit.support.ListenerExecutionFailedException: Listener method 'public void com.linq.news.task.listener.NewsConsumer.receiveNews(org.springframework.messaging.Message<java.util.HashMap<java.lang.String, java.lang.Object>>,com.rabbitmq.client.Channel) throws java.io.IOException' threw exception
	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:228)
	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandlerAndProcessResult(MessagingMessageListenerAdapter.java:148)
	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.onMessage(MessagingMessageListenerAdapter.java:133)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:1591)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.actualInvokeListener(AbstractMessageListenerContainer.java:1510)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:1498)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:1489)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.executeListener(AbstractMessageListenerContainer.java:1433)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.doReceiveAndExecute(SimpleMessageListenerContainer.java:970)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.receiveAndExecute(SimpleMessageListenerContainer.java:916)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.access$1600(SimpleMessageListenerContainer.java:83)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer$AsyncMessageProcessingConsumer.mainLoop(SimpleMessageListenerContainer.java:1291)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer$AsyncMessageProcessingConsumer.run(SimpleMessageListenerContainer.java:1197)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.linq.common.exception.CustomException: 消息队列消费异常新增新闻'如何根据普通ip地址获取当前地理位置'失败，新闻标题已存在
	at com.linq.news.task.listener.NewsConsumer.receiveNews(NewsConsumer.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:171)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:120)
	at org.springframework.amqp.rabbit.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:53)
	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:220)
	... 13 common frames omitted
2020-09-03 15:19:23.675 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:45 -接收到消息的时间----->>> 1599117563675
消费tag->>> 6
从消息队列中拿到数据----------->>>> {csdnNews=LinqNews(newsId=null, userId=1, newsTypeId=18, newsTitle=Python3.7.0以上版本安装pip报错ModuleNotFoundError: No module named ‘_ctypes‘解决方法, newsContent=<div id="article_content" class="article_content clearfix"> 
 <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3d4dc5c1de.css"> 
 <div id="content_views" class="markdown_views prism-atom-one-light"> 
  <!-- flowchart 箭头图标 勿删 --> 
  <svg xmlns="http://www.w3.org/2000/svg" style="display: none;"> 
   <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path> 
  </svg> 
  <h1><a id="Python37__0"></a>安装Python3.7 可看博客</h1> 
  <p><a href="https://blog.csdn.net/qq_23934063/article/details/103687417">【系统运维】开发环境多版本python共存环境部署-Linux</a></p> 
  <h1><a id="__3"></a>服务器下载 源码包</h1> 
  <p><a href="https://www.python.org/ftp/python/3.7.9/Python-3.7.9.tgz" rel="nofollow">python3.7.9</a><br> wget https://www.python.org/ftp/python/3.7.9/Python-3.7.9.tgz</p> 
  <h1><a id="_7"></a>安装依赖</h1> 
  <p>pip3.7 install<br> FastAPI<mark>0.54.1<br> uvicorn</mark>0.6.1</p> 
  <h1><a id="_12"></a>错误提示</h1> 
  <p>ModuleNotFoundError: No module named ‘_ctypes’</p> 
  <h2><a id="_16"></a>解决方法</h2> 
  <h3><a id="Ubuntu_17"></a>Ubuntu</h3> 
  <p><code>sudo apt-get install libffi-devel</code></p> 
  <h3><a id="CentOS_20"></a>CentOS</h3> 
  <p><code>yum install libffi-devel</code></p> 
  <h3><a id="_23"></a>重新编译安装</h3> 
  <p>make &amp;&amp; make install</p> 
  <h3><a id="_26"></a>再次安装依赖</h3> 
  <p><img src="https://img-blog.csdnimg.cn/20200901103156327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIzOTM0MDYz,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p> 
 </div> 
 <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e0530931f4.css" rel="stylesheet"> 
</div>, newsAttr=2, newsImage=https://profile.csdnimg.cn/1/3/8/3_qq_23934063, orderNum=null, isPublic=null, thumbs=560, visits=1393, comments=null, collects=560, newsSource=https://blog.csdn.net/qq_23934063, newsSourceAuthor=不太灵光的程序员, newsSourceTags=python, status=null, delFlag=null, createBy=null, createTime=null, updateBy=null, updateTime=null, remark=null, beginTime=null, endTime=null, params={}, newsType=null)}
2020-09-03 15:19:23.676 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:50 -获取peNews--->>>null
2020-09-03 15:19:23.676 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:51 -获取entertainmentNews--->>>null
2020-09-03 15:19:23.676 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:52 -获取csdnNews--->>>LinqNews(newsId=null, userId=1, newsTypeId=18, newsTitle=Python3.7.0以上版本安装pip报错ModuleNotFoundError: No module named ‘_ctypes‘解决方法, newsContent=<div id="article_content" class="article_content clearfix"> 
 <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3d4dc5c1de.css"> 
 <div id="content_views" class="markdown_views prism-atom-one-light"> 
  <!-- flowchart 箭头图标 勿删 --> 
  <svg xmlns="http://www.w3.org/2000/svg" style="display: none;"> 
   <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path> 
  </svg> 
  <h1><a id="Python37__0"></a>安装Python3.7 可看博客</h1> 
  <p><a href="https://blog.csdn.net/qq_23934063/article/details/103687417">【系统运维】开发环境多版本python共存环境部署-Linux</a></p> 
  <h1><a id="__3"></a>服务器下载 源码包</h1> 
  <p><a href="https://www.python.org/ftp/python/3.7.9/Python-3.7.9.tgz" rel="nofollow">python3.7.9</a><br> wget https://www.python.org/ftp/python/3.7.9/Python-3.7.9.tgz</p> 
  <h1><a id="_7"></a>安装依赖</h1> 
  <p>pip3.7 install<br> FastAPI<mark>0.54.1<br> uvicorn</mark>0.6.1</p> 
  <h1><a id="_12"></a>错误提示</h1> 
  <p>ModuleNotFoundError: No module named ‘_ctypes’</p> 
  <h2><a id="_16"></a>解决方法</h2> 
  <h3><a id="Ubuntu_17"></a>Ubuntu</h3> 
  <p><code>sudo apt-get install libffi-devel</code></p> 
  <h3><a id="CentOS_20"></a>CentOS</h3> 
  <p><code>yum install libffi-devel</code></p> 
  <h3><a id="_23"></a>重新编译安装</h3> 
  <p>make &amp;&amp; make install</p> 
  <h3><a id="_26"></a>再次安装依赖</h3> 
  <p><img src="https://img-blog.csdnimg.cn/20200901103156327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIzOTM0MDYz,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p> 
 </div> 
 <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e0530931f4.css" rel="stylesheet"> 
</div>, newsAttr=2, newsImage=https://profile.csdnimg.cn/1/3/8/3_qq_23934063, orderNum=null, isPublic=null, thumbs=560, visits=1393, comments=null, collects=560, newsSource=https://blog.csdn.net/qq_23934063, newsSourceAuthor=不太灵光的程序员, newsSourceTags=python, status=null, delFlag=null, createBy=null, createTime=null, updateBy=null, updateTime=null, remark=null, beginTime=null, endTime=null, params={}, newsType=null)
2020-09-03 15:19:23.690 WARN  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]o.s.a.rabbit.listener.ConditionalRejectingErrorHandler.log:129 -Execution of Rabbit message listener failed.
org.springframework.amqp.rabbit.support.ListenerExecutionFailedException: Listener method 'public void com.linq.news.task.listener.NewsConsumer.receiveNews(org.springframework.messaging.Message<java.util.HashMap<java.lang.String, java.lang.Object>>,com.rabbitmq.client.Channel) throws java.io.IOException' threw exception
	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:228)
	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandlerAndProcessResult(MessagingMessageListenerAdapter.java:148)
	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.onMessage(MessagingMessageListenerAdapter.java:133)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:1591)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.actualInvokeListener(AbstractMessageListenerContainer.java:1510)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:1498)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:1489)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.executeListener(AbstractMessageListenerContainer.java:1433)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.doReceiveAndExecute(SimpleMessageListenerContainer.java:970)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.receiveAndExecute(SimpleMessageListenerContainer.java:916)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.access$1600(SimpleMessageListenerContainer.java:83)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer$AsyncMessageProcessingConsumer.mainLoop(SimpleMessageListenerContainer.java:1291)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer$AsyncMessageProcessingConsumer.run(SimpleMessageListenerContainer.java:1197)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.linq.common.exception.CustomException: 消息队列消费异常新增新闻'Python3.7.0以上版本安装pip报错ModuleNotFoundError: No module named ‘_ctypes‘解决方法'失败，新闻标题已存在
	at com.linq.news.task.listener.NewsConsumer.receiveNews(NewsConsumer.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:171)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:120)
	at org.springframework.amqp.rabbit.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:53)
	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:220)
	... 13 common frames omitted
2020-09-03 15:19:23.691 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:45 -接收到消息的时间----->>> 1599117563691
消费tag->>> 7
从消息队列中拿到数据----------->>>> {csdnNews=LinqNews(newsId=null, userId=1, newsTypeId=18, newsTitle=Windows下安装Docker, newsContent=<div id="article_content" class="article_content clearfix"> 
 <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3d4dc5c1de.css"> 
 <div id="content_views" class="markdown_views prism-atom-one-dark"> 
  <!-- flowchart 箭头图标 勿删 --> 
  <svg xmlns="http://www.w3.org/2000/svg" style="display: none;"> 
   <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path> 
  </svg> 
  <h1><a id="_0"></a>前言</h1> 
  <p>本文介绍Windows下安装Docker。<br> <br></p> 
  <h1><a id="_5"></a>环境</h1> 
  <p>1.Windows10<br> 2.Docker</p> 
  <br> 
  <h1><a id="_13"></a>内容</h1> 
  <br> 
  <h2><a id="WindowsDocker_16"></a>Windows下安装Docker</h2> 
  <br> 
  <h3><a id="_19"></a>第一步：检查系统</h3> 
  <p>系统要求：</p> 
  <ul> 
   <li> <p>1.Windows 10 64位：专业版，企业版或教育版(内部版本高于16299)，系统内存最少4G</p> </li> 
   <li> <p>2.Hyper-V和虚拟化功能</p> </li> 
   <li> <p>3.安装WSL 2</p> </li> 
  </ul> 
  <br> 
  <h4><a id="1Win10_32"></a>1.检查Win10系统内存，系统类型及内部版本</h4> 
  <p>打开 “设置-Windows更新” ，点击OS内部版本信息：</p> 
  <ul> 
   <li> <p>查看系统内存，最少为4G；</p> </li> 
   <li> <p>查看系统类型，须是64位操作系统；</p> </li> 
   <li> <p>查看操作系统版本，此版本须大于16299。</p> </li> 
  </ul> 
  <p><img src="https://img-blog.csdnimg.cn/2020090120295539.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MDA0NTg0,size_16,color_FFFFFF,t_70#pic_center" alt=""><br> <img src="https://img-blog.csdnimg.cn/20200901203003792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MDA0NTg0,size_16,color_FFFFFF,t_70#pic_center" alt=""><br> <br></p> 
  <h4><a id="2HyperV_46"></a>2.检查Hyper-V和虚拟化功能是否启用</h4> 
  <p>打开"控制面板 - 程序 - 程序和功能 - 启用或关闭Windows功能"，检查Hyper-V是否启用</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200901203023779.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MDA0NTg0,size_16,color_FFFFFF,t_70#pic_center" alt=""></p> 
  <p>打开"任务管理器 - 性能"，检查虚拟化是否启用</p> 
  <p>(一般大家电脑都已开启，如果没有开启可参考：<a href="http://www.xitongcheng.com/jiaocheng/win10_article_53803.html" rel="nofollow">http://www.xitongcheng.com/jiaocheng/win10_article_53803.html</a>)</p> 
  <p><img src="https://img-blog.csdnimg.cn/202009012030390.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MDA0NTg0,size_16,color_FFFFFF,t_70#pic_center" alt=""></p> 
  <br> 
  <h4><a id="3WSL_2_63"></a>3.安装WSL 2</h4> 
  <p>WSL(Windows Sybsystem for Linux)，是一个为在Win10上运行Linux二进制可执行文件(ELF格式)的兼容层。</p> 
  <p>WSL通过以下地址下载，下载完成后，安装即可(安装过程中采用默认选项)。</p> 
  <p>下载地址：<a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi" rel="nofollow">https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi</a></p> 
  <br> 
  <h3><a id="Docker_76"></a>第二步：下载Docker</h3> 
  <p>下载地址：<a href="https://hub.docker.com/editions/community/docker-ce-desktop-windows" rel="nofollow">https://hub.docker.com/editions/community/docker-ce-desktop-windows</a></p> 
  <p>点击Get Stable，下载稳定版本即可</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200901203217973.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MDA0NTg0,size_16,color_FFFFFF,t_70#pic_center" alt=""></p> 
  <br> 
  <h3><a id="Docker_89"></a>第三步：安装Docker</h3> 
  <p>双击下载的Docker Desktop Installer.exe进行安装(安装过程采用默认选项即可)。安装完成后重启电脑。</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200901203119108.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MDA0NTg0,size_16,color_FFFFFF,t_70#pic_center" alt=""><br> <img src="https://img-blog.csdnimg.cn/20200901203126325.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MDA0NTg0,size_16,color_FFFFFF,t_70#pic_center" alt=""></p> 
  <br> 
  <h3><a id="Docker_98"></a>第四步：启动Docker</h3> 
  <p>安装完成后，打开Docker，Docker启动过程中会在任务栏中看到Docekr图标跳动，直至启动完毕停止跳动。</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200901203234572.jpg#pic_center" alt=""></p> 
  <p><img src="https://img-blog.csdnimg.cn/20200901203247664.png#pic_center" alt=""></p> 
  <p><img src="https://img-blog.csdnimg.cn/2020090120325449.png#pic_center" alt=""></p> 
  <br> 
  <h3><a id="_111"></a>第五步：查看版本</h3> 
  <p>打开cmd，输入命令：docker -v，如果可以成功查看版本，则说明Docker安装成功。</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200901203305434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MDA0NTg0,size_16,color_FFFFFF,t_70#pic_center" alt=""><br> <br></p> 
  <h3><a id="WindowsDocker_119"></a>第六步：Windows下Docker安装完成</h3> 
  <br> 
  <h1><a id="_122"></a>小结</h1> 
  <p>查看docker版本：docker -v</p> 
  <br> 
  <h1><a id="_129"></a>后语</h1> 
  <p>下篇介绍Linux下安装Docker，待续…</p> 
 </div> 
 <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e0530931f4.css" rel="stylesheet"> 
</div>, newsAttr=2, newsImage=https://profile.csdnimg.cn/1/5/6/3_qq_36004584, orderNum=null, isPublic=null, thumbs=2, visits=0, comments=null, collects=2, newsSource=https://blog.csdn.net/qq_36004584, newsSourceAuthor=dotnet之家, newsSourceTags=Docker, status=null, delFlag=null, createBy=null, createTime=null, updateBy=null, updateTime=null, remark=null, beginTime=null, endTime=null, params={}, newsType=null)}
2020-09-03 15:19:23.692 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:50 -获取peNews--->>>null
2020-09-03 15:19:23.692 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:51 -获取entertainmentNews--->>>null
2020-09-03 15:19:23.692 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:52 -获取csdnNews--->>>LinqNews(newsId=null, userId=1, newsTypeId=18, newsTitle=Windows下安装Docker, newsContent=<div id="article_content" class="article_content clearfix"> 
 <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3d4dc5c1de.css"> 
 <div id="content_views" class="markdown_views prism-atom-one-dark"> 
  <!-- flowchart 箭头图标 勿删 --> 
  <svg xmlns="http://www.w3.org/2000/svg" style="display: none;"> 
   <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path> 
  </svg> 
  <h1><a id="_0"></a>前言</h1> 
  <p>本文介绍Windows下安装Docker。<br> <br></p> 
  <h1><a id="_5"></a>环境</h1> 
  <p>1.Windows10<br> 2.Docker</p> 
  <br> 
  <h1><a id="_13"></a>内容</h1> 
  <br> 
  <h2><a id="WindowsDocker_16"></a>Windows下安装Docker</h2> 
  <br> 
  <h3><a id="_19"></a>第一步：检查系统</h3> 
  <p>系统要求：</p> 
  <ul> 
   <li> <p>1.Windows 10 64位：专业版，企业版或教育版(内部版本高于16299)，系统内存最少4G</p> </li> 
   <li> <p>2.Hyper-V和虚拟化功能</p> </li> 
   <li> <p>3.安装WSL 2</p> </li> 
  </ul> 
  <br> 
  <h4><a id="1Win10_32"></a>1.检查Win10系统内存，系统类型及内部版本</h4> 
  <p>打开 “设置-Windows更新” ，点击OS内部版本信息：</p> 
  <ul> 
   <li> <p>查看系统内存，最少为4G；</p> </li> 
   <li> <p>查看系统类型，须是64位操作系统；</p> </li> 
   <li> <p>查看操作系统版本，此版本须大于16299。</p> </li> 
  </ul> 
  <p><img src="https://img-blog.csdnimg.cn/2020090120295539.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MDA0NTg0,size_16,color_FFFFFF,t_70#pic_center" alt=""><br> <img src="https://img-blog.csdnimg.cn/20200901203003792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MDA0NTg0,size_16,color_FFFFFF,t_70#pic_center" alt=""><br> <br></p> 
  <h4><a id="2HyperV_46"></a>2.检查Hyper-V和虚拟化功能是否启用</h4> 
  <p>打开"控制面板 - 程序 - 程序和功能 - 启用或关闭Windows功能"，检查Hyper-V是否启用</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200901203023779.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MDA0NTg0,size_16,color_FFFFFF,t_70#pic_center" alt=""></p> 
  <p>打开"任务管理器 - 性能"，检查虚拟化是否启用</p> 
  <p>(一般大家电脑都已开启，如果没有开启可参考：<a href="http://www.xitongcheng.com/jiaocheng/win10_article_53803.html" rel="nofollow">http://www.xitongcheng.com/jiaocheng/win10_article_53803.html</a>)</p> 
  <p><img src="https://img-blog.csdnimg.cn/202009012030390.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MDA0NTg0,size_16,color_FFFFFF,t_70#pic_center" alt=""></p> 
  <br> 
  <h4><a id="3WSL_2_63"></a>3.安装WSL 2</h4> 
  <p>WSL(Windows Sybsystem for Linux)，是一个为在Win10上运行Linux二进制可执行文件(ELF格式)的兼容层。</p> 
  <p>WSL通过以下地址下载，下载完成后，安装即可(安装过程中采用默认选项)。</p> 
  <p>下载地址：<a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi" rel="nofollow">https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi</a></p> 
  <br> 
  <h3><a id="Docker_76"></a>第二步：下载Docker</h3> 
  <p>下载地址：<a href="https://hub.docker.com/editions/community/docker-ce-desktop-windows" rel="nofollow">https://hub.docker.com/editions/community/docker-ce-desktop-windows</a></p> 
  <p>点击Get Stable，下载稳定版本即可</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200901203217973.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MDA0NTg0,size_16,color_FFFFFF,t_70#pic_center" alt=""></p> 
  <br> 
  <h3><a id="Docker_89"></a>第三步：安装Docker</h3> 
  <p>双击下载的Docker Desktop Installer.exe进行安装(安装过程采用默认选项即可)。安装完成后重启电脑。</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200901203119108.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MDA0NTg0,size_16,color_FFFFFF,t_70#pic_center" alt=""><br> <img src="https://img-blog.csdnimg.cn/20200901203126325.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MDA0NTg0,size_16,color_FFFFFF,t_70#pic_center" alt=""></p> 
  <br> 
  <h3><a id="Docker_98"></a>第四步：启动Docker</h3> 
  <p>安装完成后，打开Docker，Docker启动过程中会在任务栏中看到Docekr图标跳动，直至启动完毕停止跳动。</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200901203234572.jpg#pic_center" alt=""></p> 
  <p><img src="https://img-blog.csdnimg.cn/20200901203247664.png#pic_center" alt=""></p> 
  <p><img src="https://img-blog.csdnimg.cn/2020090120325449.png#pic_center" alt=""></p> 
  <br> 
  <h3><a id="_111"></a>第五步：查看版本</h3> 
  <p>打开cmd，输入命令：docker -v，如果可以成功查看版本，则说明Docker安装成功。</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200901203305434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MDA0NTg0,size_16,color_FFFFFF,t_70#pic_center" alt=""><br> <br></p> 
  <h3><a id="WindowsDocker_119"></a>第六步：Windows下Docker安装完成</h3> 
  <br> 
  <h1><a id="_122"></a>小结</h1> 
  <p>查看docker版本：docker -v</p> 
  <br> 
  <h1><a id="_129"></a>后语</h1> 
  <p>下篇介绍Linux下安装Docker，待续…</p> 
 </div> 
 <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e0530931f4.css" rel="stylesheet"> 
</div>, newsAttr=2, newsImage=https://profile.csdnimg.cn/1/5/6/3_qq_36004584, orderNum=null, isPublic=null, thumbs=2, visits=0, comments=null, collects=2, newsSource=https://blog.csdn.net/qq_36004584, newsSourceAuthor=dotnet之家, newsSourceTags=Docker, status=null, delFlag=null, createBy=null, createTime=null, updateBy=null, updateTime=null, remark=null, beginTime=null, endTime=null, params={}, newsType=null)
2020-09-03 15:19:23.704 WARN  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]o.s.a.rabbit.listener.ConditionalRejectingErrorHandler.log:129 -Execution of Rabbit message listener failed.
org.springframework.amqp.rabbit.support.ListenerExecutionFailedException: Listener method 'public void com.linq.news.task.listener.NewsConsumer.receiveNews(org.springframework.messaging.Message<java.util.HashMap<java.lang.String, java.lang.Object>>,com.rabbitmq.client.Channel) throws java.io.IOException' threw exception
	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:228)
	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandlerAndProcessResult(MessagingMessageListenerAdapter.java:148)
	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.onMessage(MessagingMessageListenerAdapter.java:133)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:1591)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.actualInvokeListener(AbstractMessageListenerContainer.java:1510)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:1498)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:1489)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.executeListener(AbstractMessageListenerContainer.java:1433)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.doReceiveAndExecute(SimpleMessageListenerContainer.java:970)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.receiveAndExecute(SimpleMessageListenerContainer.java:916)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.access$1600(SimpleMessageListenerContainer.java:83)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer$AsyncMessageProcessingConsumer.mainLoop(SimpleMessageListenerContainer.java:1291)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer$AsyncMessageProcessingConsumer.run(SimpleMessageListenerContainer.java:1197)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.linq.common.exception.CustomException: 消息队列消费异常新增新闻'Windows下安装Docker'失败，新闻标题已存在
	at com.linq.news.task.listener.NewsConsumer.receiveNews(NewsConsumer.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:171)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:120)
	at org.springframework.amqp.rabbit.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:53)
	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:220)
	... 13 common frames omitted
2020-09-03 15:19:23.704 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:45 -接收到消息的时间----->>> 1599117563704
消费tag->>> 8
从消息队列中拿到数据----------->>>> {csdnNews=LinqNews(newsId=null, userId=1, newsTypeId=18, newsTitle=Ubuntu:E: 无法获得锁 /var/lib/dpkg/lock - open (11: 资源暂时不可用) E: 无法锁定管理目录(/var/lib/dpkg/)，是否有其他进程正占用它？, newsContent=<div id="article_content" class="article_content clearfix"> 
 <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3d4dc5c1de.css"> 
 <div id="content_views" class="markdown_views prism-atom-one-dark"> 
  <!-- flowchart 箭头图标 勿删 --> 
  <svg xmlns="http://www.w3.org/2000/svg" style="display: none;"> 
   <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path> 
  </svg> 
  <p><font color="red" size="5">重新装了个Ubuntu 16.04中安装 opencv 所需依赖库</font><br> <strong>执行</strong></p> 
  <pre><code class="prism language-c">sudo apt<span class="token operator">-</span>get install cmake libgtk2<span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">-</span>dev libavcodec<span class="token operator">-</span>dev libavformat<span class="token operator">-</span>dev libjpeg<span class="token punctuation">.</span>dev libpng<span class="token operator">-</span>dev libtiff<span class="token operator">-</span>dev libtiff4<span class="token punctuation">.</span>dev libswscale<span class="token operator">-</span>dev libjasper<span class="token operator">-</span>dev libcurl4<span class="token operator">-</span>openssl<span class="token operator">-</span>dev libtbb2 libdc1394<span class="token operator">-</span><span class="token number">22</span><span class="token operator">-</span>dev
</code></pre> 
  <p><strong>却碰到了</strong><br> <img src="https://img-blog.csdnimg.cn/20200902161159674.png#pic_center" alt="在这里插入图片描述"><br> <font color="blue" size="4">想一想这个问题好像碰到过两次，便再次查询便得到了解决方法</font></p> 
  <p><font color="red" size="5">解决方法：</font><br> <img src="https://img-blog.csdnimg.cn/20200902161359340.png#pic_center" alt="在这里插入图片描述"></p> 
  <p><font color="red" size="5">执行：</font></p> 
  <p>sudo rm /var/cache/apt/archives/lock</p> 
  <p>sudo rm /var/lib/dpkg/lock</p> 
  <p><mark>问题完美解决</mark></p> 
 </div> 
 <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e0530931f4.css" rel="stylesheet"> 
</div>, newsAttr=2, newsImage=https://profile.csdnimg.cn/4/B/A/3_hikd_bn, orderNum=null, isPublic=null, thumbs=11, visits=49, comments=null, collects=11, newsSource=https://blog.csdn.net/HikD_bn, newsSourceAuthor=Hik。, newsSourceTags=linux, status=null, delFlag=null, createBy=null, createTime=null, updateBy=null, updateTime=null, remark=null, beginTime=null, endTime=null, params={}, newsType=null)}
2020-09-03 15:19:23.705 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:50 -获取peNews--->>>null
2020-09-03 15:19:23.705 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:51 -获取entertainmentNews--->>>null
2020-09-03 15:19:23.705 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:52 -获取csdnNews--->>>LinqNews(newsId=null, userId=1, newsTypeId=18, newsTitle=Ubuntu:E: 无法获得锁 /var/lib/dpkg/lock - open (11: 资源暂时不可用) E: 无法锁定管理目录(/var/lib/dpkg/)，是否有其他进程正占用它？, newsContent=<div id="article_content" class="article_content clearfix"> 
 <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3d4dc5c1de.css"> 
 <div id="content_views" class="markdown_views prism-atom-one-dark"> 
  <!-- flowchart 箭头图标 勿删 --> 
  <svg xmlns="http://www.w3.org/2000/svg" style="display: none;"> 
   <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path> 
  </svg> 
  <p><font color="red" size="5">重新装了个Ubuntu 16.04中安装 opencv 所需依赖库</font><br> <strong>执行</strong></p> 
  <pre><code class="prism language-c">sudo apt<span class="token operator">-</span>get install cmake libgtk2<span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">-</span>dev libavcodec<span class="token operator">-</span>dev libavformat<span class="token operator">-</span>dev libjpeg<span class="token punctuation">.</span>dev libpng<span class="token operator">-</span>dev libtiff<span class="token operator">-</span>dev libtiff4<span class="token punctuation">.</span>dev libswscale<span class="token operator">-</span>dev libjasper<span class="token operator">-</span>dev libcurl4<span class="token operator">-</span>openssl<span class="token operator">-</span>dev libtbb2 libdc1394<span class="token operator">-</span><span class="token number">22</span><span class="token operator">-</span>dev
</code></pre> 
  <p><strong>却碰到了</strong><br> <img src="https://img-blog.csdnimg.cn/20200902161159674.png#pic_center" alt="在这里插入图片描述"><br> <font color="blue" size="4">想一想这个问题好像碰到过两次，便再次查询便得到了解决方法</font></p> 
  <p><font color="red" size="5">解决方法：</font><br> <img src="https://img-blog.csdnimg.cn/20200902161359340.png#pic_center" alt="在这里插入图片描述"></p> 
  <p><font color="red" size="5">执行：</font></p> 
  <p>sudo rm /var/cache/apt/archives/lock</p> 
  <p>sudo rm /var/lib/dpkg/lock</p> 
  <p><mark>问题完美解决</mark></p> 
 </div> 
 <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e0530931f4.css" rel="stylesheet"> 
</div>, newsAttr=2, newsImage=https://profile.csdnimg.cn/4/B/A/3_hikd_bn, orderNum=null, isPublic=null, thumbs=11, visits=49, comments=null, collects=11, newsSource=https://blog.csdn.net/HikD_bn, newsSourceAuthor=Hik。, newsSourceTags=linux, status=null, delFlag=null, createBy=null, createTime=null, updateBy=null, updateTime=null, remark=null, beginTime=null, endTime=null, params={}, newsType=null)
2020-09-03 15:19:23.714 WARN  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]o.s.a.rabbit.listener.ConditionalRejectingErrorHandler.log:129 -Execution of Rabbit message listener failed.
org.springframework.amqp.rabbit.support.ListenerExecutionFailedException: Listener method 'public void com.linq.news.task.listener.NewsConsumer.receiveNews(org.springframework.messaging.Message<java.util.HashMap<java.lang.String, java.lang.Object>>,com.rabbitmq.client.Channel) throws java.io.IOException' threw exception
	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:228)
	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandlerAndProcessResult(MessagingMessageListenerAdapter.java:148)
	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.onMessage(MessagingMessageListenerAdapter.java:133)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:1591)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.actualInvokeListener(AbstractMessageListenerContainer.java:1510)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:1498)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:1489)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.executeListener(AbstractMessageListenerContainer.java:1433)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.doReceiveAndExecute(SimpleMessageListenerContainer.java:970)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.receiveAndExecute(SimpleMessageListenerContainer.java:916)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.access$1600(SimpleMessageListenerContainer.java:83)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer$AsyncMessageProcessingConsumer.mainLoop(SimpleMessageListenerContainer.java:1291)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer$AsyncMessageProcessingConsumer.run(SimpleMessageListenerContainer.java:1197)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.linq.common.exception.CustomException: 消息队列消费异常新增新闻'Ubuntu:E: 无法获得锁 /var/lib/dpkg/lock - open (11: 资源暂时不可用) E: 无法锁定管理目录(/var/lib/dpkg/)，是否有其他进程正占用它？'失败，新闻标题已存在
	at com.linq.news.task.listener.NewsConsumer.receiveNews(NewsConsumer.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:171)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:120)
	at org.springframework.amqp.rabbit.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:53)
	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:220)
	... 13 common frames omitted
2020-09-03 15:19:23.869 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:45 -接收到消息的时间----->>> 1599117563869
消费tag->>> 9
从消息队列中拿到数据----------->>>> {csdnNews=LinqNews(newsId=null, userId=1, newsTypeId=18, newsTitle=大数据学习之Shell, newsContent=<div id="article_content" class="article_content clearfix"> 
 <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3d4dc5c1de.css"> 
 <div id="content_views" class="markdown_views prism-atom-one-light"> 
  <!-- flowchart 箭头图标 勿删 --> 
  <svg xmlns="http://www.w3.org/2000/svg" style="display: none;"> 
   <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path> 
  </svg> 
  <h2><a id="1Shell_0"></a>1、Shell概述</h2> 
  <blockquote> 
   <p>我们知道，一台机器是由硬件组装起来的，它还有操作系统，Windows、Linux、Mac等，我们在Linux里面介绍过，而我们今天讲的Shell就是在基于Linux内核的基础上，接收应用程序（用户命令），然后调用起来操作系统的内核来分配资源，进行指令的运行，我们可以参考下图理解</p> 
  </blockquote> 
  <div class="mermaid">
   <svg id="mermaid-svg-NoG3iJVR6vIUfyXn" width="761.3125610351562" xmlns="http://www.w3.org/2000/svg" height="106.078125" viewbox="0 0.000003814697265625 761.3125610351562 106.078125">
    <style>#mermaid-svg-NoG3iJVR6vIUfyXn .label{font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family);fill:#333;color:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .label text{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .node rect,#mermaid-svg-NoG3iJVR6vIUfyXn .node circle,#mermaid-svg-NoG3iJVR6vIUfyXn .node ellipse,#mermaid-svg-NoG3iJVR6vIUfyXn .node polygon,#mermaid-svg-NoG3iJVR6vIUfyXn .node path{fill:#ECECFF;stroke:#9370db;stroke-width:1px}#mermaid-svg-NoG3iJVR6vIUfyXn .node .label{text-align:center;fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .node.clickable{cursor:pointer}#mermaid-svg-NoG3iJVR6vIUfyXn .arrowheadPath{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .edgePath .path{stroke:#333;stroke-width:1.5px}#mermaid-svg-NoG3iJVR6vIUfyXn .flowchart-link{stroke:#333;fill:none}#mermaid-svg-NoG3iJVR6vIUfyXn .edgeLabel{background-color:#e8e8e8;text-align:center}#mermaid-svg-NoG3iJVR6vIUfyXn .edgeLabel rect{opacity:0.9}#mermaid-svg-NoG3iJVR6vIUfyXn .edgeLabel span{color:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .cluster rect{fill:#ffffde;stroke:#aa3;stroke-width:1px}#mermaid-svg-NoG3iJVR6vIUfyXn .cluster text{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family);font-size:12px;background:#ffffde;border:1px solid #aa3;border-radius:2px;pointer-events:none;z-index:100}#mermaid-svg-NoG3iJVR6vIUfyXn .actor{stroke:#ccf;fill:#ECECFF}#mermaid-svg-NoG3iJVR6vIUfyXn text.actor&gt;tspan{fill:#000;stroke:none}#mermaid-svg-NoG3iJVR6vIUfyXn .actor-line{stroke:grey}#mermaid-svg-NoG3iJVR6vIUfyXn .messageLine0{stroke-width:1.5;stroke-dasharray:none;stroke:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .messageLine1{stroke-width:1.5;stroke-dasharray:2, 2;stroke:#333}#mermaid-svg-NoG3iJVR6vIUfyXn #arrowhead path{fill:#333;stroke:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .sequenceNumber{fill:#fff}#mermaid-svg-NoG3iJVR6vIUfyXn #sequencenumber{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn #crosshead path{fill:#333;stroke:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .messageText{fill:#333;stroke:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .labelBox{stroke:#ccf;fill:#ECECFF}#mermaid-svg-NoG3iJVR6vIUfyXn .labelText,#mermaid-svg-NoG3iJVR6vIUfyXn .labelText&gt;tspan{fill:#000;stroke:none}#mermaid-svg-NoG3iJVR6vIUfyXn .loopText,#mermaid-svg-NoG3iJVR6vIUfyXn .loopText&gt;tspan{fill:#000;stroke:none}#mermaid-svg-NoG3iJVR6vIUfyXn .loopLine{stroke-width:2px;stroke-dasharray:2, 2;stroke:#ccf;fill:#ccf}#mermaid-svg-NoG3iJVR6vIUfyXn .note{stroke:#aa3;fill:#fff5ad}#mermaid-svg-NoG3iJVR6vIUfyXn .noteText,#mermaid-svg-NoG3iJVR6vIUfyXn .noteText&gt;tspan{fill:#000;stroke:none}#mermaid-svg-NoG3iJVR6vIUfyXn .activation0{fill:#f4f4f4;stroke:#666}#mermaid-svg-NoG3iJVR6vIUfyXn .activation1{fill:#f4f4f4;stroke:#666}#mermaid-svg-NoG3iJVR6vIUfyXn .activation2{fill:#f4f4f4;stroke:#666}#mermaid-svg-NoG3iJVR6vIUfyXn .mermaid-main-font{font-family:"trebuchet ms", verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn .section{stroke:none;opacity:0.2}#mermaid-svg-NoG3iJVR6vIUfyXn .section0{fill:rgba(102,102,255,0.49)}#mermaid-svg-NoG3iJVR6vIUfyXn .section2{fill:#fff400}#mermaid-svg-NoG3iJVR6vIUfyXn .section1,#mermaid-svg-NoG3iJVR6vIUfyXn .section3{fill:#fff;opacity:0.2}#mermaid-svg-NoG3iJVR6vIUfyXn .sectionTitle0{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .sectionTitle1{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .sectionTitle2{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .sectionTitle3{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .sectionTitle{text-anchor:start;font-size:11px;text-height:14px;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn .grid .tick{stroke:#d3d3d3;opacity:0.8;shape-rendering:crispEdges}#mermaid-svg-NoG3iJVR6vIUfyXn .grid .tick text{font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn .grid path{stroke-width:0}#mermaid-svg-NoG3iJVR6vIUfyXn .today{fill:none;stroke:red;stroke-width:2px}#mermaid-svg-NoG3iJVR6vIUfyXn .task{stroke-width:2}#mermaid-svg-NoG3iJVR6vIUfyXn .taskText{text-anchor:middle;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn .taskText:not([font-size]){font-size:11px}#mermaid-svg-NoG3iJVR6vIUfyXn .taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn .taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}#mermaid-svg-NoG3iJVR6vIUfyXn .task.clickable{cursor:pointer}#mermaid-svg-NoG3iJVR6vIUfyXn .taskText.clickable{cursor:pointer;fill:#003163 !important;font-weight:bold}#mermaid-svg-NoG3iJVR6vIUfyXn .taskTextOutsideLeft.clickable{cursor:pointer;fill:#003163 !important;font-weight:bold}#mermaid-svg-NoG3iJVR6vIUfyXn .taskTextOutsideRight.clickable{cursor:pointer;fill:#003163 !important;font-weight:bold}#mermaid-svg-NoG3iJVR6vIUfyXn .taskText0,#mermaid-svg-NoG3iJVR6vIUfyXn .taskText1,#mermaid-svg-NoG3iJVR6vIUfyXn .taskText2,#mermaid-svg-NoG3iJVR6vIUfyXn .taskText3{fill:#fff}#mermaid-svg-NoG3iJVR6vIUfyXn .task0,#mermaid-svg-NoG3iJVR6vIUfyXn .task1,#mermaid-svg-NoG3iJVR6vIUfyXn .task2,#mermaid-svg-NoG3iJVR6vIUfyXn .task3{fill:#8a90dd;stroke:#534fbc}#mermaid-svg-NoG3iJVR6vIUfyXn .taskTextOutside0,#mermaid-svg-NoG3iJVR6vIUfyXn .taskTextOutside2{fill:#000}#mermaid-svg-NoG3iJVR6vIUfyXn .taskTextOutside1,#mermaid-svg-NoG3iJVR6vIUfyXn .taskTextOutside3{fill:#000}#mermaid-svg-NoG3iJVR6vIUfyXn .active0,#mermaid-svg-NoG3iJVR6vIUfyXn .active1,#mermaid-svg-NoG3iJVR6vIUfyXn .active2,#mermaid-svg-NoG3iJVR6vIUfyXn .active3{fill:#bfc7ff;stroke:#534fbc}#mermaid-svg-NoG3iJVR6vIUfyXn .activeText0,#mermaid-svg-NoG3iJVR6vIUfyXn .activeText1,#mermaid-svg-NoG3iJVR6vIUfyXn .activeText2,#mermaid-svg-NoG3iJVR6vIUfyXn .activeText3{fill:#000 !important}#mermaid-svg-NoG3iJVR6vIUfyXn .done0,#mermaid-svg-NoG3iJVR6vIUfyXn .done1,#mermaid-svg-NoG3iJVR6vIUfyXn .done2,#mermaid-svg-NoG3iJVR6vIUfyXn .done3{stroke:grey;fill:#d3d3d3;stroke-width:2}#mermaid-svg-NoG3iJVR6vIUfyXn .doneText0,#mermaid-svg-NoG3iJVR6vIUfyXn .doneText1,#mermaid-svg-NoG3iJVR6vIUfyXn .doneText2,#mermaid-svg-NoG3iJVR6vIUfyXn .doneText3{fill:#000 !important}#mermaid-svg-NoG3iJVR6vIUfyXn .crit0,#mermaid-svg-NoG3iJVR6vIUfyXn .crit1,#mermaid-svg-NoG3iJVR6vIUfyXn .crit2,#mermaid-svg-NoG3iJVR6vIUfyXn .crit3{stroke:#f88;fill:red;stroke-width:2}#mermaid-svg-NoG3iJVR6vIUfyXn .activeCrit0,#mermaid-svg-NoG3iJVR6vIUfyXn .activeCrit1,#mermaid-svg-NoG3iJVR6vIUfyXn .activeCrit2,#mermaid-svg-NoG3iJVR6vIUfyXn .activeCrit3{stroke:#f88;fill:#bfc7ff;stroke-width:2}#mermaid-svg-NoG3iJVR6vIUfyXn .doneCrit0,#mermaid-svg-NoG3iJVR6vIUfyXn .doneCrit1,#mermaid-svg-NoG3iJVR6vIUfyXn .doneCrit2,#mermaid-svg-NoG3iJVR6vIUfyXn .doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}#mermaid-svg-NoG3iJVR6vIUfyXn .milestone{transform:rotate(45deg) scale(0.8, 0.8)}#mermaid-svg-NoG3iJVR6vIUfyXn .milestoneText{font-style:italic}#mermaid-svg-NoG3iJVR6vIUfyXn .doneCritText0,#mermaid-svg-NoG3iJVR6vIUfyXn .doneCritText1,#mermaid-svg-NoG3iJVR6vIUfyXn .doneCritText2,#mermaid-svg-NoG3iJVR6vIUfyXn .doneCritText3{fill:#000 !important}#mermaid-svg-NoG3iJVR6vIUfyXn .activeCritText0,#mermaid-svg-NoG3iJVR6vIUfyXn .activeCritText1,#mermaid-svg-NoG3iJVR6vIUfyXn .activeCritText2,#mermaid-svg-NoG3iJVR6vIUfyXn .activeCritText3{fill:#000 !important}#mermaid-svg-NoG3iJVR6vIUfyXn .titleText{text-anchor:middle;font-size:18px;fill:#000;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn g.classGroup text{fill:#9370db;stroke:none;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family);font-size:10px}#mermaid-svg-NoG3iJVR6vIUfyXn g.classGroup text .title{font-weight:bolder}#mermaid-svg-NoG3iJVR6vIUfyXn g.clickable{cursor:pointer}#mermaid-svg-NoG3iJVR6vIUfyXn g.classGroup rect{fill:#ECECFF;stroke:#9370db}#mermaid-svg-NoG3iJVR6vIUfyXn g.classGroup line{stroke:#9370db;stroke-width:1}#mermaid-svg-NoG3iJVR6vIUfyXn .classLabel .box{stroke:none;stroke-width:0;fill:#ECECFF;opacity:0.5}#mermaid-svg-NoG3iJVR6vIUfyXn .classLabel .label{fill:#9370db;font-size:10px}#mermaid-svg-NoG3iJVR6vIUfyXn .relation{stroke:#9370db;stroke-width:1;fill:none}#mermaid-svg-NoG3iJVR6vIUfyXn .dashed-line{stroke-dasharray:3}#mermaid-svg-NoG3iJVR6vIUfyXn #compositionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-svg-NoG3iJVR6vIUfyXn #compositionEnd{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-svg-NoG3iJVR6vIUfyXn #aggregationStart{fill:#ECECFF;stroke:#9370db;stroke-width:1}#mermaid-svg-NoG3iJVR6vIUfyXn #aggregationEnd{fill:#ECECFF;stroke:#9370db;stroke-width:1}#mermaid-svg-NoG3iJVR6vIUfyXn #dependencyStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-svg-NoG3iJVR6vIUfyXn #dependencyEnd{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-svg-NoG3iJVR6vIUfyXn #extensionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-svg-NoG3iJVR6vIUfyXn #extensionEnd{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-svg-NoG3iJVR6vIUfyXn .commit-id,#mermaid-svg-NoG3iJVR6vIUfyXn .commit-msg,#mermaid-svg-NoG3iJVR6vIUfyXn .branch-label{fill:lightgrey;color:lightgrey;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn .pieTitleText{text-anchor:middle;font-size:25px;fill:#000;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn .slice{font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn g.stateGroup text{fill:#9370db;stroke:none;font-size:10px;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn g.stateGroup text{fill:#9370db;fill:#333;stroke:none;font-size:10px}#mermaid-svg-NoG3iJVR6vIUfyXn g.statediagram-cluster .cluster-label text{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn g.stateGroup .state-title{font-weight:bolder;fill:#000}#mermaid-svg-NoG3iJVR6vIUfyXn g.stateGroup rect{fill:#ECECFF;stroke:#9370db}#mermaid-svg-NoG3iJVR6vIUfyXn g.stateGroup line{stroke:#9370db;stroke-width:1}#mermaid-svg-NoG3iJVR6vIUfyXn .transition{stroke:#9370db;stroke-width:1;fill:none}#mermaid-svg-NoG3iJVR6vIUfyXn .stateGroup .composit{fill:white;border-bottom:1px}#mermaid-svg-NoG3iJVR6vIUfyXn .stateGroup .alt-composit{fill:#e0e0e0;border-bottom:1px}#mermaid-svg-NoG3iJVR6vIUfyXn .state-note{stroke:#aa3;fill:#fff5ad}#mermaid-svg-NoG3iJVR6vIUfyXn .state-note text{fill:black;stroke:none;font-size:10px}#mermaid-svg-NoG3iJVR6vIUfyXn .stateLabel .box{stroke:none;stroke-width:0;fill:#ECECFF;opacity:0.7}#mermaid-svg-NoG3iJVR6vIUfyXn .edgeLabel text{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .stateLabel text{fill:#000;font-size:10px;font-weight:bold;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn .node circle.state-start{fill:black;stroke:black}#mermaid-svg-NoG3iJVR6vIUfyXn .node circle.state-end{fill:black;stroke:white;stroke-width:1.5}#mermaid-svg-NoG3iJVR6vIUfyXn #statediagram-barbEnd{fill:#9370db}#mermaid-svg-NoG3iJVR6vIUfyXn .statediagram-cluster rect{fill:#ECECFF;stroke:#9370db;stroke-width:1px}#mermaid-svg-NoG3iJVR6vIUfyXn .statediagram-cluster rect.outer{rx:5px;ry:5px}#mermaid-svg-NoG3iJVR6vIUfyXn .statediagram-state .divider{stroke:#9370db}#mermaid-svg-NoG3iJVR6vIUfyXn .statediagram-state .title-state{rx:5px;ry:5px}#mermaid-svg-NoG3iJVR6vIUfyXn .statediagram-cluster.statediagram-cluster .inner{fill:white}#mermaid-svg-NoG3iJVR6vIUfyXn .statediagram-cluster.statediagram-cluster-alt .inner{fill:#e0e0e0}#mermaid-svg-NoG3iJVR6vIUfyXn .statediagram-cluster .inner{rx:0;ry:0}#mermaid-svg-NoG3iJVR6vIUfyXn .statediagram-state rect.basic{rx:5px;ry:5px}#mermaid-svg-NoG3iJVR6vIUfyXn .statediagram-state rect.divider{stroke-dasharray:10,10;fill:#efefef}#mermaid-svg-NoG3iJVR6vIUfyXn .note-edge{stroke-dasharray:5}#mermaid-svg-NoG3iJVR6vIUfyXn .statediagram-note rect{fill:#fff5ad;stroke:#aa3;stroke-width:1px;rx:0;ry:0}:root{--mermaid-font-family: '"trebuchet ms", verdana, arial';--mermaid-font-family: "Comic Sans MS", "Comic Sans", cursive}#mermaid-svg-NoG3iJVR6vIUfyXn .error-icon{fill:#522}#mermaid-svg-NoG3iJVR6vIUfyXn .error-text{fill:#522;stroke:#522}#mermaid-svg-NoG3iJVR6vIUfyXn .edge-thickness-normal{stroke-width:2px}#mermaid-svg-NoG3iJVR6vIUfyXn .edge-thickness-thick{stroke-width:3.5px}#mermaid-svg-NoG3iJVR6vIUfyXn .edge-pattern-solid{stroke-dasharray:0}#mermaid-svg-NoG3iJVR6vIUfyXn .edge-pattern-dashed{stroke-dasharray:3}#mermaid-svg-NoG3iJVR6vIUfyXn .edge-pattern-dotted{stroke-dasharray:2}#mermaid-svg-NoG3iJVR6vIUfyXn .marker{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .marker.cross{stroke:#333}

:root { --mermaid-font-family: "trebuchet ms", verdana, arial;}</style>
    <style>#mermaid-svg-NoG3iJVR6vIUfyXn {
    color: rgba(0, 0, 0, 0.75);
    font: ;
  }</style>
    <g>
     <g class="output">
      <g class="clusters"></g>
      <g class="edgePaths">
       <g class="edgePath LS-A LE-B" id="L-A-B" style="opacity: 1;">
        <path class="path" d="M238.23435974121094,53.0390625L310.61717224121094,53.0390625L382.99998474121094,53.0390625" marker-end="url(#arrowhead5634)" style="fill:none"></path>
        <defs>
         <marker id="arrowhead5634" viewbox="0 0 10 10" refx="9" refy="5" markerunits="strokeWidth" markerwidth="8" markerheight="6" orient="auto">
          <path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path>
         </marker>
        </defs>
       </g>
       <g class="edgePath LS-B LE-D" style="opacity: 1;" id="L-B-D">
        <path class="path" d="M472.6259415661941,46.67305862537887L498.07810974121094,43.0390625L523.0781097412109,44.82328339447467" marker-end="url(#arrowhead5635)" style="fill:none"></path>
        <defs>
         <marker id="arrowhead5635" viewbox="0 0 10 10" refx="9" refy="5" markerunits="strokeWidth" markerwidth="8" markerheight="6" orient="auto">
          <path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path>
         </marker>
        </defs>
       </g>
       <g class="edgePath LS-D LE-B" style="opacity: 1;" id="L-D-B">
        <path class="path" d="M523.0781097412109,61.25484160552533L498.07810974121094,63.0390625L472.6259415661941,59.40506637462113" marker-end="url(#arrowhead5636)" style="fill:none"></path>
        <defs>
         <marker id="arrowhead5636" viewbox="0 0 10 10" refx="9" refy="5" markerunits="strokeWidth" markerwidth="8" markerheight="6" orient="auto">
          <path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path>
         </marker>
        </defs>
       </g>
      </g>
      <g class="edgeLabels">
       <g class="edgeLabel" transform="translate(310.61717224121094,53.0390625)" style="opacity: 1;">
        <g transform="translate(-47.3828125,-18.9765625)" class="label">
         <rect rx="0" ry="0" width="94.765625" height="37.953125" style="fill:#e8e8e8;"></rect>
         <foreignobject width="94.765625" height="37.9599609375">
          <div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">
           <span id="L-L-A-B" class="edgeLabel L-LS-A' L-LE-B">shell脚本</span>
          </div>
         </foreignobject>
        </g>
       </g>
       <g class="edgeLabel" style="opacity: 1;" transform="">
        <g transform="translate(0,0)" class="label">
         <rect rx="0" ry="0" width="0" height="0" style="fill:#e8e8e8;"></rect>
         <foreignobject width="0" height="0">
          <div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">
           <span id="L-L-B-D" class="edgeLabel L-LS-B' L-LE-D"></span>
          </div>
         </foreignobject>
        </g>
       </g>
       <g class="edgeLabel" style="opacity: 1;" transform="">
        <g transform="translate(0,0)" class="label">
         <rect rx="0" ry="0" width="0" height="0" style="fill:#e8e8e8;"></rect>
         <foreignobject width="0" height="0">
          <div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">
           <span id="L-L-D-B" class="edgeLabel L-LS-D' L-LE-B"></span>
          </div>
         </foreignobject>
        </g>
       </g>
      </g>
      <g class="nodes">
       <g class="node default" id="A" transform="translate(123.11717987060547,53.0390625)" style="opacity: 1;">
        <rect rx="0" ry="0" x="-115.1171875" y="-28.9765625" width="230.234375" height="57.953125" class="label-container"></rect>
        <g class="label" transform="translate(0,0)">
         <g transform="translate(-105.1171875,-18.9765625)">
          <foreignobject width="210.24000549316406" height="37.9599609375">
           <div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">
            应用程序或用户命令
           </div>
          </foreignobject>
         </g>
        </g>
       </g>
       <g class="node default" style="opacity: 1;" id="B" transform="translate(428.03904724121094,53.0390625)">
        <circle x="-45.0390625" y="-28.9765625" r="45.0390625" class="label-container"></circle>
        <g class="label" transform="translate(0,0)">
         <g transform="translate(-35.0390625,-18.9765625)">
          <foreignobject width="70.08000183105469" height="37.9599609375">
           <div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">
            服务器
           </div>
          </foreignobject>
         </g>
        </g>
       </g>
       <g class="node default" style="opacity: 1;" id="D" transform="translate(638.1952896118164,53.0390625)">
        <rect rx="0" ry="0" x="-115.1171875" y="-28.9765625" width="230.234375" height="57.953125" class="label-container"></rect>
        <g class="label" transform="translate(0,0)">
         <g transform="translate(-105.1171875,-18.9765625)">
          <foreignobject width="210.24000549316406" height="37.9599609375">
           <div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">
            分配资源及执行脚本
           </div>
          </foreignobject>
         </g>
        </g>
       </g>
      </g>
     </g>
    </g>
   </svg>
  </div> 
  <blockquote> 
   <p>Shell是一个功能相当大的编程语言，易编写、易调试、灵活性强。</p> 
  </blockquote> 
  <ul> 
   <li>Linux自身提供Shell解析器</li> 
  </ul> 
  <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> /etc/shells
/bin/sh
/bin/bash
</code></pre> 
  <ul> 
   <li>bash和sh的关系</li> 
  </ul> 
  <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 bin<span class="token punctuation">]</span>$ ll <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">bash</span>
rwxr-xr-x. 1 root root 941880 5月  11 2016 <span class="token function">bash</span>
lrwxrwxrwx. 1 root root      4 5月  27 2017 sh -<span class="token operator">&gt;</span> <span class="token function">bash</span>
</code></pre> 
  <p>可以看出来sh是bash的软连接</p> 
  <ul> 
   <li>Centos默认的解析器是bash</li> 
  </ul> 
  <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 bin<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$SHELL</span>
/bin/bash
</code></pre> 
  <h2><a id="2Shell_39"></a>2、Shell脚本入门</h2> 
  <ol> 
   <li>脚本格式</li> 
  </ol> 
  <blockquote> 
   <pre><code> 脚本以#!/bin/bash开头(指定的解析器)
</code></pre> 
  </blockquote> 
  <ol start="2"> 
   <li>第一个脚本Shell脚本：helloworld</li> 
  </ol> 
  <blockquote> 
   <p>先创建一个Shell脚本，并且切换到vim编辑模式下</p> 
  </blockquote> 
  <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> helloworld.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim helloworld.sh
</code></pre> 
  <blockquote> 
   <p>对Shell脚本进行编辑</p> 
  </blockquote> 
  <pre><code class="prism language-bash"><span class="token shebang important">#!/bin/bash</span>
<span class="token keyword">echo</span> <span class="token string">"helloworld"</span>
</code></pre> 
  <p>3.脚本常用执行方式</p> 
  <blockquote> 
   <p>①采用bash或sh+脚本的相对路径或绝对路径（不用赋予脚本+x权限）<br> sh+脚本的相对路径和绝对路径</p> 
  </blockquote> 
  <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ sh helloworld.sh 
Helloworld
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ sh /home/atguigu/datas/helloworld.sh 
helloworld
</code></pre> 
  <blockquote> 
   <p>bash+脚本的相对路径和绝对路径</p> 
  </blockquote> 
  <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">bash</span> helloworld.sh 
Helloworld
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">bash</span> /home/atguigu/datas/helloworld.sh 
Helloworld
</code></pre> 
  <blockquote> 
   <p>②采用输入脚本的绝对路径或相对路径执行脚本（必须具有可执行权限+x）</p> 
  </blockquote> 
  <blockquote> 
   <p>(a)首先要赋予helloworld.sh 脚本的+x权限</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 744 helloworld.sh
</code></pre> 
   <p>(b)执行脚本<br> 相对路径</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./helloworld.sh 
Helloworld
</code></pre> 
   <p>绝对路径</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ /home/atguigu/datas/helloworld.sh 
Helloworld
</code></pre> 
  </blockquote> 
  <blockquote> 
   <p>注意：第一种执行方法，本质是bash解析器帮你执行脚本，所以脚本本身不需要执行权限。第二种执行方法，本质是脚本需要自己执行，所以需要执行权限。</p> 
  </blockquote> 
  <blockquote> 
   <p>③在脚本的路径前加上“.”<br> （a）有以下脚本</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">cat</span> test1.sh 
<span class="token comment">#! /bin/bash</span>
A<span class="token operator">=</span><span class="token string">"hello"</span>
</code></pre> 
   <p>(b) 分别使用sh,bash,./ 和 . 的方式来执行，结果如下：</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">bash</span> test1.sh 
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$A</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ sh test1.sh 
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$A</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./test1.sh 
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$A</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">.</span> test1.sh 
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$A</span>
hello
</code></pre> 
  </blockquote> 
  <blockquote> 
   <p>以上三种方式的区别：<br> 前两种方式都是在当前shell中打开一个子shell来执行脚本内容，当脚本内容结束，则子shell关闭，回到父shell中。<br> 第三种，也就是使用在脚本路径前加.的方式，可以使脚本内容在当前shell里执行，而无需打开子shell！<br> 开子shell与不开子shell的区别就在于，环境变量的继承关系，如在子shell中设置的当前变量，父shell是不可见的。</p> 
  </blockquote> 
  <h2><a id="3_116"></a>3、变量</h2> 
  <p>1.常用系统变量</p> 
  <blockquote> 
   <p>常用的系统变量</p> 
   <pre><code class="prism language-bash"><span class="token variable">$HOME</span>、<span class="token variable">$PWD</span>、<span class="token variable">$SHELL</span>、<span class="token variable">$USER</span>等
</code></pre> 
  </blockquote> 
  <p>2.自定义变量</p> 
  <blockquote> 
   <p>①基本语法<br> （a）定义变量：变量=值<br> （b）撤销变量：unset变量<br> （c）声明静态变量：readonly变量，注意：不能unset<br> ②变量定义规则<br> （a）变量名称可以由字母、数字和下划线组成，但是不能以数字开头，环境变量名建议大写。<br> （b）等号两侧不能有空格<br> （c）在bash中，变量默认类型都是字符串类型，无法直接进行数值运算。<br> （d）变量的值如果有空格，需要使用双引号或单引号括起来。<br> ③案例实操<br> 定义变量A</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ A<span class="token operator">=</span>5
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$A</span>
5
</code></pre> 
   <p>给变量A重新赋值</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ A<span class="token operator">=</span>8
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$A</span>
8
</code></pre> 
   <p>撤销变量A</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ unset A
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$A</span>
</code></pre> 
   <p>声明静态的变量B=2，不能unset</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">readonly</span> B<span class="token operator">=</span>2
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$B</span>
2
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ B<span class="token operator">=</span>9
-bash: B: <span class="token function">readonly</span> variable
</code></pre> 
   <p>在bash中，变量默认类型都是字符串类型，无法直接进行数值运算</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 ~<span class="token punctuation">]</span>$ C<span class="token operator">=</span>1+2
<span class="token punctuation">[</span>root@hadoop101 ~<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$C</span>
1+2
</code></pre> 
   <p>变量的值如果有空格，需要使用双引号或单引号括起来</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 ~<span class="token punctuation">]</span>$ D<span class="token operator">=</span>I love banzhang
-bash: world: <span class="token function">command</span> not found
<span class="token punctuation">[</span>root@hadoop101 ~<span class="token punctuation">]</span>$ D<span class="token operator">=</span><span class="token string">"I love banzhang"</span>
<span class="token punctuation">[</span>root@hadoop101 ~<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$D</span>
I love banzhang
</code></pre> 
   <p>可把变量提升为全局环境变量，可供其他Shell程序使用<br> export 变量名</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim helloworld.sh 
</code></pre> 
   <p>在helloworld文件中增加echo$B</p> 
   <pre><code class="prism language-bash"><span class="token shebang important">#!/bin/bash</span>
<span class="token keyword">echo</span> <span class="token string">"helloworld"</span>
<span class="token keyword">echo</span> <span class="token variable">$B</span>
</code></pre> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./helloworld.sh 
Helloworld
</code></pre> 
   <p>发现并没有打印输出变量B的值。</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">export</span> B
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./helloworld.sh 
helloworld
2
</code></pre> 
  </blockquote> 
  <p>3.特殊变量</p> 
  <blockquote> 
   <p>(1)$n<br> ①基本语法<br> $n （功能描述：n为数字，$0代表该脚本名称，$1-<span class="katex--inline"><span class="katex"><span class="katex-mathml">
       <math>
        <semantics>
         <mrow>
          <mn>
           9
          </mn>
          <mi mathvariant="normal">
           代
          </mi>
          <mi mathvariant="normal">
           表
          </mi>
          <mi mathvariant="normal">
           第
          </mi>
          <mi mathvariant="normal">
           一
          </mi>
          <mi mathvariant="normal">
           到
          </mi>
          <mi mathvariant="normal">
           第
          </mi>
          <mi mathvariant="normal">
           九
          </mi>
          <mi mathvariant="normal">
           个
          </mi>
          <mi mathvariant="normal">
           参
          </mi>
          <mi mathvariant="normal">
           数
          </mi>
          <mi mathvariant="normal">
           ，
          </mi>
          <mi mathvariant="normal">
           十
          </mi>
          <mi mathvariant="normal">
           以
          </mi>
          <mi mathvariant="normal">
           上
          </mi>
          <mi mathvariant="normal">
           的
          </mi>
          <mi mathvariant="normal">
           参
          </mi>
          <mi mathvariant="normal">
           数
          </mi>
          <mi mathvariant="normal">
           ，
          </mi>
          <mi mathvariant="normal">
           十
          </mi>
          <mi mathvariant="normal">
           以
          </mi>
          <mi mathvariant="normal">
           上
          </mi>
          <mi mathvariant="normal">
           的
          </mi>
          <mi mathvariant="normal">
           参
          </mi>
          <mi mathvariant="normal">
           数
          </mi>
          <mi mathvariant="normal">
           需
          </mi>
          <mi mathvariant="normal">
           要
          </mi>
          <mi mathvariant="normal">
           用
          </mi>
          <mi mathvariant="normal">
           大
          </mi>
          <mi mathvariant="normal">
           括
          </mi>
          <mi mathvariant="normal">
           号
          </mi>
          <mi mathvariant="normal">
           包
          </mi>
          <mi mathvariant="normal">
           含
          </mi>
          <mi mathvariant="normal">
           ，
          </mi>
          <mi mathvariant="normal">
           如
          </mi>
         </mrow>
         <annotation encoding="application/x-tex">
          9代表第一到第九个参数，十以上的参数，十以上的参数需要用大括号包含，如
         </annotation>
        </semantics>
       </math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.64444em; vertical-align: 0em;"></span><span class="mord">9</span><span class="mord cjk_fallback">代</span><span class="mord cjk_fallback">表</span><span class="mord cjk_fallback">第</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">到</span><span class="mord cjk_fallback">第</span><span class="mord cjk_fallback">九</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">参</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">十</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">上</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">参</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">十</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">上</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">参</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">需</span><span class="mord cjk_fallback">要</span><span class="mord cjk_fallback">用</span><span class="mord cjk_fallback">大</span><span class="mord cjk_fallback">括</span><span class="mord cjk_fallback">号</span><span class="mord cjk_fallback">包</span><span class="mord cjk_fallback">含</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">如</span></span></span></span></span>{10}）<br> ②案例实操</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> parameter.sh 
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim parameter.sh
<span class="token comment">#!/bin/bash</span>
<span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$0</span> <span class="token variable">$1</span> <span class="token variable">$2</span>"</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 777 parameter.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./parameter.sh cls  xz
./parameter.sh  cls   xz
</code></pre> 
   <p>(2) $#<br> ①基本语法<br> $# （功能描述：获取所有输入参数个数，常用于循环）。<br> ②案例实操</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim parameter.sh
<span class="token comment">#!/bin/bash</span>
<span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$0</span> <span class="token variable">$1</span> <span class="token variable">$2</span>"</span>
<span class="token keyword">echo</span> $<span class="token comment">#</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 777 parameter.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./parameter.sh cls  xz
parameter.sh cls xz 
2
</code></pre> 
   <p>(3)</p> 
   <pre><code class="prism language-bash"><span class="token variable">$*</span>、<span class="token variable">$@</span>
</code></pre> 
   <p>①基本语法</p> 
   <pre><code class="prism language-bash"><span class="token variable">$*</span>	（功能描述：这个变量代表命令行中所有的参数，<span class="token variable">$*</span>把所有的参数看成一个整体）
<span class="token variable">$@</span>	（功能描述：这个变量也代表命令行中所有的参数，不过<span class="token variable">$@</span>把每个参数区分对待）
</code></pre> 
   <p>②案例实操</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim parameter.sh
<span class="token comment">#!/bin/bash</span>
<span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$0</span> <span class="token variable">$1</span> <span class="token variable">$2</span>"</span>
<span class="token keyword">echo</span> $<span class="token comment">#</span>
<span class="token keyword">echo</span> <span class="token variable">$*</span>
<span class="token keyword">echo</span> <span class="token variable">$@</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">bash</span> parameter.sh 1 2 3
parameter.sh  1   2
3
1 2 3
1 2 3
</code></pre> 
   <p>(4) $？<br> ①基本语法<br> $？ （功能描述：最后一次执行的命令的返回状态。如果这个变量的值为0，证明上一个命令正确执行；如果这个变量的值为非0（具体是哪个数，由命令自己来决定），则证明上一个命令执行不正确了。）<br> ②案例实操</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./helloworld.sh 
hello world
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$?</span>
0
</code></pre> 
  </blockquote> 
  <h2><a id="4_256"></a>4、运算符</h2> 
  <blockquote> 
   <p>(1)基本语法<br> $((运算式))或<br> $[运算式]<br> (2)案例实操</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span><span class="token comment"># S=$[(2+3)*4]</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span><span class="token comment"># echo $S</span>
</code></pre> 
  </blockquote> 
  <h2><a id="5_265"></a>5、条件判断</h2> 
  <blockquote> 
   <p>(1)基本语法<br> ①test condition<br> ②[ condition ]（注意condition前后要有空格）<br> (2)常用判断条件<br> ①两个整数之间比较<br> -lt 小于 -le 小于等于<br> -eq 等于 -gt 大于<br> -ge 大于等于） -ne 不等于<br> ②按照文件权限进行判断<br> -r 有读的权限（read） -w 有写的权限（write）<br> -x 有执行的权限（execute）<br> ③按照文件类型进行判断<br> -f 文件存在并且是一个常规的文件（file）<br> -e 文件存在（existence） -d 文件存在并是一个目录（directory）<br> (3)案例实操<br> ①23是否大于等于22</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token punctuation">[</span> 23 -ge 22 <span class="token punctuation">]</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$?</span>
0
</code></pre> 
   <p>②helloworld.sh是否具有写权限</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token punctuation">[</span> -w helloworld.sh <span class="token punctuation">]</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$?</span>
0
</code></pre> 
   <p>③/home/atguigu/cls.txt目录中的文件是否存在</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token punctuation">[</span> -e /home/atguigu/cls.txt <span class="token punctuation">]</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$?</span>
1
</code></pre> 
   <p>④多条件判断（&amp;&amp; 表示前一条命令执行成功时，才执行后一条命令，|| 表示上一条命令执行失败后，才执行下一条命令）</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 ~<span class="token punctuation">]</span>$ <span class="token punctuation">[</span> condition <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">echo</span> OK <span class="token operator">||</span> <span class="token keyword">echo</span> notok
OK
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token punctuation">[</span> condition <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token keyword">echo</span> notok
notok
</code></pre> 
  </blockquote> 
  <h2><a id="6_307"></a>6、流程控制</h2> 
  <p>1.if判断</p> 
  <blockquote> 
   <p>(1)基本语法<br> （1）单分支<br> if [ 条件判断式 ];then<br> 程序<br> fi<br> 或者<br> if [ 条件判断式 ]<br> then<br> 程序<br> fi<br> （2）多分支<br> if [ 条件判断式 ]<br> then<br> 程序<br> elif [ 条件判断式 ]<br> then<br> 程序<br> else<br> 程序<br> fi</p> 
  </blockquote> 
  <blockquote> 
   <p>注意事项：<br> （1）[ 条件判断式 ]，中括号和条件判断式之间必须有空格<br> （2）if后要有空格</p> 
  </blockquote> 
  <blockquote> 
   <p>(2)实例实操<br> 输入一个数字，如果是1，则输出banzhang zhen shuai，如果是2，则输出cls zhen mei，如果是其它，什么也不输出。</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> if.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim if.sh
<span class="token comment">#!/bin/bash</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$1</span> -eq <span class="token string">"1"</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
      <span class="token keyword">echo</span> <span class="token string">"banzhang zhen shuai"</span>
<span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$1</span> -eq <span class="token string">"2"</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
      <span class="token keyword">echo</span> <span class="token string">"cls zhen mei"</span>
<span class="token keyword">fi</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 777 if.sh 
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./if.sh 1
banzhang zhen shuai
</code></pre> 
  </blockquote> 
  <p>2.case</p> 
  <blockquote> 
   <p>(1)基本语法<br> case $变量名 in<br> “值1”）<br> 如果变量的值等于值1，则执行程序1<br> ;;<br> “值2”）<br> 如果变量的值等于值2，则执行程序2<br> ;;<br> …省略其他分支…<br> *）<br> 如果变量的值都不是以上的值，则执行此程序<br> ;;<br> esac</p> 
  </blockquote> 
  <blockquote> 
   <p>注意事项：<br> （1）case行尾必须为单词“in”，每一个模式匹配必须以右括号“）”结束。<br> （2）双分号“;;”表示命令序列结束，相当于java中的break。<br> （3）最后的“*）”表示默认模式，相当于java中的default。</p> 
  </blockquote> 
  <blockquote> 
   <p>(2)案例实操<br> 输入一个数字，如果是1，则输出banzhang，如果是2，则输出cls，如果是其它，输出songsong。</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> case.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim case.sh
<span class="token operator">!</span>/bin/bash
<span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span>
<span class="token string">"1"</span><span class="token punctuation">)</span>
      <span class="token keyword">echo</span> <span class="token string">"banzhang"</span>
<span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token string">"2"</span><span class="token punctuation">)</span>
      <span class="token keyword">echo</span> <span class="token string">"cls"</span>
<span class="token punctuation">;</span><span class="token punctuation">;</span>
*<span class="token punctuation">)</span>
      <span class="token keyword">echo</span> <span class="token string">"songsong"</span>
<span class="token punctuation">;</span><span class="token punctuation">;</span>
esac
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 777 case.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./case.sh 1
1
</code></pre> 
  </blockquote> 
  <p>3.for循环</p> 
  <blockquote> 
   <p>(1)基本语法<br> for (( 初始值;循环控制条件;变量变化 ))<br> do<br> 程序<br> done<br> 或者<br> for 变量 in 值1 值2 值3…<br> do<br> 程序<br> done<br> (2)案例实操 从1加到100</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> for1.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim for1.sh
<span class="token comment">#!/bin/bash</span>
s<span class="token operator">=</span>0
<span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span>
<span class="token keyword">do</span>
      s<span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$s</span>+<span class="token variable">$i</span><span class="token punctuation">]</span>
<span class="token keyword">done</span>
<span class="token keyword">echo</span> <span class="token variable">$s</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 777 for1.sh 
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./for1.sh 
“5050”
</code></pre> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> for2.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim for2.sh
<span class="token comment">#!/bin/bash</span>
<span class="token comment">#打印数字</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable">$*</span>
  <span class="token keyword">do</span>
   <span class="token keyword">echo</span> <span class="token string">"ban zhang love <span class="token variable">$i</span> "</span>
<span class="token keyword">done</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 777 for2.sh 
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">bash</span> for2.sh cls xz bd
ban zhang love cls
ban zhang love xz
ban zhang love bd
</code></pre> 
   <p>(3)</p> 
   <pre><code class="prism language-bash"><span class="token comment">#比较比较“$*”和“$@”区别</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim for.sh
<span class="token comment">#!/bin/bash </span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$*</span>"</span> 
<span class="token comment">#$*中的所有参数看成是一个整体，所以这个for循环只会循环一次 </span>
      <span class="token keyword">do</span> 
             <span class="token keyword">echo</span> <span class="token string">"ban zhang love <span class="token variable">$i</span>"</span>
    <span class="token keyword">done</span> 
<span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$@</span>"</span> 
<span class="token comment">#$@中的每个参数都看成是独立的，所以“$@”中有几个参数，就会循环几次 </span>
      <span class="token keyword">do</span> 
             <span class="token keyword">echo</span> <span class="token string">"ban zhang love <span class="token variable">$j</span>"</span> 
<span class="token keyword">done</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 777 for.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">bash</span> for.sh cls xz bd
ban zhang love cls xz bd
ban zhang love cls
ban zhang love xz
ban zhang love bd
</code></pre> 
  </blockquote> 
  <p>4.while循环</p> 
  <blockquote> 
   <p>(1)基本语法<br> while [ 条件判断式 ]<br> do<br> 程序<br> done<br> (2)案例实操<br> 从1加到100</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> while.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim while.sh
<span class="token comment">#!/bin/bash</span>
s<span class="token operator">=</span>0
i<span class="token operator">=</span>1
<span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token variable">$i</span> -le 100 <span class="token punctuation">]</span>
<span class="token keyword">do</span>
      s<span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$s</span>+<span class="token variable">$i</span><span class="token punctuation">]</span>
     i<span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$i</span>+1<span class="token punctuation">]</span>
<span class="token keyword">done</span>
<span class="token keyword">echo</span> <span class="token variable">$s</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 777 while.sh 
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./while.sh 
5050
</code></pre> 
  </blockquote> 
  <h2><a id="7_479"></a>7、读取控制台输出</h2> 
  <blockquote> 
   <p>(1)基本语法<br> read(选项)(参数)<br> 选项：<br> -p：指定读取值时的提示符；<br> -t：指定读取值时等待的时间（秒）。<br> 参数<br> 变量：指定读取值的变量名<br> (2)案例实操<br> 提示7秒内，读取控制台输入的名称</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> read.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim read.sh
<span class="token comment">#!/bin/bash</span>
<span class="token function">read</span> -t 7 -p <span class="token string">"Enter your name in 7 seconds "</span> NAME
<span class="token keyword">echo</span> <span class="token variable">$NAME</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./read.sh 
Enter your name <span class="token keyword">in</span> 7 seconds xiaoze
xiaoze
</code></pre> 
  </blockquote> 
  <h2><a id="8_499"></a>8、函数</h2> 
  <p>1.系统函数</p> 
  <blockquote> 
   <p>(1)basename<br> ①基本语法<br> basename [string / pathname] [suffix] （功能描述：basename命令会删掉所有的前缀包括最后一个（‘/’）字符，然后将字符串显示出来。<br> ②案例实操<br> 截取该/home/atguigu/banzhang.txt路径的文件名称</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">basename</span> /home/atguigu/banzhang.txt 
banzhang.txt
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">basename</span> /home/atguigu/banzhang.txt .txt
banzhang
</code></pre> 
   <p>(2)dirname<br> ①基本语法<br> dirname 文件绝对路径 （功能描述：从给定的包含绝对路径的文件名中去除文件名（非目录的部分），然后返回剩下的路径（目录的部分））<br> ②案例实操<br> 获取banzhang.txt文件的路径</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 ~<span class="token punctuation">]</span>$ <span class="token function">dirname</span> /home/atguigu/banzhang.txt 
/home/atguigu
</code></pre> 
  </blockquote> 
  <p>2.自定义函数</p> 
  <blockquote> 
   <p>(1)基本语法<br> [ function ] funname[()]<br> {<br> Action;<br> [return int;]<br> }<br> funname<br> (2)案例实操</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> fun.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim fun.sh
<span class="token comment">#!/bin/bash</span>
<span class="token keyword">function</span> sum<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
s<span class="token operator">=</span>0
 s<span class="token operator">=</span>$<span class="token punctuation">[</span> <span class="token variable">$1</span> + <span class="token variable">$2</span> <span class="token punctuation">]</span>
  <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$s</span>"</span>
<span class="token punctuation">}</span>
<span class="token function">read</span> -p <span class="token string">"Please input the number1: "</span> n1<span class="token punctuation">;</span>
<span class="token function">read</span> -p <span class="token string">"Please input the number2: "</span> n2<span class="token punctuation">;</span>
<span class="token function">sum</span> <span class="token variable">$n1</span> <span class="token variable">$n2</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 777 fun.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./fun.sh 
Please input the number1: 2
Please input the number2: 5
7
</code></pre> 
  </blockquote> 
  <h2><a id="9Shell_549"></a>9、Shell工具</h2> 
  <p>1.cut</p> 
  <blockquote> 
   <p>cut的工作就是“剪”，具体的说就是在文件中负责剪切数据用的。cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段输出。<br> (1)基本语法<br> cut [选项参数] filename<br> 说明：默认分隔符是制表符<br> (2)选项参数</p> 
  </blockquote> 
  <table> 
   <thead> 
    <tr> 
     <th>选项参数</th> 
     <th>功能</th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <td>-f</td> 
     <td>列号，提取第几列</td> 
    </tr> 
    <tr> 
     <td>-d</td> 
     <td>分隔符，按照指定分隔符分割列</td> 
    </tr> 
    <tr> 
     <td>-c</td> 
     <td>指定具体的字符</td> 
    </tr> 
   </tbody> 
  </table>
  <blockquote> 
   <p>(3)案例实操<br> ①数据准备</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> cut.txt
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim cut.txt
dong shen
guan zhen
wo  wo
lai  lai
le  le
</code></pre> 
   <p>②切割cut.txt第一列</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">cut</span> -d <span class="token string">" "</span> -f 1 cut.txt 
dong
guan
wo
lai
le
</code></pre> 
   <p>③切割cut.txt第二、三列</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">cut</span> -d <span class="token string">" "</span> -f 2,3 cut.txt 
shen
zhen
	wo
	lai
	le
</code></pre> 
   <p>④在cut.txt文件中切割出guan</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">cat</span> cut.txt <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"guan"</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">" "</span> -f 1
guan
</code></pre> 
   <p>⑤选取系统PATH变量值，第2个“：”开始后的所有路径：</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$PATH</span>
/usr/lib64/qt-3.3/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/atguigu/bin
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$PATH</span> <span class="token operator">|</span> <span class="token function">cut</span> -d: -f 3-
/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/atguigu/bin
</code></pre> 
   <p>⑥切割ifconfig 后打印的IP地址</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">ifconfig</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"netmask"</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"t"</span> -f 2 
<span class="token operator">|</span><span class="token function">cut</span> -d <span class="token string">" "</span> -f 2
</code></pre> 
  </blockquote> 
  <p>2.sed</p> 
  <blockquote> 
   <p>sed是一种流编辑器，它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”，接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有改变，除非你使用重定向存储输出。<br> (1)基本语法<br> sed [选项参数] ‘command’ filename<br> (2)选项参数说明</p> 
  </blockquote> 
  <table> 
   <thead> 
    <tr> 
     <th>选项参数</th> 
     <th>功能</th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <td>-e</td> 
     <td>直接在指令列模式上进行sed的动作编辑。</td> 
    </tr> 
    <tr> 
     <td>-i</td> 
     <td>直接编辑文件</td> 
    </tr> 
   </tbody> 
  </table> 
  <table> 
   <thead> 
    <tr> 
     <th>命令</th> 
     <th>功能描述</th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <td>a</td> 
     <td>新增，a的后面可以接字串，在下一行出现</td> 
    </tr> 
    <tr> 
     <td>d</td> 
     <td>删除</td> 
    </tr> 
    <tr> 
     <td>s</td> 
     <td>查找并替换</td> 
    </tr> 
   </tbody> 
  </table>
  <blockquote> 
   <p>(3)案例实操<br> ①数据准备</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> sed.txt
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim sed.txt
dong shen
guan zhen
wo  wo
lai  lai

le  le
</code></pre> 
   <p>②将“mei nv”这个单词插入到sed.txt第二行下，打印。</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">sed</span> <span class="token string">'2a mei nv'</span> sed.txt 
dong shen
guan zhen
mei nv
wo  wo
lai  lai

le  le
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">cat</span> sed.txt 
dong shen
guan zhen
wo  wo
lai  lai

le  le
···
<span class="token comment">#注意：文件并没有改变</span>
③删除sed.txt文件所有包含wo的行
```bash
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">sed</span> <span class="token string">'/wo/d'</span> sed.txt
dong shen
guan zhen
lai  lai

le  le
</code></pre> 
   <p>④将sed.txt文件中wo替换为ni</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">sed</span> <span class="token string">'s/wo/ni/g'</span> sed.txt 
dong shen
guan zhen
ni  ni
lai  lai

le  le
</code></pre> 
   <p>⑤将sed.txt文件中的第二行删除并将wo替换为ni</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">sed</span> -e <span class="token string">'2d'</span> -e <span class="token string">'s/wo/ni/g'</span> sed.txt 
dong shen
ni  ni
lai  lai

le  le
</code></pre> 
  </blockquote> 
  <p>3.awk(重点)</p> 
  <blockquote> 
   <p>一个强大的文本分析工具，把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行分析处理。<br> (1)基本语法<br> awk [选项参数] ‘pattern1{action1} pattern2{action2}…’ filename<br> pattern：表示AWK在数据中查找的内容，就是匹配模式<br> action：在找到匹配内容时所执行的一系列命令<br> (2)选项说明</p> 
  </blockquote> 
  <table> 
   <thead> 
    <tr> 
     <th>选项参数</th> 
     <th>功能</th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <td>-F</td> 
     <td>指定输入文件折分隔符</td> 
    </tr> 
    <tr> 
     <td>-v</td> 
     <td>赋值一个用户定义变量</td> 
    </tr> 
   </tbody> 
  </table>
  <blockquote> 
   <p>(3)案例实操<br> ①数据准备</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">sudo</span> <span class="token function">cp</span> /etc/passwd ./
</code></pre> 
   <p>②搜索passwd文件以root关键字开头的所有行，并输出该行的第7列。</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">awk</span> -F: <span class="token string">'/^root/{print <span class="token variable">$7</span>}'</span> <span class="token function">passwd</span> 
/bin/bash
</code></pre> 
   <p>③搜索passwd文件以root关键字开头的所有行，并输出该行的第1列和第7列，中间以“，”号分割。</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">awk</span> -F: <span class="token string">'/^root/{print <span class="token variable">$1</span>","<span class="token variable">$7</span>}'</span> <span class="token function">passwd</span> 
root,/bin/bash
</code></pre> 
   <p>④只显示/etc/passwd的第一列和第七列，以逗号分割，且在所有行前面添加列名user，shell在最后一行添加"ltc，/bin/zuishuai"。</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">awk</span> -F <span class="token keyword">:</span> <span class="token string">'BEGIN{print "user, shell"} {print <span class="token variable">$1</span>","<span class="token variable">$7</span>} END{print "dahaige,/bin/zuishuai"}'</span> <span class="token function">passwd</span>
user, shell
root,/bin/bash
bin,/sbin/nologin
。。。
atguigu,/bin/bash
ltc,/bin/zuishuai
<span class="token comment">#注意:BEGIN 在所有数据读取行之前执行；END 在所有数据执行之后执行。</span>
</code></pre> 
   <p>⑤将passwd文件中的用户id增加数值1并输出</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">awk</span> -v i<span class="token operator">=</span>1 -F: <span class="token string">'{print <span class="token variable">$3</span>+i}'</span> <span class="token function">passwd</span>
1
2
3
4
</code></pre> 
   <p>(4)awk的内置变量</p> 
  </blockquote> 
  <table> 
   <thead> 
    <tr> 
     <th>变量</th> 
     <th>说明</th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <td>FILENAME</td> 
     <td>文件名</td> 
    </tr> 
    <tr> 
     <td>NR</td> 
     <td>已读的记录数</td> 
    </tr> 
    <tr> 
     <td>NF</td> 
     <td>浏览记录的域的个数（切割后，列的个数）</td> 
    </tr> 
   </tbody> 
  </table>
  <blockquote> 
   <p>(5)案例实操<br> ①统计passwd文件名，每行的行号，每行的列数</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">awk</span> -F: <span class="token string">'{print "filename:" FILENAME ", linenumber:" NR ",columns:" NF}'</span> <span class="token function">passwd</span> 
filename:passwd, linenumber:1,columns:7
filename:passwd, linenumber:2,columns:7
filename:passwd, linenumber:3,columns:7
</code></pre> 
   <p>②切割IP</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">ifconfig</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"netmask"</span> <span class="token operator">|</span> <span class="token function">awk</span> -F <span class="token string">"inet"</span> 
<span class="token string">'{print <span class="token variable">$2</span>}'</span> <span class="token operator">|</span> <span class="token function">awk</span> -F <span class="token string">" "</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span>
</code></pre> 
   <p>③查询sed.txt中空行所在的行号</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">awk</span> <span class="token string">'/^$/{print NR}'</span> sed.txt 
5
</code></pre> 
  </blockquote> 
  <p>4.sort</p> 
  <blockquote> 
   <p>(1)基本语法<br> sort(选项)(参数)</p> 
  </blockquote> 
  <blockquote> 
   <p>(2)选项参数说明</p> 
  </blockquote> 
  <table> 
   <thead> 
    <tr> 
     <th>选项</th> 
     <th>说明</th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <td>-n</td> 
     <td>依照数值的大小排序</td> 
    </tr> 
    <tr> 
     <td>-r</td> 
     <td>以相反的顺序来排序</td> 
    </tr> 
    <tr> 
     <td>-t</td> 
     <td>设置排序时所用的分隔字符</td> 
    </tr> 
    <tr> 
     <td>-k</td> 
     <td>指定需要排序的列</td> 
    </tr> 
   </tbody> 
  </table>
  <blockquote> 
   <p>(3)案例实操<br> ①数据准备</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> sort.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim sort.sh 
bb:40:5.4
bd:20:4.2
xz:50:2.3
cls:10:3.5
ss:30:1.6
</code></pre> 
   <p>②按照“：”分割后的第三列倒序排序。</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">sort</span> -t <span class="token keyword">:</span> -nrk 3  sort.sh 
bb:40:5.4
bd:20:4.2
cls:10:3.5
xz:50:2.3
ss:30:1.6
</code></pre> 
  </blockquote> 
  <p>5.wc</p> 
  <blockquote> 
   <p>(1)基本语法<br> wc [选项参数] filename</p> 
  </blockquote> 
  <blockquote> 
   <p>(2)选项参数</p> 
  </blockquote> 
  <table> 
   <thead> 
    <tr> 
     <th>选项参数</th> 
     <th>功能</th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <td>-l</td> 
     <td>统计文件行数</td> 
    </tr> 
    <tr> 
     <td>-w</td> 
     <td>统计文件的单词数</td> 
    </tr> 
    <tr> 
     <td>-m</td> 
     <td>统计文件的字符数</td> 
    </tr> 
    <tr> 
     <td>-c</td> 
     <td>统计文件的字节数</td> 
    </tr> 
   </tbody> 
  </table>
  <blockquote> 
   <p>(3)案例实操<br> 统计/etc/profile文件的行数、单词数、字节数！</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span><span class="token comment"># wc -w /etc/profile </span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span><span class="token comment"># wc -l /etc/profile </span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span><span class="token comment"># wc -m /etc/profile</span>
</code></pre> 
  </blockquote> 
  <h2><a id="10_811"></a>10、正则表达式</h2> 
  <blockquote> 
   <p>正则表达式我认为很重要，下次专门找个时间做🙂</p> 
  </blockquote> 
 </div> 
 <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e0530931f4.css" rel="stylesheet"> 
</div>, newsAttr=2, newsImage=https://profile.csdnimg.cn/B/7/4/3_qq_43182741, orderNum=null, isPublic=null, thumbs=10, visits=2, comments=null, collects=10, newsSource=https://blog.csdn.net/qq_43182741, newsSourceAuthor=爱学习的老冰棍, newsSourceTags=shell,大数据, status=null, delFlag=null, createBy=null, createTime=null, updateBy=null, updateTime=null, remark=null, beginTime=null, endTime=null, params={}, newsType=null)}
2020-09-03 15:19:23.874 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:50 -获取peNews--->>>null
2020-09-03 15:19:23.875 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:51 -获取entertainmentNews--->>>null
2020-09-03 15:19:23.875 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:52 -获取csdnNews--->>>LinqNews(newsId=null, userId=1, newsTypeId=18, newsTitle=大数据学习之Shell, newsContent=<div id="article_content" class="article_content clearfix"> 
 <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3d4dc5c1de.css"> 
 <div id="content_views" class="markdown_views prism-atom-one-light"> 
  <!-- flowchart 箭头图标 勿删 --> 
  <svg xmlns="http://www.w3.org/2000/svg" style="display: none;"> 
   <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path> 
  </svg> 
  <h2><a id="1Shell_0"></a>1、Shell概述</h2> 
  <blockquote> 
   <p>我们知道，一台机器是由硬件组装起来的，它还有操作系统，Windows、Linux、Mac等，我们在Linux里面介绍过，而我们今天讲的Shell就是在基于Linux内核的基础上，接收应用程序（用户命令），然后调用起来操作系统的内核来分配资源，进行指令的运行，我们可以参考下图理解</p> 
  </blockquote> 
  <div class="mermaid">
   <svg id="mermaid-svg-NoG3iJVR6vIUfyXn" width="761.3125610351562" xmlns="http://www.w3.org/2000/svg" height="106.078125" viewbox="0 0.000003814697265625 761.3125610351562 106.078125">
    <style>#mermaid-svg-NoG3iJVR6vIUfyXn .label{font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family);fill:#333;color:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .label text{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .node rect,#mermaid-svg-NoG3iJVR6vIUfyXn .node circle,#mermaid-svg-NoG3iJVR6vIUfyXn .node ellipse,#mermaid-svg-NoG3iJVR6vIUfyXn .node polygon,#mermaid-svg-NoG3iJVR6vIUfyXn .node path{fill:#ECECFF;stroke:#9370db;stroke-width:1px}#mermaid-svg-NoG3iJVR6vIUfyXn .node .label{text-align:center;fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .node.clickable{cursor:pointer}#mermaid-svg-NoG3iJVR6vIUfyXn .arrowheadPath{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .edgePath .path{stroke:#333;stroke-width:1.5px}#mermaid-svg-NoG3iJVR6vIUfyXn .flowchart-link{stroke:#333;fill:none}#mermaid-svg-NoG3iJVR6vIUfyXn .edgeLabel{background-color:#e8e8e8;text-align:center}#mermaid-svg-NoG3iJVR6vIUfyXn .edgeLabel rect{opacity:0.9}#mermaid-svg-NoG3iJVR6vIUfyXn .edgeLabel span{color:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .cluster rect{fill:#ffffde;stroke:#aa3;stroke-width:1px}#mermaid-svg-NoG3iJVR6vIUfyXn .cluster text{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family);font-size:12px;background:#ffffde;border:1px solid #aa3;border-radius:2px;pointer-events:none;z-index:100}#mermaid-svg-NoG3iJVR6vIUfyXn .actor{stroke:#ccf;fill:#ECECFF}#mermaid-svg-NoG3iJVR6vIUfyXn text.actor&gt;tspan{fill:#000;stroke:none}#mermaid-svg-NoG3iJVR6vIUfyXn .actor-line{stroke:grey}#mermaid-svg-NoG3iJVR6vIUfyXn .messageLine0{stroke-width:1.5;stroke-dasharray:none;stroke:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .messageLine1{stroke-width:1.5;stroke-dasharray:2, 2;stroke:#333}#mermaid-svg-NoG3iJVR6vIUfyXn #arrowhead path{fill:#333;stroke:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .sequenceNumber{fill:#fff}#mermaid-svg-NoG3iJVR6vIUfyXn #sequencenumber{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn #crosshead path{fill:#333;stroke:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .messageText{fill:#333;stroke:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .labelBox{stroke:#ccf;fill:#ECECFF}#mermaid-svg-NoG3iJVR6vIUfyXn .labelText,#mermaid-svg-NoG3iJVR6vIUfyXn .labelText&gt;tspan{fill:#000;stroke:none}#mermaid-svg-NoG3iJVR6vIUfyXn .loopText,#mermaid-svg-NoG3iJVR6vIUfyXn .loopText&gt;tspan{fill:#000;stroke:none}#mermaid-svg-NoG3iJVR6vIUfyXn .loopLine{stroke-width:2px;stroke-dasharray:2, 2;stroke:#ccf;fill:#ccf}#mermaid-svg-NoG3iJVR6vIUfyXn .note{stroke:#aa3;fill:#fff5ad}#mermaid-svg-NoG3iJVR6vIUfyXn .noteText,#mermaid-svg-NoG3iJVR6vIUfyXn .noteText&gt;tspan{fill:#000;stroke:none}#mermaid-svg-NoG3iJVR6vIUfyXn .activation0{fill:#f4f4f4;stroke:#666}#mermaid-svg-NoG3iJVR6vIUfyXn .activation1{fill:#f4f4f4;stroke:#666}#mermaid-svg-NoG3iJVR6vIUfyXn .activation2{fill:#f4f4f4;stroke:#666}#mermaid-svg-NoG3iJVR6vIUfyXn .mermaid-main-font{font-family:"trebuchet ms", verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn .section{stroke:none;opacity:0.2}#mermaid-svg-NoG3iJVR6vIUfyXn .section0{fill:rgba(102,102,255,0.49)}#mermaid-svg-NoG3iJVR6vIUfyXn .section2{fill:#fff400}#mermaid-svg-NoG3iJVR6vIUfyXn .section1,#mermaid-svg-NoG3iJVR6vIUfyXn .section3{fill:#fff;opacity:0.2}#mermaid-svg-NoG3iJVR6vIUfyXn .sectionTitle0{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .sectionTitle1{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .sectionTitle2{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .sectionTitle3{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .sectionTitle{text-anchor:start;font-size:11px;text-height:14px;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn .grid .tick{stroke:#d3d3d3;opacity:0.8;shape-rendering:crispEdges}#mermaid-svg-NoG3iJVR6vIUfyXn .grid .tick text{font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn .grid path{stroke-width:0}#mermaid-svg-NoG3iJVR6vIUfyXn .today{fill:none;stroke:red;stroke-width:2px}#mermaid-svg-NoG3iJVR6vIUfyXn .task{stroke-width:2}#mermaid-svg-NoG3iJVR6vIUfyXn .taskText{text-anchor:middle;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn .taskText:not([font-size]){font-size:11px}#mermaid-svg-NoG3iJVR6vIUfyXn .taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn .taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}#mermaid-svg-NoG3iJVR6vIUfyXn .task.clickable{cursor:pointer}#mermaid-svg-NoG3iJVR6vIUfyXn .taskText.clickable{cursor:pointer;fill:#003163 !important;font-weight:bold}#mermaid-svg-NoG3iJVR6vIUfyXn .taskTextOutsideLeft.clickable{cursor:pointer;fill:#003163 !important;font-weight:bold}#mermaid-svg-NoG3iJVR6vIUfyXn .taskTextOutsideRight.clickable{cursor:pointer;fill:#003163 !important;font-weight:bold}#mermaid-svg-NoG3iJVR6vIUfyXn .taskText0,#mermaid-svg-NoG3iJVR6vIUfyXn .taskText1,#mermaid-svg-NoG3iJVR6vIUfyXn .taskText2,#mermaid-svg-NoG3iJVR6vIUfyXn .taskText3{fill:#fff}#mermaid-svg-NoG3iJVR6vIUfyXn .task0,#mermaid-svg-NoG3iJVR6vIUfyXn .task1,#mermaid-svg-NoG3iJVR6vIUfyXn .task2,#mermaid-svg-NoG3iJVR6vIUfyXn .task3{fill:#8a90dd;stroke:#534fbc}#mermaid-svg-NoG3iJVR6vIUfyXn .taskTextOutside0,#mermaid-svg-NoG3iJVR6vIUfyXn .taskTextOutside2{fill:#000}#mermaid-svg-NoG3iJVR6vIUfyXn .taskTextOutside1,#mermaid-svg-NoG3iJVR6vIUfyXn .taskTextOutside3{fill:#000}#mermaid-svg-NoG3iJVR6vIUfyXn .active0,#mermaid-svg-NoG3iJVR6vIUfyXn .active1,#mermaid-svg-NoG3iJVR6vIUfyXn .active2,#mermaid-svg-NoG3iJVR6vIUfyXn .active3{fill:#bfc7ff;stroke:#534fbc}#mermaid-svg-NoG3iJVR6vIUfyXn .activeText0,#mermaid-svg-NoG3iJVR6vIUfyXn .activeText1,#mermaid-svg-NoG3iJVR6vIUfyXn .activeText2,#mermaid-svg-NoG3iJVR6vIUfyXn .activeText3{fill:#000 !important}#mermaid-svg-NoG3iJVR6vIUfyXn .done0,#mermaid-svg-NoG3iJVR6vIUfyXn .done1,#mermaid-svg-NoG3iJVR6vIUfyXn .done2,#mermaid-svg-NoG3iJVR6vIUfyXn .done3{stroke:grey;fill:#d3d3d3;stroke-width:2}#mermaid-svg-NoG3iJVR6vIUfyXn .doneText0,#mermaid-svg-NoG3iJVR6vIUfyXn .doneText1,#mermaid-svg-NoG3iJVR6vIUfyXn .doneText2,#mermaid-svg-NoG3iJVR6vIUfyXn .doneText3{fill:#000 !important}#mermaid-svg-NoG3iJVR6vIUfyXn .crit0,#mermaid-svg-NoG3iJVR6vIUfyXn .crit1,#mermaid-svg-NoG3iJVR6vIUfyXn .crit2,#mermaid-svg-NoG3iJVR6vIUfyXn .crit3{stroke:#f88;fill:red;stroke-width:2}#mermaid-svg-NoG3iJVR6vIUfyXn .activeCrit0,#mermaid-svg-NoG3iJVR6vIUfyXn .activeCrit1,#mermaid-svg-NoG3iJVR6vIUfyXn .activeCrit2,#mermaid-svg-NoG3iJVR6vIUfyXn .activeCrit3{stroke:#f88;fill:#bfc7ff;stroke-width:2}#mermaid-svg-NoG3iJVR6vIUfyXn .doneCrit0,#mermaid-svg-NoG3iJVR6vIUfyXn .doneCrit1,#mermaid-svg-NoG3iJVR6vIUfyXn .doneCrit2,#mermaid-svg-NoG3iJVR6vIUfyXn .doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}#mermaid-svg-NoG3iJVR6vIUfyXn .milestone{transform:rotate(45deg) scale(0.8, 0.8)}#mermaid-svg-NoG3iJVR6vIUfyXn .milestoneText{font-style:italic}#mermaid-svg-NoG3iJVR6vIUfyXn .doneCritText0,#mermaid-svg-NoG3iJVR6vIUfyXn .doneCritText1,#mermaid-svg-NoG3iJVR6vIUfyXn .doneCritText2,#mermaid-svg-NoG3iJVR6vIUfyXn .doneCritText3{fill:#000 !important}#mermaid-svg-NoG3iJVR6vIUfyXn .activeCritText0,#mermaid-svg-NoG3iJVR6vIUfyXn .activeCritText1,#mermaid-svg-NoG3iJVR6vIUfyXn .activeCritText2,#mermaid-svg-NoG3iJVR6vIUfyXn .activeCritText3{fill:#000 !important}#mermaid-svg-NoG3iJVR6vIUfyXn .titleText{text-anchor:middle;font-size:18px;fill:#000;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn g.classGroup text{fill:#9370db;stroke:none;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family);font-size:10px}#mermaid-svg-NoG3iJVR6vIUfyXn g.classGroup text .title{font-weight:bolder}#mermaid-svg-NoG3iJVR6vIUfyXn g.clickable{cursor:pointer}#mermaid-svg-NoG3iJVR6vIUfyXn g.classGroup rect{fill:#ECECFF;stroke:#9370db}#mermaid-svg-NoG3iJVR6vIUfyXn g.classGroup line{stroke:#9370db;stroke-width:1}#mermaid-svg-NoG3iJVR6vIUfyXn .classLabel .box{stroke:none;stroke-width:0;fill:#ECECFF;opacity:0.5}#mermaid-svg-NoG3iJVR6vIUfyXn .classLabel .label{fill:#9370db;font-size:10px}#mermaid-svg-NoG3iJVR6vIUfyXn .relation{stroke:#9370db;stroke-width:1;fill:none}#mermaid-svg-NoG3iJVR6vIUfyXn .dashed-line{stroke-dasharray:3}#mermaid-svg-NoG3iJVR6vIUfyXn #compositionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-svg-NoG3iJVR6vIUfyXn #compositionEnd{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-svg-NoG3iJVR6vIUfyXn #aggregationStart{fill:#ECECFF;stroke:#9370db;stroke-width:1}#mermaid-svg-NoG3iJVR6vIUfyXn #aggregationEnd{fill:#ECECFF;stroke:#9370db;stroke-width:1}#mermaid-svg-NoG3iJVR6vIUfyXn #dependencyStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-svg-NoG3iJVR6vIUfyXn #dependencyEnd{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-svg-NoG3iJVR6vIUfyXn #extensionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-svg-NoG3iJVR6vIUfyXn #extensionEnd{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-svg-NoG3iJVR6vIUfyXn .commit-id,#mermaid-svg-NoG3iJVR6vIUfyXn .commit-msg,#mermaid-svg-NoG3iJVR6vIUfyXn .branch-label{fill:lightgrey;color:lightgrey;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn .pieTitleText{text-anchor:middle;font-size:25px;fill:#000;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn .slice{font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn g.stateGroup text{fill:#9370db;stroke:none;font-size:10px;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn g.stateGroup text{fill:#9370db;fill:#333;stroke:none;font-size:10px}#mermaid-svg-NoG3iJVR6vIUfyXn g.statediagram-cluster .cluster-label text{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn g.stateGroup .state-title{font-weight:bolder;fill:#000}#mermaid-svg-NoG3iJVR6vIUfyXn g.stateGroup rect{fill:#ECECFF;stroke:#9370db}#mermaid-svg-NoG3iJVR6vIUfyXn g.stateGroup line{stroke:#9370db;stroke-width:1}#mermaid-svg-NoG3iJVR6vIUfyXn .transition{stroke:#9370db;stroke-width:1;fill:none}#mermaid-svg-NoG3iJVR6vIUfyXn .stateGroup .composit{fill:white;border-bottom:1px}#mermaid-svg-NoG3iJVR6vIUfyXn .stateGroup .alt-composit{fill:#e0e0e0;border-bottom:1px}#mermaid-svg-NoG3iJVR6vIUfyXn .state-note{stroke:#aa3;fill:#fff5ad}#mermaid-svg-NoG3iJVR6vIUfyXn .state-note text{fill:black;stroke:none;font-size:10px}#mermaid-svg-NoG3iJVR6vIUfyXn .stateLabel .box{stroke:none;stroke-width:0;fill:#ECECFF;opacity:0.7}#mermaid-svg-NoG3iJVR6vIUfyXn .edgeLabel text{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .stateLabel text{fill:#000;font-size:10px;font-weight:bold;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn .node circle.state-start{fill:black;stroke:black}#mermaid-svg-NoG3iJVR6vIUfyXn .node circle.state-end{fill:black;stroke:white;stroke-width:1.5}#mermaid-svg-NoG3iJVR6vIUfyXn #statediagram-barbEnd{fill:#9370db}#mermaid-svg-NoG3iJVR6vIUfyXn .statediagram-cluster rect{fill:#ECECFF;stroke:#9370db;stroke-width:1px}#mermaid-svg-NoG3iJVR6vIUfyXn .statediagram-cluster rect.outer{rx:5px;ry:5px}#mermaid-svg-NoG3iJVR6vIUfyXn .statediagram-state .divider{stroke:#9370db}#mermaid-svg-NoG3iJVR6vIUfyXn .statediagram-state .title-state{rx:5px;ry:5px}#mermaid-svg-NoG3iJVR6vIUfyXn .statediagram-cluster.statediagram-cluster .inner{fill:white}#mermaid-svg-NoG3iJVR6vIUfyXn .statediagram-cluster.statediagram-cluster-alt .inner{fill:#e0e0e0}#mermaid-svg-NoG3iJVR6vIUfyXn .statediagram-cluster .inner{rx:0;ry:0}#mermaid-svg-NoG3iJVR6vIUfyXn .statediagram-state rect.basic{rx:5px;ry:5px}#mermaid-svg-NoG3iJVR6vIUfyXn .statediagram-state rect.divider{stroke-dasharray:10,10;fill:#efefef}#mermaid-svg-NoG3iJVR6vIUfyXn .note-edge{stroke-dasharray:5}#mermaid-svg-NoG3iJVR6vIUfyXn .statediagram-note rect{fill:#fff5ad;stroke:#aa3;stroke-width:1px;rx:0;ry:0}:root{--mermaid-font-family: '"trebuchet ms", verdana, arial';--mermaid-font-family: "Comic Sans MS", "Comic Sans", cursive}#mermaid-svg-NoG3iJVR6vIUfyXn .error-icon{fill:#522}#mermaid-svg-NoG3iJVR6vIUfyXn .error-text{fill:#522;stroke:#522}#mermaid-svg-NoG3iJVR6vIUfyXn .edge-thickness-normal{stroke-width:2px}#mermaid-svg-NoG3iJVR6vIUfyXn .edge-thickness-thick{stroke-width:3.5px}#mermaid-svg-NoG3iJVR6vIUfyXn .edge-pattern-solid{stroke-dasharray:0}#mermaid-svg-NoG3iJVR6vIUfyXn .edge-pattern-dashed{stroke-dasharray:3}#mermaid-svg-NoG3iJVR6vIUfyXn .edge-pattern-dotted{stroke-dasharray:2}#mermaid-svg-NoG3iJVR6vIUfyXn .marker{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .marker.cross{stroke:#333}

:root { --mermaid-font-family: "trebuchet ms", verdana, arial;}</style>
    <style>#mermaid-svg-NoG3iJVR6vIUfyXn {
    color: rgba(0, 0, 0, 0.75);
    font: ;
  }</style>
    <g>
     <g class="output">
      <g class="clusters"></g>
      <g class="edgePaths">
       <g class="edgePath LS-A LE-B" id="L-A-B" style="opacity: 1;">
        <path class="path" d="M238.23435974121094,53.0390625L310.61717224121094,53.0390625L382.99998474121094,53.0390625" marker-end="url(#arrowhead5634)" style="fill:none"></path>
        <defs>
         <marker id="arrowhead5634" viewbox="0 0 10 10" refx="9" refy="5" markerunits="strokeWidth" markerwidth="8" markerheight="6" orient="auto">
          <path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path>
         </marker>
        </defs>
       </g>
       <g class="edgePath LS-B LE-D" style="opacity: 1;" id="L-B-D">
        <path class="path" d="M472.6259415661941,46.67305862537887L498.07810974121094,43.0390625L523.0781097412109,44.82328339447467" marker-end="url(#arrowhead5635)" style="fill:none"></path>
        <defs>
         <marker id="arrowhead5635" viewbox="0 0 10 10" refx="9" refy="5" markerunits="strokeWidth" markerwidth="8" markerheight="6" orient="auto">
          <path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path>
         </marker>
        </defs>
       </g>
       <g class="edgePath LS-D LE-B" style="opacity: 1;" id="L-D-B">
        <path class="path" d="M523.0781097412109,61.25484160552533L498.07810974121094,63.0390625L472.6259415661941,59.40506637462113" marker-end="url(#arrowhead5636)" style="fill:none"></path>
        <defs>
         <marker id="arrowhead5636" viewbox="0 0 10 10" refx="9" refy="5" markerunits="strokeWidth" markerwidth="8" markerheight="6" orient="auto">
          <path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path>
         </marker>
        </defs>
       </g>
      </g>
      <g class="edgeLabels">
       <g class="edgeLabel" transform="translate(310.61717224121094,53.0390625)" style="opacity: 1;">
        <g transform="translate(-47.3828125,-18.9765625)" class="label">
         <rect rx="0" ry="0" width="94.765625" height="37.953125" style="fill:#e8e8e8;"></rect>
         <foreignobject width="94.765625" height="37.9599609375">
          <div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">
           <span id="L-L-A-B" class="edgeLabel L-LS-A' L-LE-B">shell脚本</span>
          </div>
         </foreignobject>
        </g>
       </g>
       <g class="edgeLabel" style="opacity: 1;" transform="">
        <g transform="translate(0,0)" class="label">
         <rect rx="0" ry="0" width="0" height="0" style="fill:#e8e8e8;"></rect>
         <foreignobject width="0" height="0">
          <div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">
           <span id="L-L-B-D" class="edgeLabel L-LS-B' L-LE-D"></span>
          </div>
         </foreignobject>
        </g>
       </g>
       <g class="edgeLabel" style="opacity: 1;" transform="">
        <g transform="translate(0,0)" class="label">
         <rect rx="0" ry="0" width="0" height="0" style="fill:#e8e8e8;"></rect>
         <foreignobject width="0" height="0">
          <div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">
           <span id="L-L-D-B" class="edgeLabel L-LS-D' L-LE-B"></span>
          </div>
         </foreignobject>
        </g>
       </g>
      </g>
      <g class="nodes">
       <g class="node default" id="A" transform="translate(123.11717987060547,53.0390625)" style="opacity: 1;">
        <rect rx="0" ry="0" x="-115.1171875" y="-28.9765625" width="230.234375" height="57.953125" class="label-container"></rect>
        <g class="label" transform="translate(0,0)">
         <g transform="translate(-105.1171875,-18.9765625)">
          <foreignobject width="210.24000549316406" height="37.9599609375">
           <div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">
            应用程序或用户命令
           </div>
          </foreignobject>
         </g>
        </g>
       </g>
       <g class="node default" style="opacity: 1;" id="B" transform="translate(428.03904724121094,53.0390625)">
        <circle x="-45.0390625" y="-28.9765625" r="45.0390625" class="label-container"></circle>
        <g class="label" transform="translate(0,0)">
         <g transform="translate(-35.0390625,-18.9765625)">
          <foreignobject width="70.08000183105469" height="37.9599609375">
           <div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">
            服务器
           </div>
          </foreignobject>
         </g>
        </g>
       </g>
       <g class="node default" style="opacity: 1;" id="D" transform="translate(638.1952896118164,53.0390625)">
        <rect rx="0" ry="0" x="-115.1171875" y="-28.9765625" width="230.234375" height="57.953125" class="label-container"></rect>
        <g class="label" transform="translate(0,0)">
         <g transform="translate(-105.1171875,-18.9765625)">
          <foreignobject width="210.24000549316406" height="37.9599609375">
           <div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">
            分配资源及执行脚本
           </div>
          </foreignobject>
         </g>
        </g>
       </g>
      </g>
     </g>
    </g>
   </svg>
  </div> 
  <blockquote> 
   <p>Shell是一个功能相当大的编程语言，易编写、易调试、灵活性强。</p> 
  </blockquote> 
  <ul> 
   <li>Linux自身提供Shell解析器</li> 
  </ul> 
  <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> /etc/shells
/bin/sh
/bin/bash
</code></pre> 
  <ul> 
   <li>bash和sh的关系</li> 
  </ul> 
  <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 bin<span class="token punctuation">]</span>$ ll <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">bash</span>
rwxr-xr-x. 1 root root 941880 5月  11 2016 <span class="token function">bash</span>
lrwxrwxrwx. 1 root root      4 5月  27 2017 sh -<span class="token operator">&gt;</span> <span class="token function">bash</span>
</code></pre> 
  <p>可以看出来sh是bash的软连接</p> 
  <ul> 
   <li>Centos默认的解析器是bash</li> 
  </ul> 
  <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 bin<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$SHELL</span>
/bin/bash
</code></pre> 
  <h2><a id="2Shell_39"></a>2、Shell脚本入门</h2> 
  <ol> 
   <li>脚本格式</li> 
  </ol> 
  <blockquote> 
   <pre><code> 脚本以#!/bin/bash开头(指定的解析器)
</code></pre> 
  </blockquote> 
  <ol start="2"> 
   <li>第一个脚本Shell脚本：helloworld</li> 
  </ol> 
  <blockquote> 
   <p>先创建一个Shell脚本，并且切换到vim编辑模式下</p> 
  </blockquote> 
  <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> helloworld.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim helloworld.sh
</code></pre> 
  <blockquote> 
   <p>对Shell脚本进行编辑</p> 
  </blockquote> 
  <pre><code class="prism language-bash"><span class="token shebang important">#!/bin/bash</span>
<span class="token keyword">echo</span> <span class="token string">"helloworld"</span>
</code></pre> 
  <p>3.脚本常用执行方式</p> 
  <blockquote> 
   <p>①采用bash或sh+脚本的相对路径或绝对路径（不用赋予脚本+x权限）<br> sh+脚本的相对路径和绝对路径</p> 
  </blockquote> 
  <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ sh helloworld.sh 
Helloworld
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ sh /home/atguigu/datas/helloworld.sh 
helloworld
</code></pre> 
  <blockquote> 
   <p>bash+脚本的相对路径和绝对路径</p> 
  </blockquote> 
  <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">bash</span> helloworld.sh 
Helloworld
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">bash</span> /home/atguigu/datas/helloworld.sh 
Helloworld
</code></pre> 
  <blockquote> 
   <p>②采用输入脚本的绝对路径或相对路径执行脚本（必须具有可执行权限+x）</p> 
  </blockquote> 
  <blockquote> 
   <p>(a)首先要赋予helloworld.sh 脚本的+x权限</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 744 helloworld.sh
</code></pre> 
   <p>(b)执行脚本<br> 相对路径</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./helloworld.sh 
Helloworld
</code></pre> 
   <p>绝对路径</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ /home/atguigu/datas/helloworld.sh 
Helloworld
</code></pre> 
  </blockquote> 
  <blockquote> 
   <p>注意：第一种执行方法，本质是bash解析器帮你执行脚本，所以脚本本身不需要执行权限。第二种执行方法，本质是脚本需要自己执行，所以需要执行权限。</p> 
  </blockquote> 
  <blockquote> 
   <p>③在脚本的路径前加上“.”<br> （a）有以下脚本</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">cat</span> test1.sh 
<span class="token comment">#! /bin/bash</span>
A<span class="token operator">=</span><span class="token string">"hello"</span>
</code></pre> 
   <p>(b) 分别使用sh,bash,./ 和 . 的方式来执行，结果如下：</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">bash</span> test1.sh 
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$A</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ sh test1.sh 
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$A</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./test1.sh 
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$A</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">.</span> test1.sh 
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$A</span>
hello
</code></pre> 
  </blockquote> 
  <blockquote> 
   <p>以上三种方式的区别：<br> 前两种方式都是在当前shell中打开一个子shell来执行脚本内容，当脚本内容结束，则子shell关闭，回到父shell中。<br> 第三种，也就是使用在脚本路径前加.的方式，可以使脚本内容在当前shell里执行，而无需打开子shell！<br> 开子shell与不开子shell的区别就在于，环境变量的继承关系，如在子shell中设置的当前变量，父shell是不可见的。</p> 
  </blockquote> 
  <h2><a id="3_116"></a>3、变量</h2> 
  <p>1.常用系统变量</p> 
  <blockquote> 
   <p>常用的系统变量</p> 
   <pre><code class="prism language-bash"><span class="token variable">$HOME</span>、<span class="token variable">$PWD</span>、<span class="token variable">$SHELL</span>、<span class="token variable">$USER</span>等
</code></pre> 
  </blockquote> 
  <p>2.自定义变量</p> 
  <blockquote> 
   <p>①基本语法<br> （a）定义变量：变量=值<br> （b）撤销变量：unset变量<br> （c）声明静态变量：readonly变量，注意：不能unset<br> ②变量定义规则<br> （a）变量名称可以由字母、数字和下划线组成，但是不能以数字开头，环境变量名建议大写。<br> （b）等号两侧不能有空格<br> （c）在bash中，变量默认类型都是字符串类型，无法直接进行数值运算。<br> （d）变量的值如果有空格，需要使用双引号或单引号括起来。<br> ③案例实操<br> 定义变量A</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ A<span class="token operator">=</span>5
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$A</span>
5
</code></pre> 
   <p>给变量A重新赋值</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ A<span class="token operator">=</span>8
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$A</span>
8
</code></pre> 
   <p>撤销变量A</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ unset A
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$A</span>
</code></pre> 
   <p>声明静态的变量B=2，不能unset</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">readonly</span> B<span class="token operator">=</span>2
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$B</span>
2
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ B<span class="token operator">=</span>9
-bash: B: <span class="token function">readonly</span> variable
</code></pre> 
   <p>在bash中，变量默认类型都是字符串类型，无法直接进行数值运算</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 ~<span class="token punctuation">]</span>$ C<span class="token operator">=</span>1+2
<span class="token punctuation">[</span>root@hadoop101 ~<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$C</span>
1+2
</code></pre> 
   <p>变量的值如果有空格，需要使用双引号或单引号括起来</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 ~<span class="token punctuation">]</span>$ D<span class="token operator">=</span>I love banzhang
-bash: world: <span class="token function">command</span> not found
<span class="token punctuation">[</span>root@hadoop101 ~<span class="token punctuation">]</span>$ D<span class="token operator">=</span><span class="token string">"I love banzhang"</span>
<span class="token punctuation">[</span>root@hadoop101 ~<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$D</span>
I love banzhang
</code></pre> 
   <p>可把变量提升为全局环境变量，可供其他Shell程序使用<br> export 变量名</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim helloworld.sh 
</code></pre> 
   <p>在helloworld文件中增加echo$B</p> 
   <pre><code class="prism language-bash"><span class="token shebang important">#!/bin/bash</span>
<span class="token keyword">echo</span> <span class="token string">"helloworld"</span>
<span class="token keyword">echo</span> <span class="token variable">$B</span>
</code></pre> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./helloworld.sh 
Helloworld
</code></pre> 
   <p>发现并没有打印输出变量B的值。</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">export</span> B
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./helloworld.sh 
helloworld
2
</code></pre> 
  </blockquote> 
  <p>3.特殊变量</p> 
  <blockquote> 
   <p>(1)$n<br> ①基本语法<br> $n （功能描述：n为数字，$0代表该脚本名称，$1-<span class="katex--inline"><span class="katex"><span class="katex-mathml">
       <math>
        <semantics>
         <mrow>
          <mn>
           9
          </mn>
          <mi mathvariant="normal">
           代
          </mi>
          <mi mathvariant="normal">
           表
          </mi>
          <mi mathvariant="normal">
           第
          </mi>
          <mi mathvariant="normal">
           一
          </mi>
          <mi mathvariant="normal">
           到
          </mi>
          <mi mathvariant="normal">
           第
          </mi>
          <mi mathvariant="normal">
           九
          </mi>
          <mi mathvariant="normal">
           个
          </mi>
          <mi mathvariant="normal">
           参
          </mi>
          <mi mathvariant="normal">
           数
          </mi>
          <mi mathvariant="normal">
           ，
          </mi>
          <mi mathvariant="normal">
           十
          </mi>
          <mi mathvariant="normal">
           以
          </mi>
          <mi mathvariant="normal">
           上
          </mi>
          <mi mathvariant="normal">
           的
          </mi>
          <mi mathvariant="normal">
           参
          </mi>
          <mi mathvariant="normal">
           数
          </mi>
          <mi mathvariant="normal">
           ，
          </mi>
          <mi mathvariant="normal">
           十
          </mi>
          <mi mathvariant="normal">
           以
          </mi>
          <mi mathvariant="normal">
           上
          </mi>
          <mi mathvariant="normal">
           的
          </mi>
          <mi mathvariant="normal">
           参
          </mi>
          <mi mathvariant="normal">
           数
          </mi>
          <mi mathvariant="normal">
           需
          </mi>
          <mi mathvariant="normal">
           要
          </mi>
          <mi mathvariant="normal">
           用
          </mi>
          <mi mathvariant="normal">
           大
          </mi>
          <mi mathvariant="normal">
           括
          </mi>
          <mi mathvariant="normal">
           号
          </mi>
          <mi mathvariant="normal">
           包
          </mi>
          <mi mathvariant="normal">
           含
          </mi>
          <mi mathvariant="normal">
           ，
          </mi>
          <mi mathvariant="normal">
           如
          </mi>
         </mrow>
         <annotation encoding="application/x-tex">
          9代表第一到第九个参数，十以上的参数，十以上的参数需要用大括号包含，如
         </annotation>
        </semantics>
       </math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.64444em; vertical-align: 0em;"></span><span class="mord">9</span><span class="mord cjk_fallback">代</span><span class="mord cjk_fallback">表</span><span class="mord cjk_fallback">第</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">到</span><span class="mord cjk_fallback">第</span><span class="mord cjk_fallback">九</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">参</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">十</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">上</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">参</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">十</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">上</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">参</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">需</span><span class="mord cjk_fallback">要</span><span class="mord cjk_fallback">用</span><span class="mord cjk_fallback">大</span><span class="mord cjk_fallback">括</span><span class="mord cjk_fallback">号</span><span class="mord cjk_fallback">包</span><span class="mord cjk_fallback">含</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">如</span></span></span></span></span>{10}）<br> ②案例实操</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> parameter.sh 
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim parameter.sh
<span class="token comment">#!/bin/bash</span>
<span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$0</span> <span class="token variable">$1</span> <span class="token variable">$2</span>"</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 777 parameter.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./parameter.sh cls  xz
./parameter.sh  cls   xz
</code></pre> 
   <p>(2) $#<br> ①基本语法<br> $# （功能描述：获取所有输入参数个数，常用于循环）。<br> ②案例实操</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim parameter.sh
<span class="token comment">#!/bin/bash</span>
<span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$0</span> <span class="token variable">$1</span> <span class="token variable">$2</span>"</span>
<span class="token keyword">echo</span> $<span class="token comment">#</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 777 parameter.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./parameter.sh cls  xz
parameter.sh cls xz 
2
</code></pre> 
   <p>(3)</p> 
   <pre><code class="prism language-bash"><span class="token variable">$*</span>、<span class="token variable">$@</span>
</code></pre> 
   <p>①基本语法</p> 
   <pre><code class="prism language-bash"><span class="token variable">$*</span>	（功能描述：这个变量代表命令行中所有的参数，<span class="token variable">$*</span>把所有的参数看成一个整体）
<span class="token variable">$@</span>	（功能描述：这个变量也代表命令行中所有的参数，不过<span class="token variable">$@</span>把每个参数区分对待）
</code></pre> 
   <p>②案例实操</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim parameter.sh
<span class="token comment">#!/bin/bash</span>
<span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$0</span> <span class="token variable">$1</span> <span class="token variable">$2</span>"</span>
<span class="token keyword">echo</span> $<span class="token comment">#</span>
<span class="token keyword">echo</span> <span class="token variable">$*</span>
<span class="token keyword">echo</span> <span class="token variable">$@</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">bash</span> parameter.sh 1 2 3
parameter.sh  1   2
3
1 2 3
1 2 3
</code></pre> 
   <p>(4) $？<br> ①基本语法<br> $？ （功能描述：最后一次执行的命令的返回状态。如果这个变量的值为0，证明上一个命令正确执行；如果这个变量的值为非0（具体是哪个数，由命令自己来决定），则证明上一个命令执行不正确了。）<br> ②案例实操</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./helloworld.sh 
hello world
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$?</span>
0
</code></pre> 
  </blockquote> 
  <h2><a id="4_256"></a>4、运算符</h2> 
  <blockquote> 
   <p>(1)基本语法<br> $((运算式))或<br> $[运算式]<br> (2)案例实操</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span><span class="token comment"># S=$[(2+3)*4]</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span><span class="token comment"># echo $S</span>
</code></pre> 
  </blockquote> 
  <h2><a id="5_265"></a>5、条件判断</h2> 
  <blockquote> 
   <p>(1)基本语法<br> ①test condition<br> ②[ condition ]（注意condition前后要有空格）<br> (2)常用判断条件<br> ①两个整数之间比较<br> -lt 小于 -le 小于等于<br> -eq 等于 -gt 大于<br> -ge 大于等于） -ne 不等于<br> ②按照文件权限进行判断<br> -r 有读的权限（read） -w 有写的权限（write）<br> -x 有执行的权限（execute）<br> ③按照文件类型进行判断<br> -f 文件存在并且是一个常规的文件（file）<br> -e 文件存在（existence） -d 文件存在并是一个目录（directory）<br> (3)案例实操<br> ①23是否大于等于22</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token punctuation">[</span> 23 -ge 22 <span class="token punctuation">]</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$?</span>
0
</code></pre> 
   <p>②helloworld.sh是否具有写权限</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token punctuation">[</span> -w helloworld.sh <span class="token punctuation">]</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$?</span>
0
</code></pre> 
   <p>③/home/atguigu/cls.txt目录中的文件是否存在</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token punctuation">[</span> -e /home/atguigu/cls.txt <span class="token punctuation">]</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$?</span>
1
</code></pre> 
   <p>④多条件判断（&amp;&amp; 表示前一条命令执行成功时，才执行后一条命令，|| 表示上一条命令执行失败后，才执行下一条命令）</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 ~<span class="token punctuation">]</span>$ <span class="token punctuation">[</span> condition <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">echo</span> OK <span class="token operator">||</span> <span class="token keyword">echo</span> notok
OK
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token punctuation">[</span> condition <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token keyword">echo</span> notok
notok
</code></pre> 
  </blockquote> 
  <h2><a id="6_307"></a>6、流程控制</h2> 
  <p>1.if判断</p> 
  <blockquote> 
   <p>(1)基本语法<br> （1）单分支<br> if [ 条件判断式 ];then<br> 程序<br> fi<br> 或者<br> if [ 条件判断式 ]<br> then<br> 程序<br> fi<br> （2）多分支<br> if [ 条件判断式 ]<br> then<br> 程序<br> elif [ 条件判断式 ]<br> then<br> 程序<br> else<br> 程序<br> fi</p> 
  </blockquote> 
  <blockquote> 
   <p>注意事项：<br> （1）[ 条件判断式 ]，中括号和条件判断式之间必须有空格<br> （2）if后要有空格</p> 
  </blockquote> 
  <blockquote> 
   <p>(2)实例实操<br> 输入一个数字，如果是1，则输出banzhang zhen shuai，如果是2，则输出cls zhen mei，如果是其它，什么也不输出。</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> if.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim if.sh
<span class="token comment">#!/bin/bash</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$1</span> -eq <span class="token string">"1"</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
      <span class="token keyword">echo</span> <span class="token string">"banzhang zhen shuai"</span>
<span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$1</span> -eq <span class="token string">"2"</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
      <span class="token keyword">echo</span> <span class="token string">"cls zhen mei"</span>
<span class="token keyword">fi</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 777 if.sh 
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./if.sh 1
banzhang zhen shuai
</code></pre> 
  </blockquote> 
  <p>2.case</p> 
  <blockquote> 
   <p>(1)基本语法<br> case $变量名 in<br> “值1”）<br> 如果变量的值等于值1，则执行程序1<br> ;;<br> “值2”）<br> 如果变量的值等于值2，则执行程序2<br> ;;<br> …省略其他分支…<br> *）<br> 如果变量的值都不是以上的值，则执行此程序<br> ;;<br> esac</p> 
  </blockquote> 
  <blockquote> 
   <p>注意事项：<br> （1）case行尾必须为单词“in”，每一个模式匹配必须以右括号“）”结束。<br> （2）双分号“;;”表示命令序列结束，相当于java中的break。<br> （3）最后的“*）”表示默认模式，相当于java中的default。</p> 
  </blockquote> 
  <blockquote> 
   <p>(2)案例实操<br> 输入一个数字，如果是1，则输出banzhang，如果是2，则输出cls，如果是其它，输出songsong。</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> case.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim case.sh
<span class="token operator">!</span>/bin/bash
<span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span>
<span class="token string">"1"</span><span class="token punctuation">)</span>
      <span class="token keyword">echo</span> <span class="token string">"banzhang"</span>
<span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token string">"2"</span><span class="token punctuation">)</span>
      <span class="token keyword">echo</span> <span class="token string">"cls"</span>
<span class="token punctuation">;</span><span class="token punctuation">;</span>
*<span class="token punctuation">)</span>
      <span class="token keyword">echo</span> <span class="token string">"songsong"</span>
<span class="token punctuation">;</span><span class="token punctuation">;</span>
esac
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 777 case.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./case.sh 1
1
</code></pre> 
  </blockquote> 
  <p>3.for循环</p> 
  <blockquote> 
   <p>(1)基本语法<br> for (( 初始值;循环控制条件;变量变化 ))<br> do<br> 程序<br> done<br> 或者<br> for 变量 in 值1 值2 值3…<br> do<br> 程序<br> done<br> (2)案例实操 从1加到100</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> for1.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim for1.sh
<span class="token comment">#!/bin/bash</span>
s<span class="token operator">=</span>0
<span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span>
<span class="token keyword">do</span>
      s<span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$s</span>+<span class="token variable">$i</span><span class="token punctuation">]</span>
<span class="token keyword">done</span>
<span class="token keyword">echo</span> <span class="token variable">$s</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 777 for1.sh 
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./for1.sh 
“5050”
</code></pre> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> for2.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim for2.sh
<span class="token comment">#!/bin/bash</span>
<span class="token comment">#打印数字</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable">$*</span>
  <span class="token keyword">do</span>
   <span class="token keyword">echo</span> <span class="token string">"ban zhang love <span class="token variable">$i</span> "</span>
<span class="token keyword">done</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 777 for2.sh 
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">bash</span> for2.sh cls xz bd
ban zhang love cls
ban zhang love xz
ban zhang love bd
</code></pre> 
   <p>(3)</p> 
   <pre><code class="prism language-bash"><span class="token comment">#比较比较“$*”和“$@”区别</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim for.sh
<span class="token comment">#!/bin/bash </span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$*</span>"</span> 
<span class="token comment">#$*中的所有参数看成是一个整体，所以这个for循环只会循环一次 </span>
      <span class="token keyword">do</span> 
             <span class="token keyword">echo</span> <span class="token string">"ban zhang love <span class="token variable">$i</span>"</span>
    <span class="token keyword">done</span> 
<span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$@</span>"</span> 
<span class="token comment">#$@中的每个参数都看成是独立的，所以“$@”中有几个参数，就会循环几次 </span>
      <span class="token keyword">do</span> 
             <span class="token keyword">echo</span> <span class="token string">"ban zhang love <span class="token variable">$j</span>"</span> 
<span class="token keyword">done</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 777 for.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">bash</span> for.sh cls xz bd
ban zhang love cls xz bd
ban zhang love cls
ban zhang love xz
ban zhang love bd
</code></pre> 
  </blockquote> 
  <p>4.while循环</p> 
  <blockquote> 
   <p>(1)基本语法<br> while [ 条件判断式 ]<br> do<br> 程序<br> done<br> (2)案例实操<br> 从1加到100</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> while.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim while.sh
<span class="token comment">#!/bin/bash</span>
s<span class="token operator">=</span>0
i<span class="token operator">=</span>1
<span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token variable">$i</span> -le 100 <span class="token punctuation">]</span>
<span class="token keyword">do</span>
      s<span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$s</span>+<span class="token variable">$i</span><span class="token punctuation">]</span>
     i<span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$i</span>+1<span class="token punctuation">]</span>
<span class="token keyword">done</span>
<span class="token keyword">echo</span> <span class="token variable">$s</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 777 while.sh 
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./while.sh 
5050
</code></pre> 
  </blockquote> 
  <h2><a id="7_479"></a>7、读取控制台输出</h2> 
  <blockquote> 
   <p>(1)基本语法<br> read(选项)(参数)<br> 选项：<br> -p：指定读取值时的提示符；<br> -t：指定读取值时等待的时间（秒）。<br> 参数<br> 变量：指定读取值的变量名<br> (2)案例实操<br> 提示7秒内，读取控制台输入的名称</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> read.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim read.sh
<span class="token comment">#!/bin/bash</span>
<span class="token function">read</span> -t 7 -p <span class="token string">"Enter your name in 7 seconds "</span> NAME
<span class="token keyword">echo</span> <span class="token variable">$NAME</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./read.sh 
Enter your name <span class="token keyword">in</span> 7 seconds xiaoze
xiaoze
</code></pre> 
  </blockquote> 
  <h2><a id="8_499"></a>8、函数</h2> 
  <p>1.系统函数</p> 
  <blockquote> 
   <p>(1)basename<br> ①基本语法<br> basename [string / pathname] [suffix] （功能描述：basename命令会删掉所有的前缀包括最后一个（‘/’）字符，然后将字符串显示出来。<br> ②案例实操<br> 截取该/home/atguigu/banzhang.txt路径的文件名称</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">basename</span> /home/atguigu/banzhang.txt 
banzhang.txt
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">basename</span> /home/atguigu/banzhang.txt .txt
banzhang
</code></pre> 
   <p>(2)dirname<br> ①基本语法<br> dirname 文件绝对路径 （功能描述：从给定的包含绝对路径的文件名中去除文件名（非目录的部分），然后返回剩下的路径（目录的部分））<br> ②案例实操<br> 获取banzhang.txt文件的路径</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 ~<span class="token punctuation">]</span>$ <span class="token function">dirname</span> /home/atguigu/banzhang.txt 
/home/atguigu
</code></pre> 
  </blockquote> 
  <p>2.自定义函数</p> 
  <blockquote> 
   <p>(1)基本语法<br> [ function ] funname[()]<br> {<br> Action;<br> [return int;]<br> }<br> funname<br> (2)案例实操</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> fun.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim fun.sh
<span class="token comment">#!/bin/bash</span>
<span class="token keyword">function</span> sum<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
s<span class="token operator">=</span>0
 s<span class="token operator">=</span>$<span class="token punctuation">[</span> <span class="token variable">$1</span> + <span class="token variable">$2</span> <span class="token punctuation">]</span>
  <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$s</span>"</span>
<span class="token punctuation">}</span>
<span class="token function">read</span> -p <span class="token string">"Please input the number1: "</span> n1<span class="token punctuation">;</span>
<span class="token function">read</span> -p <span class="token string">"Please input the number2: "</span> n2<span class="token punctuation">;</span>
<span class="token function">sum</span> <span class="token variable">$n1</span> <span class="token variable">$n2</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 777 fun.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./fun.sh 
Please input the number1: 2
Please input the number2: 5
7
</code></pre> 
  </blockquote> 
  <h2><a id="9Shell_549"></a>9、Shell工具</h2> 
  <p>1.cut</p> 
  <blockquote> 
   <p>cut的工作就是“剪”，具体的说就是在文件中负责剪切数据用的。cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段输出。<br> (1)基本语法<br> cut [选项参数] filename<br> 说明：默认分隔符是制表符<br> (2)选项参数</p> 
  </blockquote> 
  <table> 
   <thead> 
    <tr> 
     <th>选项参数</th> 
     <th>功能</th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <td>-f</td> 
     <td>列号，提取第几列</td> 
    </tr> 
    <tr> 
     <td>-d</td> 
     <td>分隔符，按照指定分隔符分割列</td> 
    </tr> 
    <tr> 
     <td>-c</td> 
     <td>指定具体的字符</td> 
    </tr> 
   </tbody> 
  </table>
  <blockquote> 
   <p>(3)案例实操<br> ①数据准备</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> cut.txt
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim cut.txt
dong shen
guan zhen
wo  wo
lai  lai
le  le
</code></pre> 
   <p>②切割cut.txt第一列</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">cut</span> -d <span class="token string">" "</span> -f 1 cut.txt 
dong
guan
wo
lai
le
</code></pre> 
   <p>③切割cut.txt第二、三列</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">cut</span> -d <span class="token string">" "</span> -f 2,3 cut.txt 
shen
zhen
	wo
	lai
	le
</code></pre> 
   <p>④在cut.txt文件中切割出guan</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">cat</span> cut.txt <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"guan"</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">" "</span> -f 1
guan
</code></pre> 
   <p>⑤选取系统PATH变量值，第2个“：”开始后的所有路径：</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$PATH</span>
/usr/lib64/qt-3.3/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/atguigu/bin
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$PATH</span> <span class="token operator">|</span> <span class="token function">cut</span> -d: -f 3-
/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/atguigu/bin
</code></pre> 
   <p>⑥切割ifconfig 后打印的IP地址</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">ifconfig</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"netmask"</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"t"</span> -f 2 
<span class="token operator">|</span><span class="token function">cut</span> -d <span class="token string">" "</span> -f 2
</code></pre> 
  </blockquote> 
  <p>2.sed</p> 
  <blockquote> 
   <p>sed是一种流编辑器，它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”，接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有改变，除非你使用重定向存储输出。<br> (1)基本语法<br> sed [选项参数] ‘command’ filename<br> (2)选项参数说明</p> 
  </blockquote> 
  <table> 
   <thead> 
    <tr> 
     <th>选项参数</th> 
     <th>功能</th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <td>-e</td> 
     <td>直接在指令列模式上进行sed的动作编辑。</td> 
    </tr> 
    <tr> 
     <td>-i</td> 
     <td>直接编辑文件</td> 
    </tr> 
   </tbody> 
  </table> 
  <table> 
   <thead> 
    <tr> 
     <th>命令</th> 
     <th>功能描述</th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <td>a</td> 
     <td>新增，a的后面可以接字串，在下一行出现</td> 
    </tr> 
    <tr> 
     <td>d</td> 
     <td>删除</td> 
    </tr> 
    <tr> 
     <td>s</td> 
     <td>查找并替换</td> 
    </tr> 
   </tbody> 
  </table>
  <blockquote> 
   <p>(3)案例实操<br> ①数据准备</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> sed.txt
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim sed.txt
dong shen
guan zhen
wo  wo
lai  lai

le  le
</code></pre> 
   <p>②将“mei nv”这个单词插入到sed.txt第二行下，打印。</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">sed</span> <span class="token string">'2a mei nv'</span> sed.txt 
dong shen
guan zhen
mei nv
wo  wo
lai  lai

le  le
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">cat</span> sed.txt 
dong shen
guan zhen
wo  wo
lai  lai

le  le
···
<span class="token comment">#注意：文件并没有改变</span>
③删除sed.txt文件所有包含wo的行
```bash
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">sed</span> <span class="token string">'/wo/d'</span> sed.txt
dong shen
guan zhen
lai  lai

le  le
</code></pre> 
   <p>④将sed.txt文件中wo替换为ni</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">sed</span> <span class="token string">'s/wo/ni/g'</span> sed.txt 
dong shen
guan zhen
ni  ni
lai  lai

le  le
</code></pre> 
   <p>⑤将sed.txt文件中的第二行删除并将wo替换为ni</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">sed</span> -e <span class="token string">'2d'</span> -e <span class="token string">'s/wo/ni/g'</span> sed.txt 
dong shen
ni  ni
lai  lai

le  le
</code></pre> 
  </blockquote> 
  <p>3.awk(重点)</p> 
  <blockquote> 
   <p>一个强大的文本分析工具，把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行分析处理。<br> (1)基本语法<br> awk [选项参数] ‘pattern1{action1} pattern2{action2}…’ filename<br> pattern：表示AWK在数据中查找的内容，就是匹配模式<br> action：在找到匹配内容时所执行的一系列命令<br> (2)选项说明</p> 
  </blockquote> 
  <table> 
   <thead> 
    <tr> 
     <th>选项参数</th> 
     <th>功能</th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <td>-F</td> 
     <td>指定输入文件折分隔符</td> 
    </tr> 
    <tr> 
     <td>-v</td> 
     <td>赋值一个用户定义变量</td> 
    </tr> 
   </tbody> 
  </table>
  <blockquote> 
   <p>(3)案例实操<br> ①数据准备</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">sudo</span> <span class="token function">cp</span> /etc/passwd ./
</code></pre> 
   <p>②搜索passwd文件以root关键字开头的所有行，并输出该行的第7列。</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">awk</span> -F: <span class="token string">'/^root/{print <span class="token variable">$7</span>}'</span> <span class="token function">passwd</span> 
/bin/bash
</code></pre> 
   <p>③搜索passwd文件以root关键字开头的所有行，并输出该行的第1列和第7列，中间以“，”号分割。</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">awk</span> -F: <span class="token string">'/^root/{print <span class="token variable">$1</span>","<span class="token variable">$7</span>}'</span> <span class="token function">passwd</span> 
root,/bin/bash
</code></pre> 
   <p>④只显示/etc/passwd的第一列和第七列，以逗号分割，且在所有行前面添加列名user，shell在最后一行添加"ltc，/bin/zuishuai"。</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">awk</span> -F <span class="token keyword">:</span> <span class="token string">'BEGIN{print "user, shell"} {print <span class="token variable">$1</span>","<span class="token variable">$7</span>} END{print "dahaige,/bin/zuishuai"}'</span> <span class="token function">passwd</span>
user, shell
root,/bin/bash
bin,/sbin/nologin
。。。
atguigu,/bin/bash
ltc,/bin/zuishuai
<span class="token comment">#注意:BEGIN 在所有数据读取行之前执行；END 在所有数据执行之后执行。</span>
</code></pre> 
   <p>⑤将passwd文件中的用户id增加数值1并输出</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">awk</span> -v i<span class="token operator">=</span>1 -F: <span class="token string">'{print <span class="token variable">$3</span>+i}'</span> <span class="token function">passwd</span>
1
2
3
4
</code></pre> 
   <p>(4)awk的内置变量</p> 
  </blockquote> 
  <table> 
   <thead> 
    <tr> 
     <th>变量</th> 
     <th>说明</th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <td>FILENAME</td> 
     <td>文件名</td> 
    </tr> 
    <tr> 
     <td>NR</td> 
     <td>已读的记录数</td> 
    </tr> 
    <tr> 
     <td>NF</td> 
     <td>浏览记录的域的个数（切割后，列的个数）</td> 
    </tr> 
   </tbody> 
  </table>
  <blockquote> 
   <p>(5)案例实操<br> ①统计passwd文件名，每行的行号，每行的列数</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">awk</span> -F: <span class="token string">'{print "filename:" FILENAME ", linenumber:" NR ",columns:" NF}'</span> <span class="token function">passwd</span> 
filename:passwd, linenumber:1,columns:7
filename:passwd, linenumber:2,columns:7
filename:passwd, linenumber:3,columns:7
</code></pre> 
   <p>②切割IP</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">ifconfig</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"netmask"</span> <span class="token operator">|</span> <span class="token function">awk</span> -F <span class="token string">"inet"</span> 
<span class="token string">'{print <span class="token variable">$2</span>}'</span> <span class="token operator">|</span> <span class="token function">awk</span> -F <span class="token string">" "</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span>
</code></pre> 
   <p>③查询sed.txt中空行所在的行号</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">awk</span> <span class="token string">'/^$/{print NR}'</span> sed.txt 
5
</code></pre> 
  </blockquote> 
  <p>4.sort</p> 
  <blockquote> 
   <p>(1)基本语法<br> sort(选项)(参数)</p> 
  </blockquote> 
  <blockquote> 
   <p>(2)选项参数说明</p> 
  </blockquote> 
  <table> 
   <thead> 
    <tr> 
     <th>选项</th> 
     <th>说明</th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <td>-n</td> 
     <td>依照数值的大小排序</td> 
    </tr> 
    <tr> 
     <td>-r</td> 
     <td>以相反的顺序来排序</td> 
    </tr> 
    <tr> 
     <td>-t</td> 
     <td>设置排序时所用的分隔字符</td> 
    </tr> 
    <tr> 
     <td>-k</td> 
     <td>指定需要排序的列</td> 
    </tr> 
   </tbody> 
  </table>
  <blockquote> 
   <p>(3)案例实操<br> ①数据准备</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> sort.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim sort.sh 
bb:40:5.4
bd:20:4.2
xz:50:2.3
cls:10:3.5
ss:30:1.6
</code></pre> 
   <p>②按照“：”分割后的第三列倒序排序。</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">sort</span> -t <span class="token keyword">:</span> -nrk 3  sort.sh 
bb:40:5.4
bd:20:4.2
cls:10:3.5
xz:50:2.3
ss:30:1.6
</code></pre> 
  </blockquote> 
  <p>5.wc</p> 
  <blockquote> 
   <p>(1)基本语法<br> wc [选项参数] filename</p> 
  </blockquote> 
  <blockquote> 
   <p>(2)选项参数</p> 
  </blockquote> 
  <table> 
   <thead> 
    <tr> 
     <th>选项参数</th> 
     <th>功能</th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <td>-l</td> 
     <td>统计文件行数</td> 
    </tr> 
    <tr> 
     <td>-w</td> 
     <td>统计文件的单词数</td> 
    </tr> 
    <tr> 
     <td>-m</td> 
     <td>统计文件的字符数</td> 
    </tr> 
    <tr> 
     <td>-c</td> 
     <td>统计文件的字节数</td> 
    </tr> 
   </tbody> 
  </table>
  <blockquote> 
   <p>(3)案例实操<br> 统计/etc/profile文件的行数、单词数、字节数！</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span><span class="token comment"># wc -w /etc/profile </span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span><span class="token comment"># wc -l /etc/profile </span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span><span class="token comment"># wc -m /etc/profile</span>
</code></pre> 
  </blockquote> 
  <h2><a id="10_811"></a>10、正则表达式</h2> 
  <blockquote> 
   <p>正则表达式我认为很重要，下次专门找个时间做🙂</p> 
  </blockquote> 
 </div> 
 <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e0530931f4.css" rel="stylesheet"> 
</div>, newsAttr=2, newsImage=https://profile.csdnimg.cn/B/7/4/3_qq_43182741, orderNum=null, isPublic=null, thumbs=10, visits=2, comments=null, collects=10, newsSource=https://blog.csdn.net/qq_43182741, newsSourceAuthor=爱学习的老冰棍, newsSourceTags=shell,大数据, status=null, delFlag=null, createBy=null, createTime=null, updateBy=null, updateTime=null, remark=null, beginTime=null, endTime=null, params={}, newsType=null)
2020-09-03 15:19:23.915 WARN  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]o.s.a.rabbit.listener.ConditionalRejectingErrorHandler.log:129 -Execution of Rabbit message listener failed.
org.springframework.amqp.rabbit.support.ListenerExecutionFailedException: Listener method 'public void com.linq.news.task.listener.NewsConsumer.receiveNews(org.springframework.messaging.Message<java.util.HashMap<java.lang.String, java.lang.Object>>,com.rabbitmq.client.Channel) throws java.io.IOException' threw exception
	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:228)
	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandlerAndProcessResult(MessagingMessageListenerAdapter.java:148)
	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.onMessage(MessagingMessageListenerAdapter.java:133)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:1591)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.actualInvokeListener(AbstractMessageListenerContainer.java:1510)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:1498)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:1489)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.executeListener(AbstractMessageListenerContainer.java:1433)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.doReceiveAndExecute(SimpleMessageListenerContainer.java:970)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.receiveAndExecute(SimpleMessageListenerContainer.java:916)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.access$1600(SimpleMessageListenerContainer.java:83)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer$AsyncMessageProcessingConsumer.mainLoop(SimpleMessageListenerContainer.java:1291)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer$AsyncMessageProcessingConsumer.run(SimpleMessageListenerContainer.java:1197)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.linq.common.exception.CustomException: 消息队列消费异常新增新闻'大数据学习之Shell'失败，新闻标题已存在
	at com.linq.news.task.listener.NewsConsumer.receiveNews(NewsConsumer.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:171)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:120)
	at org.springframework.amqp.rabbit.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:53)
	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:220)
	... 13 common frames omitted
2020-09-03 15:19:23.916 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:45 -接收到消息的时间----->>> 1599117563916
消费tag->>> 10
从消息队列中拿到数据----------->>>> {csdnNews=LinqNews(newsId=null, userId=1, newsTypeId=18, newsTitle=大厂Redis高并发场景设计，面试问的都在这！, newsContent=<div id="article_content" class="article_content clearfix"> 
 <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3d4dc5c1de.css"> 
 <div id="content_views" class="markdown_views prism-atom-one-dark"> 
  <!-- flowchart 箭头图标 勿删 --> 
  <svg xmlns="http://www.w3.org/2000/svg" style="display: none;"> 
   <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path> 
  </svg> 
  <p></p>
  <div class="toc">
   <h3>文章目录</h3>
   <ul>
    <ul>
     <li><a href="#_1" rel="nofollow">写在前面</a></li>
     <li><a href="#_4" rel="nofollow">正文</a></li>
     <li><a href="#_10" rel="nofollow">一、常用指令</a></li>
     <li><a href="#_18" rel="nofollow">二、场景解析</a></li>
     <ul>
      <li><a href="#11string_20" rel="nofollow">1.1string存储</a></li>
      <li><a href="#12String__23" rel="nofollow">1.2String 类型使用场景</a></li>
      <li><a href="#21hash_44" rel="nofollow">2.1hash存储数据</a></li>
      <li><a href="#22Hash__50" rel="nofollow">2.2Hash 类型使用场景</a></li>
      <li><a href="#23_68" rel="nofollow">2.3实现信息存储的优缺点</a></li>
      <li><a href="#31List__96" rel="nofollow">3.1List 类型使用场景</a></li>
      <li><a href="#41set__123" rel="nofollow">4.1set 类型使用场景</a></li>
      <li><a href="#42Set_137" rel="nofollow">4.2Set集合特殊的操作命令</a></li>
      <li><a href="#43Set_153" rel="nofollow">4.3Set集合特殊的操作命令应用场景</a></li>
      <li><a href="#51_Zset_162" rel="nofollow">5.1 Zset有序集合</a></li>
      <li><a href="#52Zset__169" rel="nofollow">5.2Zset 类型使用场景</a></li>
     </ul>
    </ul>
   </ul>
  </div>
  <p></p> 
  <h2><a id="_1"></a>写在前面</h2> 
  <p><strong>2020年面试必备的Java后端进阶面试题总结了一份复习指南在Github上，内容详细，图文并茂，有需要学习的朋友可以Star一下！</strong><br> <strong>GitHub地址：</strong> <a href="https://github.com/Java-Ling/Java-Interview-guide">https://github.com/Java-Ling/Java-Interview-guide</a></p> 
  <h2><a id="_4"></a>正文</h2> 
  <p>分布式缓存是分布式系统中的重要组件，主要解决高并发、大数据场景下，热点数据访问的性能问题，提供高性能的数据快速访问。</p> 
  <p>使用缓存常见场景是：项目中部分数据访问比较频繁，对下游 DB（例如 MySQL）造成服务压力，这时候可以使用缓存来提高效率。<strong>下面来讲BAT等一线企业中Redis各种应用场景核心设计！</strong></p> 
  <h2><a id="_10"></a>一、常用指令</h2> 
  <p>接下来看看每个数据结构常用的指令有哪些，我们用一张表比较清晰的展示：</p> 
  <p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8zLzEwLzE3MGMzYmE5MmZmZjcyNTQ?x-oss-process=image/format,png" alt="img"></p> 
  <h2><a id="_18"></a>二、场景解析</h2> 
  <h3><a id="11string_20"></a>1.1string存储</h3> 
  <p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8zLzEwLzE3MGMzYmMyMzcyYWRmNmI?x-oss-process=image/format,png" alt="img"></p> 
  <h3><a id="12String__23"></a>1.2String 类型使用场景</h3> 
  <p><strong>场景一：商品库存数</strong></p> 
  <p>从业务上，商品库存数据是热点数据，交易行为会直接影响库存。而 Redis 自身 String 类型提供了：</p> 
  <ol> 
   <li>set goods_id 10; 设置 id 为 good_id 的商品的库存初始值为 10；</li> 
   <li>decr goods_id; 当商品被购买时候，库存数据减 1。</li> 
  </ol> 
  <p><strong>依次类推的场景</strong>：商品的浏览次数，问题或者回复的点赞次数等。这种计数的场景都可以考虑利用 Redis 来实现。</p> 
  <p><strong>场景二：时效信息存储</strong></p> 
  <p>Redis 的数据存储具有自动失效能力。也就是存储的 key-value 可以设置过期时间：set(key, value, expireTime)。</p> 
  <p>比如，用户登录某个 App 需要获取登录验证码， 验证码在 30 秒内有效。那么我们就可以使用 String 类型存储验证码，同时设置 30 秒的失效时间。</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200519213848101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J4aDgxMQ==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-YVYYAIf9-1589895386136)(data:image/svg+xml;utf8,)]"></p> 
  <h3><a id="21hash_44"></a>2.1hash存储数据</h3> 
  <p><img src="https://img-blog.csdnimg.cn/20200519213854667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J4aDgxMQ==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-EJFSijlP-1589895386138)(data:image/svg+xml;utf8,)]"></p> 
  <h3><a id="22Hash__50"></a>2.2Hash 类型使用场景</h3> 
  <p>Redis 在存储对象（例如：用户信息）的时候需要对对象进行序列化转换然后存储。</p> 
  <p>还有一种形式，就是将对象数据转换为 JSON 结构数据，然后存储 JSON 的字符串到 Redis。</p> 
  <p>对于一些对象类型，还有一种比较方便的类型，那就是按照 Redis 的 Hash 类型进行存储。</p> 
  <p>例如，我们存储一些网站用户的基本信息， 我们可以使用：</p> 
  <p>这样就存储了一个用户基本信息，存储信息有：{name : 小明， phone : “123456”，sex : “男”}</p> 
  <p>当然这种类似场景还非常多， 比如存储订单的数据，产品的数据，商家基本信息等。<strong>以淘宝购物车为主</strong></p> 
  <p><img src="https://img-blog.csdnimg.cn/20200519213903365.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J4aDgxMQ==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-rKfgbmuK-1589895386139)(data:image/svg+xml;utf8,)]"></p> 
  <h3><a id="23_68"></a>2.3实现信息存储的优缺点</h3> 
  <p><strong>1.原生:</strong></p> 
  <ul> 
   <li>set user: 1:name james;</li> 
   <li>set user:1:age 23;</li> 
   <li>set user:1:sex boy;</li> 
  </ul> 
  <p><strong>优点:</strong> 简单直观，每个键对应一个值</p> 
  <p><strong>缺点:</strong> 键数过多，占用内存多，用户信息过于分散，不用于生产环境</p> 
  <p><strong>2.将对象序列化存入</strong></p> 
  <p>redis set user:1 serial ize (userInfo);</p> 
  <p><strong>优点:</strong> 编程简单，若使用序列化合理内存使用率高</p> 
  <p><strong>缺点:</strong> 序列化与反序列化有一定开销，更新属性时需要把userInfo全取出来进行反序列化，更新后再序列化到redis</p> 
  <p><strong>3.hash存储:</strong></p> 
  <p>hmset user:1 name james age 23 sex boy</p> 
  <p><strong>优点:</strong> 简单直观，使用合理可减少内存空间消耗</p> 
  <p><strong>缺点:</strong> 要控制ziplist 与hashtable两种编码转换，Mhashtable会消耗更多内存。</p> 
  <h3><a id="31List__96"></a>3.1List 类型使用场景</h3> 
  <p>list 是按照插入顺序排序的字符串链表。可以在头部和尾部插入新的元素（双向链表实现，两端添加元素的时间复杂度为 O(1)） 。</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200519213932776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J4aDgxMQ==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Zvx5IVDF-1589895386139)(data:image/svg+xml;utf8,)]"></p> 
  <p><strong>场景一：消息队列实现</strong></p> 
  <p>目前有很多专业的消息队列组件 Kafka、RabbitMQ 等。 我们在这里仅仅是使用 list 的特征来实现消息队列的要求。在实际技术选型的过程中，大家可以慎重思考。</p> 
  <p><strong>list 存储就是一个队列的存储形式：</strong></p> 
  <ol> 
   <li>lpush key value; 在 key 对应 list 的头部添加字符串元素；</li> 
   <li>rpop key;移除列表的最后一个元素，返回值为移除的元素。</li> 
  </ol> 
  <p><strong>场景二：最新上架商品</strong></p> 
  <p>在交易网站首页经常会有新上架产品推荐的模块， 这个模块是存储了最新上架前 100 名。</p> 
  <p>这时候使用 Redis 的 list 数据结构，来进行 TOP 100 新上架产品的存储。</p> 
  <p>Redis ltrim 指令对一个列表进行修剪（trim），这样 list 就会只包含指定范围的指定元素。</p> 
  <p>start 和 stop 都是由 0 开始计数的，这里的 0 是列表里的第一个元素（表头），1 是第二个元素。</p> 
  <h3><a id="41set__123"></a>4.1set 类型使用场景</h3> 
  <p>set 也是存储了一个集合列表功能。和 list 不同，set 具备去重功能。当需要存储一个列表信息，同时要求列表内的元素不能有重复，这时候使用 set 比较合适。与此同时，set 还提供的交集、并集、差集。</p> 
  <p>例如，在交易网站，我们会存储用户感兴趣的商品信息，在进行相似用户分析的时候， 可以通过计算两个不同用户之间感兴趣商品的数量来提供一些依据。</p> 
  <p>获取到两个用户相似的产品， 然后确定相似产品的类目就可以进行用户分析。</p> 
  <p>类似的应用场景还有， 社交场景下共同关注好友， 相似兴趣 tag 等场景的支持。</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200519213955472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J4aDgxMQ==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Ig9Ydf02-1589895386140)(data:image/svg+xml;utf8,)]"></p> 
  <h3><a id="42Set_137"></a>4.2Set集合特殊的操作命令</h3> 
  <p><strong>setA={A,B,C} setB={B, C}</strong></p> 
  <blockquote> 
   <p>1）集合与集合之间的交集</p> 
   <p>sinter setA setB－－&gt;得到集合{B,C}</p> 
   <ol start="2"> 
    <li>集合与集合之间的并集</li> 
   </ol> 
   <p>sunion setA setB －－&gt;得到集合{A,B,C}</p> 
   <p>3）集合与集合之间的差集</p> 
   <p>sdiff setA setB－－&gt;得到集合{A}</p> 
  </blockquote> 
  <h3><a id="43Set_153"></a>4.3Set集合特殊的操作命令应用场景</h3> 
  <p><strong>如何实现微博的微关系设计？（看视频更香）</strong></p> 
  <p><a href="https://www.bilibili.com/video/av92159723" rel="nofollow">www.bilibili.com/video/av921…</a></p> 
  <p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8zLzEwLzE3MGMzYzU5NDk2NTE1MWI?x-oss-process=image/format,png" alt="img"></p> 
  <h3><a id="51_Zset_162"></a>5.1 Zset有序集合</h3> 
  <p>常用于排行榜，如视频网站需要对用户上传视频做排行榜，或点赞数与集合有联系，不能有重复的成员</p> 
  <p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8zLzEwLzE3MGMzYzZlZmIzNWUwYzM?x-oss-process=image/format,png" alt="img"></p> 
  <h3><a id="52Zset__169"></a>5.2Zset 类型使用场景</h3> 
  <p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8zLzEwLzE3MGMzYzhjMjVmYzU3MTQ?x-oss-process=image/format,png" alt="img"></p> 
 </div> 
 <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e0530931f4.css" rel="stylesheet"> 
</div>, newsAttr=2, newsImage=https://profile.csdnimg.cn/1/4/0/3_rxh811, orderNum=null, isPublic=null, thumbs=132, visits=6, comments=null, collects=132, newsSource=https://blog.csdn.net/rxh811, newsSourceAuthor=码农清风, newsSourceTags=链表,Redis,队列,java,列表,redis, status=null, delFlag=null, createBy=null, createTime=null, updateBy=null, updateTime=null, remark=null, beginTime=null, endTime=null, params={}, newsType=null)}
2020-09-03 15:19:23.917 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:50 -获取peNews--->>>null
2020-09-03 15:19:23.917 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:51 -获取entertainmentNews--->>>null
2020-09-03 15:19:23.917 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:52 -获取csdnNews--->>>LinqNews(newsId=null, userId=1, newsTypeId=18, newsTitle=大厂Redis高并发场景设计，面试问的都在这！, newsContent=<div id="article_content" class="article_content clearfix"> 
 <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3d4dc5c1de.css"> 
 <div id="content_views" class="markdown_views prism-atom-one-dark"> 
  <!-- flowchart 箭头图标 勿删 --> 
  <svg xmlns="http://www.w3.org/2000/svg" style="display: none;"> 
   <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path> 
  </svg> 
  <p></p>
  <div class="toc">
   <h3>文章目录</h3>
   <ul>
    <ul>
     <li><a href="#_1" rel="nofollow">写在前面</a></li>
     <li><a href="#_4" rel="nofollow">正文</a></li>
     <li><a href="#_10" rel="nofollow">一、常用指令</a></li>
     <li><a href="#_18" rel="nofollow">二、场景解析</a></li>
     <ul>
      <li><a href="#11string_20" rel="nofollow">1.1string存储</a></li>
      <li><a href="#12String__23" rel="nofollow">1.2String 类型使用场景</a></li>
      <li><a href="#21hash_44" rel="nofollow">2.1hash存储数据</a></li>
      <li><a href="#22Hash__50" rel="nofollow">2.2Hash 类型使用场景</a></li>
      <li><a href="#23_68" rel="nofollow">2.3实现信息存储的优缺点</a></li>
      <li><a href="#31List__96" rel="nofollow">3.1List 类型使用场景</a></li>
      <li><a href="#41set__123" rel="nofollow">4.1set 类型使用场景</a></li>
      <li><a href="#42Set_137" rel="nofollow">4.2Set集合特殊的操作命令</a></li>
      <li><a href="#43Set_153" rel="nofollow">4.3Set集合特殊的操作命令应用场景</a></li>
      <li><a href="#51_Zset_162" rel="nofollow">5.1 Zset有序集合</a></li>
      <li><a href="#52Zset__169" rel="nofollow">5.2Zset 类型使用场景</a></li>
     </ul>
    </ul>
   </ul>
  </div>
  <p></p> 
  <h2><a id="_1"></a>写在前面</h2> 
  <p><strong>2020年面试必备的Java后端进阶面试题总结了一份复习指南在Github上，内容详细，图文并茂，有需要学习的朋友可以Star一下！</strong><br> <strong>GitHub地址：</strong> <a href="https://github.com/Java-Ling/Java-Interview-guide">https://github.com/Java-Ling/Java-Interview-guide</a></p> 
  <h2><a id="_4"></a>正文</h2> 
  <p>分布式缓存是分布式系统中的重要组件，主要解决高并发、大数据场景下，热点数据访问的性能问题，提供高性能的数据快速访问。</p> 
  <p>使用缓存常见场景是：项目中部分数据访问比较频繁，对下游 DB（例如 MySQL）造成服务压力，这时候可以使用缓存来提高效率。<strong>下面来讲BAT等一线企业中Redis各种应用场景核心设计！</strong></p> 
  <h2><a id="_10"></a>一、常用指令</h2> 
  <p>接下来看看每个数据结构常用的指令有哪些，我们用一张表比较清晰的展示：</p> 
  <p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8zLzEwLzE3MGMzYmE5MmZmZjcyNTQ?x-oss-process=image/format,png" alt="img"></p> 
  <h2><a id="_18"></a>二、场景解析</h2> 
  <h3><a id="11string_20"></a>1.1string存储</h3> 
  <p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8zLzEwLzE3MGMzYmMyMzcyYWRmNmI?x-oss-process=image/format,png" alt="img"></p> 
  <h3><a id="12String__23"></a>1.2String 类型使用场景</h3> 
  <p><strong>场景一：商品库存数</strong></p> 
  <p>从业务上，商品库存数据是热点数据，交易行为会直接影响库存。而 Redis 自身 String 类型提供了：</p> 
  <ol> 
   <li>set goods_id 10; 设置 id 为 good_id 的商品的库存初始值为 10；</li> 
   <li>decr goods_id; 当商品被购买时候，库存数据减 1。</li> 
  </ol> 
  <p><strong>依次类推的场景</strong>：商品的浏览次数，问题或者回复的点赞次数等。这种计数的场景都可以考虑利用 Redis 来实现。</p> 
  <p><strong>场景二：时效信息存储</strong></p> 
  <p>Redis 的数据存储具有自动失效能力。也就是存储的 key-value 可以设置过期时间：set(key, value, expireTime)。</p> 
  <p>比如，用户登录某个 App 需要获取登录验证码， 验证码在 30 秒内有效。那么我们就可以使用 String 类型存储验证码，同时设置 30 秒的失效时间。</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200519213848101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J4aDgxMQ==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-YVYYAIf9-1589895386136)(data:image/svg+xml;utf8,)]"></p> 
  <h3><a id="21hash_44"></a>2.1hash存储数据</h3> 
  <p><img src="https://img-blog.csdnimg.cn/20200519213854667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J4aDgxMQ==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-EJFSijlP-1589895386138)(data:image/svg+xml;utf8,)]"></p> 
  <h3><a id="22Hash__50"></a>2.2Hash 类型使用场景</h3> 
  <p>Redis 在存储对象（例如：用户信息）的时候需要对对象进行序列化转换然后存储。</p> 
  <p>还有一种形式，就是将对象数据转换为 JSON 结构数据，然后存储 JSON 的字符串到 Redis。</p> 
  <p>对于一些对象类型，还有一种比较方便的类型，那就是按照 Redis 的 Hash 类型进行存储。</p> 
  <p>例如，我们存储一些网站用户的基本信息， 我们可以使用：</p> 
  <p>这样就存储了一个用户基本信息，存储信息有：{name : 小明， phone : “123456”，sex : “男”}</p> 
  <p>当然这种类似场景还非常多， 比如存储订单的数据，产品的数据，商家基本信息等。<strong>以淘宝购物车为主</strong></p> 
  <p><img src="https://img-blog.csdnimg.cn/20200519213903365.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J4aDgxMQ==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-rKfgbmuK-1589895386139)(data:image/svg+xml;utf8,)]"></p> 
  <h3><a id="23_68"></a>2.3实现信息存储的优缺点</h3> 
  <p><strong>1.原生:</strong></p> 
  <ul> 
   <li>set user: 1:name james;</li> 
   <li>set user:1:age 23;</li> 
   <li>set user:1:sex boy;</li> 
  </ul> 
  <p><strong>优点:</strong> 简单直观，每个键对应一个值</p> 
  <p><strong>缺点:</strong> 键数过多，占用内存多，用户信息过于分散，不用于生产环境</p> 
  <p><strong>2.将对象序列化存入</strong></p> 
  <p>redis set user:1 serial ize (userInfo);</p> 
  <p><strong>优点:</strong> 编程简单，若使用序列化合理内存使用率高</p> 
  <p><strong>缺点:</strong> 序列化与反序列化有一定开销，更新属性时需要把userInfo全取出来进行反序列化，更新后再序列化到redis</p> 
  <p><strong>3.hash存储:</strong></p> 
  <p>hmset user:1 name james age 23 sex boy</p> 
  <p><strong>优点:</strong> 简单直观，使用合理可减少内存空间消耗</p> 
  <p><strong>缺点:</strong> 要控制ziplist 与hashtable两种编码转换，Mhashtable会消耗更多内存。</p> 
  <h3><a id="31List__96"></a>3.1List 类型使用场景</h3> 
  <p>list 是按照插入顺序排序的字符串链表。可以在头部和尾部插入新的元素（双向链表实现，两端添加元素的时间复杂度为 O(1)） 。</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200519213932776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J4aDgxMQ==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Zvx5IVDF-1589895386139)(data:image/svg+xml;utf8,)]"></p> 
  <p><strong>场景一：消息队列实现</strong></p> 
  <p>目前有很多专业的消息队列组件 Kafka、RabbitMQ 等。 我们在这里仅仅是使用 list 的特征来实现消息队列的要求。在实际技术选型的过程中，大家可以慎重思考。</p> 
  <p><strong>list 存储就是一个队列的存储形式：</strong></p> 
  <ol> 
   <li>lpush key value; 在 key 对应 list 的头部添加字符串元素；</li> 
   <li>rpop key;移除列表的最后一个元素，返回值为移除的元素。</li> 
  </ol> 
  <p><strong>场景二：最新上架商品</strong></p> 
  <p>在交易网站首页经常会有新上架产品推荐的模块， 这个模块是存储了最新上架前 100 名。</p> 
  <p>这时候使用 Redis 的 list 数据结构，来进行 TOP 100 新上架产品的存储。</p> 
  <p>Redis ltrim 指令对一个列表进行修剪（trim），这样 list 就会只包含指定范围的指定元素。</p> 
  <p>start 和 stop 都是由 0 开始计数的，这里的 0 是列表里的第一个元素（表头），1 是第二个元素。</p> 
  <h3><a id="41set__123"></a>4.1set 类型使用场景</h3> 
  <p>set 也是存储了一个集合列表功能。和 list 不同，set 具备去重功能。当需要存储一个列表信息，同时要求列表内的元素不能有重复，这时候使用 set 比较合适。与此同时，set 还提供的交集、并集、差集。</p> 
  <p>例如，在交易网站，我们会存储用户感兴趣的商品信息，在进行相似用户分析的时候， 可以通过计算两个不同用户之间感兴趣商品的数量来提供一些依据。</p> 
  <p>获取到两个用户相似的产品， 然后确定相似产品的类目就可以进行用户分析。</p> 
  <p>类似的应用场景还有， 社交场景下共同关注好友， 相似兴趣 tag 等场景的支持。</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200519213955472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J4aDgxMQ==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Ig9Ydf02-1589895386140)(data:image/svg+xml;utf8,)]"></p> 
  <h3><a id="42Set_137"></a>4.2Set集合特殊的操作命令</h3> 
  <p><strong>setA={A,B,C} setB={B, C}</strong></p> 
  <blockquote> 
   <p>1）集合与集合之间的交集</p> 
   <p>sinter setA setB－－&gt;得到集合{B,C}</p> 
   <ol start="2"> 
    <li>集合与集合之间的并集</li> 
   </ol> 
   <p>sunion setA setB －－&gt;得到集合{A,B,C}</p> 
   <p>3）集合与集合之间的差集</p> 
   <p>sdiff setA setB－－&gt;得到集合{A}</p> 
  </blockquote> 
  <h3><a id="43Set_153"></a>4.3Set集合特殊的操作命令应用场景</h3> 
  <p><strong>如何实现微博的微关系设计？（看视频更香）</strong></p> 
  <p><a href="https://www.bilibili.com/video/av92159723" rel="nofollow">www.bilibili.com/video/av921…</a></p> 
  <p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8zLzEwLzE3MGMzYzU5NDk2NTE1MWI?x-oss-process=image/format,png" alt="img"></p> 
  <h3><a id="51_Zset_162"></a>5.1 Zset有序集合</h3> 
  <p>常用于排行榜，如视频网站需要对用户上传视频做排行榜，或点赞数与集合有联系，不能有重复的成员</p> 
  <p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8zLzEwLzE3MGMzYzZlZmIzNWUwYzM?x-oss-process=image/format,png" alt="img"></p> 
  <h3><a id="52Zset__169"></a>5.2Zset 类型使用场景</h3> 
  <p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8zLzEwLzE3MGMzYzhjMjVmYzU3MTQ?x-oss-process=image/format,png" alt="img"></p> 
 </div> 
 <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e0530931f4.css" rel="stylesheet"> 
</div>, newsAttr=2, newsImage=https://profile.csdnimg.cn/1/4/0/3_rxh811, orderNum=null, isPublic=null, thumbs=132, visits=6, comments=null, collects=132, newsSource=https://blog.csdn.net/rxh811, newsSourceAuthor=码农清风, newsSourceTags=链表,Redis,队列,java,列表,redis, status=null, delFlag=null, createBy=null, createTime=null, updateBy=null, updateTime=null, remark=null, beginTime=null, endTime=null, params={}, newsType=null)
2020-09-03 15:19:23.931 WARN  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]o.s.a.rabbit.listener.ConditionalRejectingErrorHandler.log:129 -Execution of Rabbit message listener failed.
org.springframework.amqp.rabbit.support.ListenerExecutionFailedException: Listener method 'public void com.linq.news.task.listener.NewsConsumer.receiveNews(org.springframework.messaging.Message<java.util.HashMap<java.lang.String, java.lang.Object>>,com.rabbitmq.client.Channel) throws java.io.IOException' threw exception
	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:228)
	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandlerAndProcessResult(MessagingMessageListenerAdapter.java:148)
	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.onMessage(MessagingMessageListenerAdapter.java:133)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:1591)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.actualInvokeListener(AbstractMessageListenerContainer.java:1510)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:1498)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:1489)
	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.executeListener(AbstractMessageListenerContainer.java:1433)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.doReceiveAndExecute(SimpleMessageListenerContainer.java:970)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.receiveAndExecute(SimpleMessageListenerContainer.java:916)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.access$1600(SimpleMessageListenerContainer.java:83)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer$AsyncMessageProcessingConsumer.mainLoop(SimpleMessageListenerContainer.java:1291)
	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer$AsyncMessageProcessingConsumer.run(SimpleMessageListenerContainer.java:1197)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.linq.common.exception.CustomException: 消息队列消费异常新增新闻'大厂Redis高并发场景设计，面试问的都在这！'失败，新闻标题已存在
	at com.linq.news.task.listener.NewsConsumer.receiveNews(NewsConsumer.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:171)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:120)
	at org.springframework.amqp.rabbit.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:53)
	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:220)
	... 13 common frames omitted
2020-09-03 15:19:24.257 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:45 -接收到消息的时间----->>> 1599117564257
消费tag->>> 11
从消息队列中拿到数据----------->>>> {csdnNews=LinqNews(newsId=null, userId=1, newsTypeId=18, newsTitle=520了，用32做个简单的小程序, newsContent=<div id="article_content" class="article_content clearfix"> 
 <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3d4dc5c1de.css"> 
 <div id="content_views" class="markdown_views prism-atelier-sulphurpool-light"> 
  <!-- flowchart 箭头图标 勿删 --> 
  <svg xmlns="http://www.w3.org/2000/svg" style="display: none;"> 
   <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path> 
  </svg> 
  <p>520到了，看着朋友圈里的花式秀恩爱，平常午餐最爱吃的泡面都变得不那么香了。于是！突发奇想，突然就来了更新的想法，今天用32来做一个非常简单的小程序：<br> </p>
  <div class="toc">
   <h3>简单放个歌，再放个图</h3>
   <ul>
    <li><a href="#stm32f103c8t6_2" rel="nofollow">stm32f103c8t6</a></li>
    <li><a href="#_5" rel="nofollow">无源蜂鸣器</a></li>
    <ul>
     <li><a href="#_7" rel="nofollow">库函数</a></li>
     <ul>
      <li><a href="#void_Bee_Initvoid_18" rel="nofollow">void Bee_Init(void)</a></li>
      <li><a href="#void_Bee_testvoid_31" rel="nofollow">void Bee_test(void)</a></li>
      <li><a href="#_50" rel="nofollow">乐谱（简谱）</a></li>
      <li><a href="#void_Play_Musicvoid_68" rel="nofollow">void Play_Music(void)</a></li>
     </ul>
    </ul>
    <li><a href="#OLED764128_93" rel="nofollow">OLED模块（7脚64*128）</a></li>
    <ul>
     <li><a href="#SPI_96" rel="nofollow">模拟SPI</a></li>
     <ul>
      <li><a href="#h_97" rel="nofollow">.h</a></li>
      <li><a href="#c_114" rel="nofollow">.c</a></li>
     </ul>
     <li><a href="#OLED_154" rel="nofollow">OLED</a></li>
     <ul>
      <li><a href="#h_155" rel="nofollow">.h</a></li>
      <li><a href="#c_165" rel="nofollow">.c</a></li>
      <li><a href="#1616_246" rel="nofollow">显示16*16的字符</a></li>
      <li><a href="#_270" rel="nofollow">字符/图片库，取模</a></li>
     </ul>
    </ul>
   </ul>
  </div>
  <p></p> 
  <h1><a id="stm32f103c8t6_2"></a>stm32f103c8t6</h1> 
  <p>因为基本只用到两个外设，程序容量也很小，所以用c8t6就刚刚好<br> <img src="https://img-blog.csdnimg.cn/20200520123045284.png#pic_center" alt="在这里插入图片描述"></p> 
  <h1><a id="_5"></a>无源蜂鸣器</h1> 
  <p>这里要用的是<strong>无源蜂鸣器</strong>，其音调是可调的。</p> 
  <h2><a id="_7"></a>库函数</h2> 
  <p>我们先声明要用到的引脚以及相应的函数：</p> 
  <pre><code class="prism language-c"><span class="token macro property">#<span class="token directive keyword">define</span> BeeGpio GPIO自选</span>
<span class="token macro property">#<span class="token directive keyword">define</span> Bee GPIO_Pin_自选 </span>

<span class="token keyword">void</span> <span class="token function">Bee_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//蜂鸣器初始化</span>
<span class="token keyword">void</span> <span class="token function">Bee_test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//蜂鸣器测试</span>
<span class="token keyword">void</span> <span class="token function">Play_Music</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//播放音乐</span>
</code></pre> 
  <h3><a id="void_Bee_Initvoid_18"></a>void Bee_Init(void)</h3> 
  <p>这个也非常好理解，和初始化引脚是一样的 。</p> 
  <pre><code class="prism language-c"><span class="token keyword">void</span> <span class="token function">Bee_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	GPIO_InitTypeDef  GPIO_InitStructure<span class="token punctuation">;</span> 	
    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> Bee<span class="token punctuation">;</span> 
    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_Out_PP<span class="token punctuation">;</span> <span class="token comment">//推挽输出</span>
    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span> 
	<span class="token function">GPIO_Init</span><span class="token punctuation">(</span>BeeGpio<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>	
	
	<span class="token function">GPIO_WriteBit</span><span class="token punctuation">(</span>BeeGpio<span class="token punctuation">,</span>Bee<span class="token punctuation">,</span><span class="token punctuation">(</span>BitAction<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre> 
  <h3><a id="void_Bee_testvoid_31"></a>void Bee_test(void)</h3> 
  <p>在主函数演奏之前，我们先测试一下蜂鸣器好不好使，让它先响一声：</p> 
  <pre><code class="prism language-c"><span class="token keyword">void</span> <span class="token function">Bee_test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
	u16 i<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">200</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token function">GPIO_WriteBit</span><span class="token punctuation">(</span>BeeGpio<span class="token punctuation">,</span>Bee<span class="token punctuation">,</span><span class="token punctuation">(</span>BitAction<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
		<span class="token function">GPIO_WriteBit</span><span class="token punctuation">(</span>BeeGpio<span class="token punctuation">,</span>Bee<span class="token punctuation">,</span><span class="token punctuation">(</span>BitAction<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre> 
  <p><font color="#DC143C" size="4" face="黑体">为了给下文的演奏做铺垫，发出声响的原理现在要着重强调一下：</font><br> （delay函数是已经写好的，有us、ms、s等等单位，这里用的是us）</p> 
  <ul> 
   <li>在这个for循环里，先后两次的delay_us(500)加在一起构成了<strong>一个周期</strong>，这个周期的时间长是1000us，也就是1ms。在这1ms的时间里，一半的时间蜂鸣器不响，另一半的时间响，如此重复200次，就成为了我们人类耳朵听到的一个时间约为200ms的响声。</li> 
  </ul> 
  <h3><a id="_50"></a>乐谱（简谱）</h3> 
  <p>以一个非常简单的粉刷匠为例：（希望我没有记错谱子哈哈哈）<br> <img src="https://img-blog.csdnimg.cn/20200520125811854.png#pic_center" alt="在这里插入图片描述"></p> 
  <ul> 
   <li>C调中音12345对应的声音频率分别是：523、587、659、698、784Hz。所以我们就可以把简谱中的数字依次替换（<strong>C调其他音对应频率见文末注脚</strong><sup class="footnote-ref"><a href="#fn1" rel="nofollow" id="fnref1">1</a></sup>）</li> 
   <li>每个音都是要持续一定时间的，以ms为单位，比如“2432”的声音要保持一致，而“5-”要持续略长的时间</li> 
  </ul> 
  <p>以“2432|5-”为例，我们把音调与对应的时间 两两一组，放到一个数组里：</p> 
  <pre><code class="prism language-c">uc16 m_24325<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token comment">//奇数项为频率，偶数项为持续时间（ms）</span>
	<span class="token number">587</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span>
	<span class="token number">698</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span>
	<span class="token number">659</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span>
	<span class="token number">587</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span>
	<span class="token number">784</span><span class="token punctuation">,</span><span class="token number">750</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre> 
  <p>我在测试的时候发现如果严格按照音调对应频率的话，听起来反而与想象中的音乐差了不少（难道是蜂鸣器的事？）所以稍微改了一下频率。</p> 
  <h3><a id="void_Play_Musicvoid_68"></a>void Play_Music(void)</h3> 
  <pre><code class="prism language-c"> <span class="token keyword">void</span> <span class="token function">Play_Music</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
	u16 i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m_24325<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">*</span>m_24325<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token function">GPIO_WriteBit</span><span class="token punctuation">(</span>BeeGpio<span class="token punctuation">,</span>Bee<span class="token punctuation">,</span><span class="token punctuation">(</span>BitAction<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">500000</span><span class="token operator">/</span>m_24325<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">GPIO_WriteBit</span><span class="token punctuation">(</span>BeeGpio<span class="token punctuation">,</span>Bee<span class="token punctuation">,</span><span class="token punctuation">(</span>BitAction<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
			<span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">500000</span><span class="token operator">/</span>m_24325<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
		<span class="token punctuation">}</span>	
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre> 
  <ul> 
   <li>因为在前文的乐谱中，记了10个数据，5对音调与时间，所以令i=0;i&lt;5</li> 
   <li>在第二个for循环中，先后两次delay_us(500000/music1[i*2])，使得周期变为1000 000/频率</li> 
   <li>而 j&lt;m_24325[i*2]<em>m_24325[i</em>2+1]/1000 和 周期共同决定了蜂鸣器发出这个频率对应音调的时间</li> 
  </ul> 
  <p>演算一下：以“523Hz”响750ms为例：<br> <img src="https://img-blog.csdnimg.cn/20200520135502513.png" alt="在这里插入图片描述"><br> 如此，我们便能演奏一些基本的曲子了，只需要自己写一个乐谱就好了。<br> void Play_Music(void)也可以写为有输入参数的函数，这样便于我们用同一个函数调用不同的乐谱。</p> 
  <p>接下来就到了另一个模块：</p> 
  <h1><a id="OLED764128_93"></a>OLED模块（7脚64*128）</h1> 
  <p>买到OLED模块以后，商家往往都会附赠配套程序的，不过往往都会赠IIC的程序。这里把我以前用的SPI程序放上。</p> 
  <h2><a id="SPI_96"></a>模拟SPI</h2> 
  <h3><a id="h_97"></a>.h</h3> 
  <pre><code class="prism language-c"><span class="token macro property">#<span class="token directive keyword">define</span> OLED_CMD 0 </span>
<span class="token macro property">#<span class="token directive keyword">define</span> OLED_DATA 1 </span>

<span class="token macro property">#<span class="token directive keyword">define</span> OLED_CLK PAout(4) </span>
<span class="token macro property">#<span class="token directive keyword">define</span> OLED_MOSI PAout(3) </span>
<span class="token macro property">#<span class="token directive keyword">define</span> OLED_RST PAout(2) </span>
<span class="token macro property">#<span class="token directive keyword">define</span> OLED_DC PAout(1) </span>

<span class="token keyword">void</span> <span class="token function">OLED_SPI_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">void</span> <span class="token function">SPI_WriteByte</span><span class="token punctuation">(</span>uint8_t addr<span class="token punctuation">,</span>uint8_t data<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">void</span> <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> cmd<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">void</span> <span class="token function">WriteData</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre> 
  <h3><a id="c_114"></a>.c</h3> 
  <pre><code class="prism language-c"><span class="token keyword">void</span> <span class="token function">OLED_SPI_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>
    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOA <span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin<span class="token operator">=</span>GPIO_Pin_1<span class="token operator">|</span>GPIO_Pin_2<span class="token operator">|</span>GPIO_Pin_3<span class="token operator">|</span>GPIO_Pin_4<span class="token punctuation">;</span> 
    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode<span class="token operator">=</span>GPIO_Mode_Out_PP<span class="token punctuation">;</span>
    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed<span class="token operator">=</span>GPIO_Speed_50MHz<span class="token punctuation">;</span>
    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span><span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">void</span> <span class="token function">SPI_WriteByte</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> data<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    OLED_DC <span class="token operator">=</span>cmd<span class="token punctuation">;</span>
    OLED_CLK<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        OLED_CLK<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token operator">&amp;</span><span class="token number">0x80</span><span class="token punctuation">)</span>OLED_MOSI<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> 
        <span class="token keyword">else</span> OLED_MOSI<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        OLED_CLK<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        data<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    OLED_CLK<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    OLED_DC<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">SPI_WriteByte</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">WriteData</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">SPI_WriteByte</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>OLED_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
  <h2><a id="OLED_154"></a>OLED</h2> 
  <h3><a id="h_155"></a>.h</h3> 
  <pre><code class="prism language-c"><span class="token keyword">void</span> <span class="token function">OLED_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">OLED_ON</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">OLED_OFF</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">OLED_Refresh_Gram</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">OLED_Clear</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
  <h3><a id="c_165"></a>.c</h3> 
  <pre><code class="prism language-c">u8 OLED_GRAM<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   

<span class="token keyword">void</span> <span class="token function">OLED_DLY_ms</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> ms<span class="token punctuation">)</span>
<span class="token punctuation">{</span>                         
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    a<span class="token operator">=</span><span class="token number">1335</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ms<span class="token operator">--</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">OLED_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">OLED_SPI_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    OLED_CLK <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    OLED_RST <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">OLED_DLY_ms</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    OLED_RST <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

      <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xae</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xd5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xa8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x3f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xd3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xB0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x8d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xa1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xc8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xda</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x81</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xd9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xf1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xdb</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xa4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xa6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xaf</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

    <span class="token function">OLED_Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">OLED_Refresh_Gram</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    u8 i<span class="token punctuation">,</span>n<span class="token punctuation">;</span>         
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  
    <span class="token punctuation">{</span>  
        <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xb0</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>   
        <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      
        <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      
        <span class="token keyword">for</span><span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>n<span class="token operator">&lt;</span><span class="token number">128</span><span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">WriteData</span><span class="token punctuation">(</span>OLED_GRAM<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>   
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">OLED_Clear</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>  
<span class="token punctuation">{</span>  
   	u8 j<span class="token punctuation">,</span>t<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>t<span class="token operator">=</span><span class="token number">0xB0</span><span class="token punctuation">;</span>t<span class="token operator">&lt;</span><span class="token number">0xB8</span><span class="token punctuation">;</span>t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	   <span class="token function">WriteCmd</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
		 <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		 <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
		<span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">132</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 			    <span class="token function">WriteData</span><span class="token punctuation">(</span><span class="token number">0x11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre> 
  <h3><a id="1616_246"></a>显示16*16的字符</h3> 
  <p>这个是仿照商家的IIC例程改成SPI的写法，其实驱动OLED的方法都是一样的，只不过IIC和SPI略有不同而已（3个输入参数会在稍后讲到）</p> 
  <pre><code class="prism language-c"><span class="token keyword">void</span> <span class="token function">OLED_DISPLAY_16x16</span><span class="token punctuation">(</span>u8 x<span class="token punctuation">,</span>u8 y<span class="token punctuation">,</span> u16 w<span class="token punctuation">)</span><span class="token punctuation">{</span> 
	u8 j<span class="token punctuation">,</span>t<span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	y<span class="token operator">=</span>y<span class="token operator">-</span><span class="token number">14</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>t<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span>t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xb0</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> 
		<span class="token function">WriteCmd</span><span class="token punctuation">(</span>y<span class="token operator">/</span><span class="token number">16</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
		<span class="token function">WriteCmd</span><span class="token punctuation">(</span>y<span class="token operator">%</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 			<span class="token function">WriteData</span><span class="token punctuation">(</span>M_16<span class="token punctuation">[</span><span class="token punctuation">(</span>w<span class="token operator">*</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token operator">+</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			c<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span>x<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xAF</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre> 
  <ul> 
   <li>第一个参数x:字符的行：0、2、4、6共4行（4*16=64，把64个像素分为4行）</li> 
   <li>第二个参数y:字符的列：共128列（像素），但是因为字符是16*16的，所以用n * 16代替，便于计算</li> 
   <li>第三个参数w:对应库中的第几个字符</li> 
   <li>库：M_16（在倒数第5行），这个内容马上就讲到</li> 
  </ul> 
  <p>比如：OLED_DISPLAY_16x16(4,8*16,8)，在OLED屏幕第3行的第8列，显示<strong>库</strong>中的第9个字符</p> 
  <h3><a id="_270"></a>字符/图片库，取模</h3> 
  <p>这个库是需要咱们自己建立的，可以由取模软件自动生成每个字符对应的16进制数据。<br> 我们用到的取模软件是：<strong>PCtoLCD2002</strong><br> 配置如图：<br> <img src="https://img-blog.csdnimg.cn/20200520143131768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tfa3N5,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> 用它生成数据以后就可以把数据放到一个单独的.h文件中，作为我们自己的字符库。这里以两个16*16的空白为例</p> 
  <pre><code class="prism language-c">uc8 M_16<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//" "</span>
<span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span>
<span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span>
  <span class="token comment">//" "</span>
<span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span>
<span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre> 
  <p>这个软件还是很好用的，而且像素也可以自定，比如用64 * 128的图片铺满oled等等。详见<a href="https://www.bilibili.com/video/BV1cE411N7WA/" rel="nofollow">生日快乐（b站投稿）</a>。这里用的就是杜洋老师的开发板，我最初学32的时候就是学习杜洋老师的教程，虽然后来我又学了野火的32，正点原子的linux…(我很专一的/doge)</p> 
  <p>跑题了，这里只是举了一个16 * 16字符的例子，还有8 * 16字符、字符串、64 * 128图片等等，就请各位自己研究了/doge</p> 
  <hr> 
  <p>我是康，希望做一名能帮助到各位的博主！ <strong>我不是本来要更机器学习的嘛？</strong> 在做了在做了（0%）预计下周会发布，欢迎感兴趣的小伙伴与我共同学习，一起进步！</p> 
  <hr> 
  <table> 
   <thead> 
    <tr> 
     <th>C调低音</th> 
     <th>频率（Hz）</th> 
     <th>C调中音</th> 
     <th>频率（Hz）</th> 
     <th>C调高音</th> 
     <th>频率（Hz）</th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <td>1</td> 
     <td>262</td> 
     <td>1</td> 
     <td>523</td> 
     <td>1</td> 
     <td>1046</td> 
    </tr> 
    <tr> 
     <td>1#</td> 
     <td>277</td> 
     <td>1#</td> 
     <td>554</td> 
     <td>1#</td> 
     <td>1109</td> 
    </tr> 
    <tr> 
     <td>2</td> 
     <td>294</td> 
     <td>2</td> 
     <td>587</td> 
     <td>2</td> 
     <td>1175</td> 
    </tr> 
    <tr> 
     <td>2#</td> 
     <td>311</td> 
     <td>2#</td> 
     <td>622</td> 
     <td>2#</td> 
     <td>1245</td> 
    </tr> 
    <tr> 
     <td>3</td> 
     <td>330</td> 
     <td>3</td> 
     <td>659</td> 
     <td>3</td> 
     <td>1318</td> 
    </tr> 
    <tr> 
     <td>4</td> 
     <td>349</td> 
     <td>4</td> 
     <td>698</td> 
     <td>4</td> 
     <td>1397</td> 
    </tr> 
    <tr> 
     <td>4#</td> 
     <td>370</td> 
     <td>4#</td> 
     <td>740</td> 
     <td>4#</td> 
     <td>1480</td> 
    </tr> 
    <tr> 
     <td>5</td> 
     <td>392</td> 
     <td>5</td> 
     <td>784</td> 
     <td>5</td> 
     <td>1568</td> 
    </tr> 
    <tr> 
     <td>5#</td> 
     <td>415</td> 
     <td>5#</td> 
     <td>831</td> 
     <td>5#</td> 
     <td>1661</td> 
    </tr> 
    <tr> 
     <td>6</td> 
     <td>440</td> 
     <td>6</td> 
     <td>880</td> 
     <td>6</td> 
     <td>1760</td> 
    </tr> 
    <tr> 
     <td>6#</td> 
     <td>466</td> 
     <td>6#</td> 
     <td>932</td> 
     <td>6#</td> 
     <td>1865</td> 
    </tr> 
    <tr> 
     <td>7</td> 
     <td>494</td> 
     <td>7</td> 
     <td>988</td> 
     <td>7</td> 
     <td>1976</td> 
    </tr> 
   </tbody> 
  </table>
  <hr class="footnotes-sep"> 
  <section class="footnotes"> 
   <ol class="footnotes-list"> 
    <li id="fn1" class="footnote-item"> <a href="#fnref1" rel="nofollow" class="footnote-backref">↩︎</a></li> 
   </ol> 
  </section> 
 </div> 
 <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e0530931f4.css" rel="stylesheet"> 
</div>, newsAttr=2, newsImage=https://profile.csdnimg.cn/8/2/A/3_k_ksy, orderNum=null, isPublic=null, thumbs=86, visits=8, comments=null, collects=86, newsSource=https://blog.csdn.net/k_ksy, newsSourceAuthor=康., newsSourceTags=小程序集合,stm32,嵌入式,单片机, status=null, delFlag=null, createBy=null, createTime=null, updateBy=null, updateTime=null, remark=null, beginTime=null, endTime=null, params={}, newsType=null)}
2020-09-03 15:19:24.262 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:50 -获取peNews--->>>null
2020-09-03 15:19:24.262 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:51 -获取entertainmentNews--->>>null
2020-09-03 15:19:24.263 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:52 -获取csdnNews--->>>LinqNews(newsId=null, userId=1, newsTypeId=18, newsTitle=520了，用32做个简单的小程序, newsContent=<div id="article_content" class="article_content clearfix"> 
 <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3d4dc5c1de.css"> 
 <div id="content_views" class="markdown_views prism-atelier-sulphurpool-light"> 
  <!-- flowchart 箭头图标 勿删 --> 
  <svg xmlns="http://www.w3.org/2000/svg" style="display: none;"> 
   <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path> 
  </svg> 
  <p>520到了，看着朋友圈里的花式秀恩爱，平常午餐最爱吃的泡面都变得不那么香了。于是！突发奇想，突然就来了更新的想法，今天用32来做一个非常简单的小程序：<br> </p>
  <div class="toc">
   <h3>简单放个歌，再放个图</h3>
   <ul>
    <li><a href="#stm32f103c8t6_2" rel="nofollow">stm32f103c8t6</a></li>
    <li><a href="#_5" rel="nofollow">无源蜂鸣器</a></li>
    <ul>
     <li><a href="#_7" rel="nofollow">库函数</a></li>
     <ul>
      <li><a href="#void_Bee_Initvoid_18" rel="nofollow">void Bee_Init(void)</a></li>
      <li><a href="#void_Bee_testvoid_31" rel="nofollow">void Bee_test(void)</a></li>
      <li><a href="#_50" rel="nofollow">乐谱（简谱）</a></li>
      <li><a href="#void_Play_Musicvoid_68" rel="nofollow">void Play_Music(void)</a></li>
     </ul>
    </ul>
    <li><a href="#OLED764128_93" rel="nofollow">OLED模块（7脚64*128）</a></li>
    <ul>
     <li><a href="#SPI_96" rel="nofollow">模拟SPI</a></li>
     <ul>
      <li><a href="#h_97" rel="nofollow">.h</a></li>
      <li><a href="#c_114" rel="nofollow">.c</a></li>
     </ul>
     <li><a href="#OLED_154" rel="nofollow">OLED</a></li>
     <ul>
      <li><a href="#h_155" rel="nofollow">.h</a></li>
      <li><a href="#c_165" rel="nofollow">.c</a></li>
      <li><a href="#1616_246" rel="nofollow">显示16*16的字符</a></li>
      <li><a href="#_270" rel="nofollow">字符/图片库，取模</a></li>
     </ul>
    </ul>
   </ul>
  </div>
  <p></p> 
  <h1><a id="stm32f103c8t6_2"></a>stm32f103c8t6</h1> 
  <p>因为基本只用到两个外设，程序容量也很小，所以用c8t6就刚刚好<br> <img src="https://img-blog.csdnimg.cn/20200520123045284.png#pic_center" alt="在这里插入图片描述"></p> 
  <h1><a id="_5"></a>无源蜂鸣器</h1> 
  <p>这里要用的是<strong>无源蜂鸣器</strong>，其音调是可调的。</p> 
  <h2><a id="_7"></a>库函数</h2> 
  <p>我们先声明要用到的引脚以及相应的函数：</p> 
  <pre><code class="prism language-c"><span class="token macro property">#<span class="token directive keyword">define</span> BeeGpio GPIO自选</span>
<span class="token macro property">#<span class="token directive keyword">define</span> Bee GPIO_Pin_自选 </span>

<span class="token keyword">void</span> <span class="token function">Bee_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//蜂鸣器初始化</span>
<span class="token keyword">void</span> <span class="token function">Bee_test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//蜂鸣器测试</span>
<span class="token keyword">void</span> <span class="token function">Play_Music</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//播放音乐</span>
</code></pre> 
  <h3><a id="void_Bee_Initvoid_18"></a>void Bee_Init(void)</h3> 
  <p>这个也非常好理解，和初始化引脚是一样的 。</p> 
  <pre><code class="prism language-c"><span class="token keyword">void</span> <span class="token function">Bee_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	GPIO_InitTypeDef  GPIO_InitStructure<span class="token punctuation">;</span> 	
    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> Bee<span class="token punctuation">;</span> 
    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_Out_PP<span class="token punctuation">;</span> <span class="token comment">//推挽输出</span>
    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span> 
	<span class="token function">GPIO_Init</span><span class="token punctuation">(</span>BeeGpio<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>	
	
	<span class="token function">GPIO_WriteBit</span><span class="token punctuation">(</span>BeeGpio<span class="token punctuation">,</span>Bee<span class="token punctuation">,</span><span class="token punctuation">(</span>BitAction<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre> 
  <h3><a id="void_Bee_testvoid_31"></a>void Bee_test(void)</h3> 
  <p>在主函数演奏之前，我们先测试一下蜂鸣器好不好使，让它先响一声：</p> 
  <pre><code class="prism language-c"><span class="token keyword">void</span> <span class="token function">Bee_test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
	u16 i<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">200</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token function">GPIO_WriteBit</span><span class="token punctuation">(</span>BeeGpio<span class="token punctuation">,</span>Bee<span class="token punctuation">,</span><span class="token punctuation">(</span>BitAction<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
		<span class="token function">GPIO_WriteBit</span><span class="token punctuation">(</span>BeeGpio<span class="token punctuation">,</span>Bee<span class="token punctuation">,</span><span class="token punctuation">(</span>BitAction<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre> 
  <p><font color="#DC143C" size="4" face="黑体">为了给下文的演奏做铺垫，发出声响的原理现在要着重强调一下：</font><br> （delay函数是已经写好的，有us、ms、s等等单位，这里用的是us）</p> 
  <ul> 
   <li>在这个for循环里，先后两次的delay_us(500)加在一起构成了<strong>一个周期</strong>，这个周期的时间长是1000us，也就是1ms。在这1ms的时间里，一半的时间蜂鸣器不响，另一半的时间响，如此重复200次，就成为了我们人类耳朵听到的一个时间约为200ms的响声。</li> 
  </ul> 
  <h3><a id="_50"></a>乐谱（简谱）</h3> 
  <p>以一个非常简单的粉刷匠为例：（希望我没有记错谱子哈哈哈）<br> <img src="https://img-blog.csdnimg.cn/20200520125811854.png#pic_center" alt="在这里插入图片描述"></p> 
  <ul> 
   <li>C调中音12345对应的声音频率分别是：523、587、659、698、784Hz。所以我们就可以把简谱中的数字依次替换（<strong>C调其他音对应频率见文末注脚</strong><sup class="footnote-ref"><a href="#fn1" rel="nofollow" id="fnref1">1</a></sup>）</li> 
   <li>每个音都是要持续一定时间的，以ms为单位，比如“2432”的声音要保持一致，而“5-”要持续略长的时间</li> 
  </ul> 
  <p>以“2432|5-”为例，我们把音调与对应的时间 两两一组，放到一个数组里：</p> 
  <pre><code class="prism language-c">uc16 m_24325<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token comment">//奇数项为频率，偶数项为持续时间（ms）</span>
	<span class="token number">587</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span>
	<span class="token number">698</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span>
	<span class="token number">659</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span>
	<span class="token number">587</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span>
	<span class="token number">784</span><span class="token punctuation">,</span><span class="token number">750</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre> 
  <p>我在测试的时候发现如果严格按照音调对应频率的话，听起来反而与想象中的音乐差了不少（难道是蜂鸣器的事？）所以稍微改了一下频率。</p> 
  <h3><a id="void_Play_Musicvoid_68"></a>void Play_Music(void)</h3> 
  <pre><code class="prism language-c"> <span class="token keyword">void</span> <span class="token function">Play_Music</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
	u16 i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m_24325<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">*</span>m_24325<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token function">GPIO_WriteBit</span><span class="token punctuation">(</span>BeeGpio<span class="token punctuation">,</span>Bee<span class="token punctuation">,</span><span class="token punctuation">(</span>BitAction<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">500000</span><span class="token operator">/</span>m_24325<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">GPIO_WriteBit</span><span class="token punctuation">(</span>BeeGpio<span class="token punctuation">,</span>Bee<span class="token punctuation">,</span><span class="token punctuation">(</span>BitAction<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
			<span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">500000</span><span class="token operator">/</span>m_24325<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
		<span class="token punctuation">}</span>	
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre> 
  <ul> 
   <li>因为在前文的乐谱中，记了10个数据，5对音调与时间，所以令i=0;i&lt;5</li> 
   <li>在第二个for循环中，先后两次delay_us(500000/music1[i*2])，使得周期变为1000 000/频率</li> 
   <li>而 j&lt;m_24325[i*2]<em>m_24325[i</em>2+1]/1000 和 周期共同决定了蜂鸣器发出这个频率对应音调的时间</li> 
  </ul> 
  <p>演算一下：以“523Hz”响750ms为例：<br> <img src="https://img-blog.csdnimg.cn/20200520135502513.png" alt="在这里插入图片描述"><br> 如此，我们便能演奏一些基本的曲子了，只需要自己写一个乐谱就好了。<br> void Play_Music(void)也可以写为有输入参数的函数，这样便于我们用同一个函数调用不同的乐谱。</p> 
  <p>接下来就到了另一个模块：</p> 
  <h1><a id="OLED764128_93"></a>OLED模块（7脚64*128）</h1> 
  <p>买到OLED模块以后，商家往往都会附赠配套程序的，不过往往都会赠IIC的程序。这里把我以前用的SPI程序放上。</p> 
  <h2><a id="SPI_96"></a>模拟SPI</h2> 
  <h3><a id="h_97"></a>.h</h3> 
  <pre><code class="prism language-c"><span class="token macro property">#<span class="token directive keyword">define</span> OLED_CMD 0 </span>
<span class="token macro property">#<span class="token directive keyword">define</span> OLED_DATA 1 </span>

<span class="token macro property">#<span class="token directive keyword">define</span> OLED_CLK PAout(4) </span>
<span class="token macro property">#<span class="token directive keyword">define</span> OLED_MOSI PAout(3) </span>
<span class="token macro property">#<span class="token directive keyword">define</span> OLED_RST PAout(2) </span>
<span class="token macro property">#<span class="token directive keyword">define</span> OLED_DC PAout(1) </span>

<span class="token keyword">void</span> <span class="token function">OLED_SPI_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">void</span> <span class="token function">SPI_WriteByte</span><span class="token punctuation">(</span>uint8_t addr<span class="token punctuation">,</span>uint8_t data<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">void</span> <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> cmd<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">void</span> <span class="token function">WriteData</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre> 
  <h3><a id="c_114"></a>.c</h3> 
  <pre><code class="prism language-c"><span class="token keyword">void</span> <span class="token function">OLED_SPI_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>
    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOA <span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin<span class="token operator">=</span>GPIO_Pin_1<span class="token operator">|</span>GPIO_Pin_2<span class="token operator">|</span>GPIO_Pin_3<span class="token operator">|</span>GPIO_Pin_4<span class="token punctuation">;</span> 
    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode<span class="token operator">=</span>GPIO_Mode_Out_PP<span class="token punctuation">;</span>
    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed<span class="token operator">=</span>GPIO_Speed_50MHz<span class="token punctuation">;</span>
    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span><span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">void</span> <span class="token function">SPI_WriteByte</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> data<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    OLED_DC <span class="token operator">=</span>cmd<span class="token punctuation">;</span>
    OLED_CLK<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        OLED_CLK<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token operator">&amp;</span><span class="token number">0x80</span><span class="token punctuation">)</span>OLED_MOSI<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> 
        <span class="token keyword">else</span> OLED_MOSI<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        OLED_CLK<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        data<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    OLED_CLK<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    OLED_DC<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">SPI_WriteByte</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">WriteData</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">SPI_WriteByte</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>OLED_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
  <h2><a id="OLED_154"></a>OLED</h2> 
  <h3><a id="h_155"></a>.h</h3> 
  <pre><code class="prism language-c"><span class="token keyword">void</span> <span class="token function">OLED_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">OLED_ON</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">OLED_OFF</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">OLED_Refresh_Gram</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">OLED_Clear</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
  <h3><a id="c_165"></a>.c</h3> 
  <pre><code class="prism language-c">u8 OLED_GRAM<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   

<span class="token keyword">void</span> <span class="token function">OLED_DLY_ms</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> ms<span class="token punctuation">)</span>
<span class="token punctuation">{</span>                         
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    a<span class="token operator">=</span><span class="token number">1335</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ms<span class="token operator">--</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">OLED_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">OLED_SPI_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    OLED_CLK <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    OLED_RST <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">OLED_DLY_ms</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    OLED_RST <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

      <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xae</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xd5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xa8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x3f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xd3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xB0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x8d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xa1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xc8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xda</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x81</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xd9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xf1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xdb</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xa4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xa6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xaf</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

    <span class="token function">OLED_Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">OLED_Refresh_Gram</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    u8 i<span class="token punctuation">,</span>n<span class="token punctuation">;</span>         
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  
    <span class="token punctuation">{</span>  
        <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xb0</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>   
        <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      
        <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      
        <span class="token keyword">for</span><span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>n<span class="token operator">&lt;</span><span class="token number">128</span><span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">WriteData</span><span class="token punctuation">(</span>OLED_GRAM<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>   
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">OLED_Clear</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>  
<span class="token punctuation">{</span>  
   	u8 j<span class="token punctuation">,</span>t<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>t<span class="token operator">=</span><span class="token number">0xB0</span><span class="token punctuation">;</span>t<span class="token operator">&lt;</span><span class="token number">0xB8</span><span class="token punctuation">;</span>t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	   <span class="token function">WriteCmd</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
		 <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		 <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
		<span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">132</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 			    <span class="token function">WriteData</span><span class="token punctuation">(</span><span class="token number">0x11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre> 
  <h3><a id="1616_246"></a>显示16*16的字符</h3> 
  <p>这个是仿照商家的IIC例程改成SPI的写法，其实驱动OLED的方法都是一样的，只不过IIC和SPI略有不同而已（3个输入参数会在稍后讲到）</p> 
  <pre><code class="prism language-c"><span class="token keyword">void</span> <span class="token function">OLED_DISPLAY_16x16</span><span class="token punctuation">(</span>u8 x<span class="token punctuation">,</span>u8 y<span class="token punctuation">,</span> u16 w<span class="token punctuation">)</span><span class="token punctuation">{</span> 
	u8 j<span class="token punctuation">,</span>t<span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	y<span class="token operator">=</span>y<span class="token operator">-</span><span class="token number">14</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>t<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span>t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xb0</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> 
		<span class="token function">WriteCmd</span><span class="token punctuation">(</span>y<span class="token operator">/</span><span class="token number">16</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
		<span class="token function">WriteCmd</span><span class="token punctuation">(</span>y<span class="token operator">%</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 			<span class="token function">WriteData</span><span class="token punctuation">(</span>M_16<span class="token punctuation">[</span><span class="token punctuation">(</span>w<span class="token operator">*</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token operator">+</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			c<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span>x<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xAF</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre> 
  <ul> 
   <li>第一个参数x:字符的行：0、2、4、6共4行（4*16=64，把64个像素分为4行）</li> 
   <li>第二个参数y:字符的列：共128列（像素），但是因为字符是16*16的，所以用n * 16代替，便于计算</li> 
   <li>第三个参数w:对应库中的第几个字符</li> 
   <li>库：M_16（在倒数第5行），这个内容马上就讲到</li> 
  </ul> 
  <p>比如：OLED_DISPLAY_16x16(4,8*16,8)，在OLED屏幕第3行的第8列，显示<strong>库</strong>中的第9个字符</p> 
  <h3><a id="_270"></a>字符/图片库，取模</h3> 
  <p>这个库是需要咱们自己建立的，可以由取模软件自动生成每个字符对应的16进制数据。<br> 我们用到的取模软件是：<strong>PCtoLCD2002</strong><br> 配置如图：<br> <img src="https://img-blog.csdnimg.cn/20200520143131768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tfa3N5,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> 用它生成数据以后就可以把数据放到一个单独的.h文件中，作为我们自己的字符库。这里以两个16*16的空白为例</p> 
  <pre><code class="prism language-c">uc8 M_16<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//" "</span>
<span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span>
<span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span>
  <span class="token comment">//" "</span>
<span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span>
<span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre> 
  <p>这个软件还是很好用的，而且像素也可以自定，比如用64 * 128的图片铺满oled等等。详见<a href="https://www.bilibili.com/video/BV1cE411N7WA/" rel="nofollow">生日快乐（b站投稿）</a>。这里用的就是杜洋老师的开发板，我最初学32的时候就是学习杜洋老师的教程，虽然后来我又学了野火的32，正点原子的linux…(我很专一的/doge)</p> 
  <p>跑题了，这里只是举了一个16 * 16字符的例子，还有8 * 16字符、字符串、64 * 128图片等等，就请各位自己研究了/doge</p> 
  <hr> 
  <p>我是康，希望做一名能帮助到各位的博主！ <strong>我不是本来要更机器学习的嘛？</strong> 在做了在做了（0%）预计下周会发布，欢迎感兴趣的小伙伴与我共同学习，一起进步！</p> 
  <hr> 
  <table> 
   <thead> 
    <tr> 
     <th>C调低音</th> 
     <th>频率（Hz）</th> 
     <th>C调中音</th> 
     <th>频率（Hz）</th> 
     <th>C调高音</th> 
     <th>频率（Hz）</th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <td>1</td> 
     <td>262</td> 
     <td>1</td> 
     <td>523</td> 
     <td>1</td> 
     <td>1046</td> 
    </tr> 
    <tr> 
     <td>1#</td> 
     <td>277</td> 
     <td>1#</td> 
     <td>554</td> 
     <td>1#</td> 
     <td>1109</td> 
    </tr> 
    <tr> 
     <td>2</td> 
     <td>294</td> 
     <td>2</td> 
     <td>587</td> 
     <td>2</td> 
     <td>1175</td> 
    </tr> 
    <tr> 
     <td>2#</td> 
     <td>311</td> 
     <td>2#</td> 
     <td>622</td> 
     <td>2#</td> 
     <td>1245</td> 
    </tr> 
    <tr> 
     <td>3</td> 
     <td>330</td> 
     <td>3</td> 
     <td>659</td> 
     <td>3</td> 
     <td>1318</td> 
    </tr> 
    <tr> 
     <td>4</td> 
     <td>349</td> 
     <td>4</td> 
     <td>698</td> 
     <td>4</td> 
     <td>1397</td> 
    </tr> 
    <tr> 
     <td>4#</td> 
     <td>370</td> 
     <td>4#</td> 
     <td>740</td> 
     <td>4#</td> 
     <td>1480</td> 
    </tr> 
    <tr> 
     <td>5</td> 
     <td>392</td> 
     <td>5</td> 
     <td>784</td> 
     <td>5</td> 
     <td>1568</td> 
    </tr> 
    <tr> 
     <td>5#</td> 
     <td>415</td> 
     <td>5#</td> 
     <td>831</td> 
     <td>5#</td> 
     <td>1661</td> 
    </tr> 
    <tr> 
     <td>6</td> 
     <td>440</td> 
     <td>6</td> 
     <td>880</td> 
     <td>6</td> 
     <td>1760</td> 
    </tr> 
    <tr> 
     <td>6#</td> 
     <td>466</td> 
     <td>6#</td> 
     <td>932</td> 
     <td>6#</td> 
     <td>1865</td> 
    </tr> 
    <tr> 
     <td>7</td> 
     <td>494</td> 
     <td>7</td> 
     <td>988</td> 
     <td>7</td> 
     <td>1976</td> 
    </tr> 
   </tbody> 
  </table>
  <hr class="footnotes-sep"> 
  <section class="footnotes"> 
   <ol class="footnotes-list"> 
    <li id="fn1" class="footnote-item"> <a href="#fnref1" rel="nofollow" class="footnote-backref">↩︎</a></li> 
   </ol> 
  </section> 
 </div> 
 <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e0530931f4.css" rel="stylesheet"> 
</div>, newsAttr=2, newsImage=https://profile.csdnimg.cn/8/2/A/3_k_ksy, orderNum=null, isPublic=null, thumbs=86, visits=8, comments=null, collects=86, newsSource=https://blog.csdn.net/k_ksy, newsSourceAuthor=康., newsSourceTags=小程序集合,stm32,嵌入式,单片机, status=null, delFlag=null, createBy=null, createTime=null, updateBy=null, updateTime=null, remark=null, beginTime=null, endTime=null, params={}, newsType=null)
2020-09-03 15:19:25.525 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:45 -接收到消息的时间----->>> 1599117565525
消费tag->>> 12
从消息队列中拿到数据----------->>>> {csdnNews=LinqNews(newsId=null, userId=1, newsTypeId=18, newsTitle=逆向工程，调试Hello World ！程序（更新中）, newsContent=<div id="article_content" class="article_content clearfix"> 
 <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3d4dc5c1de.css"> 
 <div id="content_views" class="markdown_views prism-atom-one-dark"> 
  <!-- flowchart 箭头图标 勿删 --> 
  <svg xmlns="http://www.w3.org/2000/svg" style="display: none;"> 
   <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path> 
  </svg> 
  <p></p>
  <div class="toc">
   <h3>逆向工程，调试Hello,World ！ 程序（更新中）</h3>
   <ul>
    <li><a href="#_2" rel="nofollow">逆向分析法</a></li>
    <ul>
     <li><a href="#_3" rel="nofollow">静态分析法</a></li>
     <li><a href="#_5" rel="nofollow">动态分析法</a></li>
    </ul>
    <li><a href="#hello_world__8" rel="nofollow">调试hello world 程序</a></li>
    <ul>
     <li><a href="#_9" rel="nofollow">代码</a></li>
    </ul>
    <li><a href="#_21" rel="nofollow">开始调试</a></li>
    <ul>
     <li><a href="#OllyDbg___35" rel="nofollow">OllyDbg 基本指令 （适用于代码窗口）</a></li>
     <li><a href="#_45" rel="nofollow">设置断点的四种方法</a></li>
     <ul>
      <li><a href="#1goto__46" rel="nofollow">1.goto 命令</a></li>
      <li><a href="#2_51" rel="nofollow">2.设置断点</a></li>
      <li><a href="#3_59" rel="nofollow">3.注释</a></li>
      <li><a href="#4_64" rel="nofollow">4.标签</a></li>
     </ul>
     <li><a href="#_73" rel="nofollow">快速查找指定代码的四种方法</a></li>
     <ul>
      <li><a href="#1__76" rel="nofollow">1. 代码执行法</a></li>
      <li><a href="#2_79" rel="nofollow">2.字符串检索法</a></li>
      <li><a href="#3_82" rel="nofollow">3.在调试代码中设置断点</a></li>
      <li><a href="#4API_85" rel="nofollow">4.在API代码中设置断点</a></li>
     </ul>
     <li><a href="#hello_world_88" rel="nofollow">使用“打补丁”方式修改“hello world！”字符串</a></li>
     <ul>
      <li><a href="#_89" rel="nofollow">修改字符的两种方法</a></li>
      <ul>
       <li><a href="#1_90" rel="nofollow">1.直接修改缓冲区</a></li>
       <ul>
        <li><a href="#_103" rel="nofollow">保存更改到可执行文件</a></li>
       </ul>
       <li><a href="#2_111" rel="nofollow">2.在其他内存区域新建字符串并传递给消息函数</a></li>
      </ul>
     </ul>
    </ul>
    <li><a href="#_117" rel="nofollow">更新中。。。。</a></li>
   </ul>
  </div>
  <p></p> 
  <h1><a id="_2"></a>逆向分析法</h1> 
  <h2><a id="_3"></a>静态分析法</h2> 
  <p>是在<strong>不执行代码文件</strong>的情形下，对代码进行静态分析的一种方法。并不执行代码，而是观察代码文件的外部特征，获取文件的类型，大小，PE头信息，内部字符串，是否运行时解压缩等。</p> 
  <h2><a id="_5"></a>动态分析法</h2> 
  <p>是在程序文件的执行过程中对代码进行动态分析的一种方法，它通过调试来分析代码流，获得内存的状态等。<br> <mark>虽然代码调试过程在代码逆向分析过程中占据很大比重，但它只是代码逆向分析的一个从属概念</mark></p> 
  <h1><a id="hello_world__8"></a>调试hello world 程序</h1> 
  <h2><a id="_9"></a>代码</h2> 
  <pre><code class="prism language-javascript">#include <span class="token string">"windows.h"</span>
#include <span class="token string">"tchar.h"</span>

int <span class="token function">_tmain</span><span class="token punctuation">(</span>int argc<span class="token punctuation">,</span> <span class="token constant">TCHAR</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">MessageBox</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token string">"Hello World!"</span><span class="token punctuation">,</span><span class="token string">"张轩瑞"</span><span class="token punctuation">,</span><span class="token constant">MB_OK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre> 
  <h1><a id="_21"></a>开始调试</h1> 
  <p>用OllyDbg调试工具打开程序<br> 左上 代码窗口</p> 
  <ul> 
   <li>默认用于显示反汇编代码，还用于显示各种注释、标签，分析代码时显示循环、跳转位置等信息。</li> 
  </ul> 
  <p>右上 寄存器窗口</p> 
  <ul> 
   <li>实时显示CPU寄存器的值，可用于修改特定的寄存器。</li> 
  </ul> 
  <p>左下 数据窗口</p> 
  <ul> 
   <li>以Hex/ASCII/Unicode值的形式显示进程的内存地址，也可在修改内存地址。</li> 
  </ul> 
  <p>右下 栈窗口</p> 
  <ul> 
   <li>实时显示ESP寄存器指向的进程栈内存，并修改。<br> <img src="https://img-blog.csdnimg.cn/20200507185143941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JpdHNfc3RkYw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li> 
  </ul> 
  <h2><a id="OllyDbg___35"></a>OllyDbg 基本指令 （适用于代码窗口）</h2> 
  <table> 
   <thead> 
    <tr> 
     <th>项目</th> 
     <th>Value</th> 
     <th>含义</th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <td>Restart</td> 
     <td>Ctrl+F2</td> 
     <td>重新开始调试</td> 
    </tr> 
    <tr> 
     <td>Step Into</td> 
     <td>F7</td> 
     <td>执行一句OP code (操作码)，若遇到调用命令（CALL），将进入函数代码内部</td> 
    </tr> 
    <tr> 
     <td>Step Over</td> 
     <td>F8</td> 
     <td>执行一句OP code (操作码)，若遇到调用命令（CALL），仅执行函数自身，不跟随进入</td> 
    </tr> 
    <tr> 
     <td>Execute till Return</td> 
     <td>Ctrl+F9</td> 
     <td>一直在函数代码内部运行，直到遇到RETN命令，跳出函数</td> 
    </tr> 
   </tbody> 
  </table>
  <h2><a id="_45"></a>设置断点的四种方法</h2> 
  <h3><a id="1goto__46"></a>1.goto 命令</h3> 
  <p>执行Go to(Ctrl + G) 命令，打开一个“输入跟踪表达式”的对话框。<br> 在文本框中输入“地址”。<br> <img src="https://img-blog.csdnimg.cn/20200518190038195.png" alt="在这里插入图片描述"><br> 光标自动定位到该地址处，执行F4命令，让调试流运到此处，然后从该处调试。</p> 
  <h3><a id="2_51"></a>2.设置断点</h3> 
  <p>可以设置BP(Break Point,断点) （快捷键F2）</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200518190558243.png" alt="在这里插入图片描述"><br> 设置断点后，运行到断点处就会暂停。<br> 可以打开Breakpoints框（ATL+B)查看设置的断点。<br> <img src="https://img-blog.csdnimg.cn/20200518190741546.png" alt="在这里插入图片描述"><br> 双击某个断点会直接跳转到相应位置。</p> 
  <h3><a id="3_59"></a>3.注释</h3> 
  <p>按键盘上的“；”可以添加注释<br> <img src="https://img-blog.csdnimg.cn/20200518191827314.png" alt="在这里插入图片描述"><br> 同时也可以查找到他。<br> <img src="https://img-blog.csdnimg.cn/20200518191807915.png" alt="在这里插入图片描述"></p> 
  <h3><a id="4_64"></a>4.标签</h3> 
  <p>我们也可以通过标签提供的功能在指定地址<br> <img src="https://img-blog.csdnimg.cn/2020051819265876.png" alt="在这里插入图片描述"><br> 比如在00401BF0中设置标签，main func<br> 因为00401385处调用00401BF0的函数，所以就会显示，main func</p> 
  <p><img src="https://img-blog.csdnimg.cn/2020051819262069.png" alt="在这里插入图片描述"><br> 标签和注释一样也可以检索</p> 
  <h2><a id="_73"></a>快速查找指定代码的四种方法</h2> 
  <p>调试代码时，main（）函数并不直接位于可执行文件的EP位置上，出现在此的是开发工具生成的启动函数。<br> （EP是windows可执行文件（EXE,DLL,SYS等）的代码入口点，是执行应用程序时最先执行的代码的起始位置，它依赖于CPU。）</p> 
  <h3><a id="1__76"></a>1. 代码执行法</h3> 
  <p><strong>逐条执行</strong>指令来查找需要查找的位置。代码执行法仅使用于被调试的代码量不大、且程序功能明确的情况。</p> 
  <h3><a id="2_79"></a>2.字符串检索法</h3> 
  <p>直接查找字符串。<br> 寻找所需要的字符串，然后双击。</p> 
  <h3><a id="3_82"></a>3.在调试代码中设置断点</h3> 
  <p>查找-&gt;所有模块间的调用<br> 查看调用了那些函数</p> 
  <h3><a id="4API_85"></a>4.在API代码中设置断点</h3> 
  <p>打开“所有模块中的名称”并敲下MessageBox,光标会直接定位。<br> <img src="https://img-blog.csdnimg.cn/20200519193843770.png" alt="在这里插入图片描述"></p> 
  <h2><a id="hello_world_88"></a>使用“打补丁”方式修改“hello world！”字符串</h2> 
  <h3><a id="_89"></a>修改字符的两种方法</h3> 
  <h4><a id="1_90"></a>1.直接修改缓冲区</h4> 
  <p>我在搜索的时候，发现注释hello world的地方更改没有用。<br> 找到主函数后，设置断点。<br> 然后按F4，进行调试。<br> 在右下方站窗口找到ASCII码“hello world”。<br> <img src="https://img-blog.csdnimg.cn/20200601215426323.png" alt="在这里插入图片描述"><br> 然后双击查看，进入数据窗口，去更改缓存区。<br> <img src="https://img-blog.csdnimg.cn/20200601215621469.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JpdHNfc3RkYw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 去更改，hello world 改成 hello rever<br> 尽量不要用更长的字符串，覆盖原字符串，这样会使数据遭到破坏。<br> 改完之后，去运行程序，之后就会弹出窗口。<br> <img src="https://img-blog.csdnimg.cn/20200601215857170.png" alt="在这里插入图片描述"><br> 我们发现以前的hello world 变成了 hello rever。</p> 
  <h5><a id="_103"></a>保存更改到可执行文件</h5> 
  <p>上面的调试中，我们通过修改字符串缓冲区更改了程序显示的消息内容，但是这种更改只是暂时的，我们终止调试的时候。程序中的原字符串没有改变。如果想保存下来，就要把更改后的程序保存一个可执行文件。</p> 
  <ul> 
   <li>在左下数据窗口中，选中更改后的字符串，点击鼠标右键，在弹出的菜单中选择“复制到可执行文件”，然后点击“备份”——&gt;“保存到数据文件”然后输入文件名保存为exe文件。</li> 
  </ul> 
  <p>当我们打开这个已经保存好的文件的时候，弹出的字符串变成了“hello rever”。<br> <img src="https://img-blog.csdnimg.cn/20200603153715826.png" alt="在这里插入图片描述"></p> 
  <h4><a id="2_111"></a>2.在其他内存区域新建字符串并传递给消息函数</h4> 
  <h1><a id="_117"></a>更新中。。。。</h1> 
 </div> 
 <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e0530931f4.css" rel="stylesheet"> 
</div>, newsAttr=2, newsImage=https://profile.csdnimg.cn/5/3/8/3_bits_stdc, orderNum=null, isPublic=null, thumbs=0, visits=0, comments=null, collects=0, newsSource=https://blog.csdn.net/bits_stdc, newsSourceAuthor=_ZXR_, newsSourceTags=安全,笔记, status=null, delFlag=null, createBy=null, createTime=null, updateBy=null, updateTime=null, remark=null, beginTime=null, endTime=null, params={}, newsType=null)}
2020-09-03 15:19:25.527 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:50 -获取peNews--->>>null
2020-09-03 15:19:25.527 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:51 -获取entertainmentNews--->>>null
2020-09-03 15:19:25.528 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:52 -获取csdnNews--->>>LinqNews(newsId=null, userId=1, newsTypeId=18, newsTitle=逆向工程，调试Hello World ！程序（更新中）, newsContent=<div id="article_content" class="article_content clearfix"> 
 <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3d4dc5c1de.css"> 
 <div id="content_views" class="markdown_views prism-atom-one-dark"> 
  <!-- flowchart 箭头图标 勿删 --> 
  <svg xmlns="http://www.w3.org/2000/svg" style="display: none;"> 
   <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path> 
  </svg> 
  <p></p>
  <div class="toc">
   <h3>逆向工程，调试Hello,World ！ 程序（更新中）</h3>
   <ul>
    <li><a href="#_2" rel="nofollow">逆向分析法</a></li>
    <ul>
     <li><a href="#_3" rel="nofollow">静态分析法</a></li>
     <li><a href="#_5" rel="nofollow">动态分析法</a></li>
    </ul>
    <li><a href="#hello_world__8" rel="nofollow">调试hello world 程序</a></li>
    <ul>
     <li><a href="#_9" rel="nofollow">代码</a></li>
    </ul>
    <li><a href="#_21" rel="nofollow">开始调试</a></li>
    <ul>
     <li><a href="#OllyDbg___35" rel="nofollow">OllyDbg 基本指令 （适用于代码窗口）</a></li>
     <li><a href="#_45" rel="nofollow">设置断点的四种方法</a></li>
     <ul>
      <li><a href="#1goto__46" rel="nofollow">1.goto 命令</a></li>
      <li><a href="#2_51" rel="nofollow">2.设置断点</a></li>
      <li><a href="#3_59" rel="nofollow">3.注释</a></li>
      <li><a href="#4_64" rel="nofollow">4.标签</a></li>
     </ul>
     <li><a href="#_73" rel="nofollow">快速查找指定代码的四种方法</a></li>
     <ul>
      <li><a href="#1__76" rel="nofollow">1. 代码执行法</a></li>
      <li><a href="#2_79" rel="nofollow">2.字符串检索法</a></li>
      <li><a href="#3_82" rel="nofollow">3.在调试代码中设置断点</a></li>
      <li><a href="#4API_85" rel="nofollow">4.在API代码中设置断点</a></li>
     </ul>
     <li><a href="#hello_world_88" rel="nofollow">使用“打补丁”方式修改“hello world！”字符串</a></li>
     <ul>
      <li><a href="#_89" rel="nofollow">修改字符的两种方法</a></li>
      <ul>
       <li><a href="#1_90" rel="nofollow">1.直接修改缓冲区</a></li>
       <ul>
        <li><a href="#_103" rel="nofollow">保存更改到可执行文件</a></li>
       </ul>
       <li><a href="#2_111" rel="nofollow">2.在其他内存区域新建字符串并传递给消息函数</a></li>
      </ul>
     </ul>
    </ul>
    <li><a href="#_117" rel="nofollow">更新中。。。。</a></li>
   </ul>
  </div>
  <p></p> 
  <h1><a id="_2"></a>逆向分析法</h1> 
  <h2><a id="_3"></a>静态分析法</h2> 
  <p>是在<strong>不执行代码文件</strong>的情形下，对代码进行静态分析的一种方法。并不执行代码，而是观察代码文件的外部特征，获取文件的类型，大小，PE头信息，内部字符串，是否运行时解压缩等。</p> 
  <h2><a id="_5"></a>动态分析法</h2> 
  <p>是在程序文件的执行过程中对代码进行动态分析的一种方法，它通过调试来分析代码流，获得内存的状态等。<br> <mark>虽然代码调试过程在代码逆向分析过程中占据很大比重，但它只是代码逆向分析的一个从属概念</mark></p> 
  <h1><a id="hello_world__8"></a>调试hello world 程序</h1> 
  <h2><a id="_9"></a>代码</h2> 
  <pre><code class="prism language-javascript">#include <span class="token string">"windows.h"</span>
#include <span class="token string">"tchar.h"</span>

int <span class="token function">_tmain</span><span class="token punctuation">(</span>int argc<span class="token punctuation">,</span> <span class="token constant">TCHAR</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">MessageBox</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token string">"Hello World!"</span><span class="token punctuation">,</span><span class="token string">"张轩瑞"</span><span class="token punctuation">,</span><span class="token constant">MB_OK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre> 
  <h1><a id="_21"></a>开始调试</h1> 
  <p>用OllyDbg调试工具打开程序<br> 左上 代码窗口</p> 
  <ul> 
   <li>默认用于显示反汇编代码，还用于显示各种注释、标签，分析代码时显示循环、跳转位置等信息。</li> 
  </ul> 
  <p>右上 寄存器窗口</p> 
  <ul> 
   <li>实时显示CPU寄存器的值，可用于修改特定的寄存器。</li> 
  </ul> 
  <p>左下 数据窗口</p> 
  <ul> 
   <li>以Hex/ASCII/Unicode值的形式显示进程的内存地址，也可在修改内存地址。</li> 
  </ul> 
  <p>右下 栈窗口</p> 
  <ul> 
   <li>实时显示ESP寄存器指向的进程栈内存，并修改。<br> <img src="https://img-blog.csdnimg.cn/20200507185143941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JpdHNfc3RkYw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li> 
  </ul> 
  <h2><a id="OllyDbg___35"></a>OllyDbg 基本指令 （适用于代码窗口）</h2> 
  <table> 
   <thead> 
    <tr> 
     <th>项目</th> 
     <th>Value</th> 
     <th>含义</th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <td>Restart</td> 
     <td>Ctrl+F2</td> 
     <td>重新开始调试</td> 
    </tr> 
    <tr> 
     <td>Step Into</td> 
     <td>F7</td> 
     <td>执行一句OP code (操作码)，若遇到调用命令（CALL），将进入函数代码内部</td> 
    </tr> 
    <tr> 
     <td>Step Over</td> 
     <td>F8</td> 
     <td>执行一句OP code (操作码)，若遇到调用命令（CALL），仅执行函数自身，不跟随进入</td> 
    </tr> 
    <tr> 
     <td>Execute till Return</td> 
     <td>Ctrl+F9</td> 
     <td>一直在函数代码内部运行，直到遇到RETN命令，跳出函数</td> 
    </tr> 
   </tbody> 
  </table>
  <h2><a id="_45"></a>设置断点的四种方法</h2> 
  <h3><a id="1goto__46"></a>1.goto 命令</h3> 
  <p>执行Go to(Ctrl + G) 命令，打开一个“输入跟踪表达式”的对话框。<br> 在文本框中输入“地址”。<br> <img src="https://img-blog.csdnimg.cn/20200518190038195.png" alt="在这里插入图片描述"><br> 光标自动定位到该地址处，执行F4命令，让调试流运到此处，然后从该处调试。</p> 
  <h3><a id="2_51"></a>2.设置断点</h3> 
  <p>可以设置BP(Break Point,断点) （快捷键F2）</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200518190558243.png" alt="在这里插入图片描述"><br> 设置断点后，运行到断点处就会暂停。<br> 可以打开Breakpoints框（ATL+B)查看设置的断点。<br> <img src="https://img-blog.csdnimg.cn/20200518190741546.png" alt="在这里插入图片描述"><br> 双击某个断点会直接跳转到相应位置。</p> 
  <h3><a id="3_59"></a>3.注释</h3> 
  <p>按键盘上的“；”可以添加注释<br> <img src="https://img-blog.csdnimg.cn/20200518191827314.png" alt="在这里插入图片描述"><br> 同时也可以查找到他。<br> <img src="https://img-blog.csdnimg.cn/20200518191807915.png" alt="在这里插入图片描述"></p> 
  <h3><a id="4_64"></a>4.标签</h3> 
  <p>我们也可以通过标签提供的功能在指定地址<br> <img src="https://img-blog.csdnimg.cn/2020051819265876.png" alt="在这里插入图片描述"><br> 比如在00401BF0中设置标签，main func<br> 因为00401385处调用00401BF0的函数，所以就会显示，main func</p> 
  <p><img src="https://img-blog.csdnimg.cn/2020051819262069.png" alt="在这里插入图片描述"><br> 标签和注释一样也可以检索</p> 
  <h2><a id="_73"></a>快速查找指定代码的四种方法</h2> 
  <p>调试代码时，main（）函数并不直接位于可执行文件的EP位置上，出现在此的是开发工具生成的启动函数。<br> （EP是windows可执行文件（EXE,DLL,SYS等）的代码入口点，是执行应用程序时最先执行的代码的起始位置，它依赖于CPU。）</p> 
  <h3><a id="1__76"></a>1. 代码执行法</h3> 
  <p><strong>逐条执行</strong>指令来查找需要查找的位置。代码执行法仅使用于被调试的代码量不大、且程序功能明确的情况。</p> 
  <h3><a id="2_79"></a>2.字符串检索法</h3> 
  <p>直接查找字符串。<br> 寻找所需要的字符串，然后双击。</p> 
  <h3><a id="3_82"></a>3.在调试代码中设置断点</h3> 
  <p>查找-&gt;所有模块间的调用<br> 查看调用了那些函数</p> 
  <h3><a id="4API_85"></a>4.在API代码中设置断点</h3> 
  <p>打开“所有模块中的名称”并敲下MessageBox,光标会直接定位。<br> <img src="https://img-blog.csdnimg.cn/20200519193843770.png" alt="在这里插入图片描述"></p> 
  <h2><a id="hello_world_88"></a>使用“打补丁”方式修改“hello world！”字符串</h2> 
  <h3><a id="_89"></a>修改字符的两种方法</h3> 
  <h4><a id="1_90"></a>1.直接修改缓冲区</h4> 
  <p>我在搜索的时候，发现注释hello world的地方更改没有用。<br> 找到主函数后，设置断点。<br> 然后按F4，进行调试。<br> 在右下方站窗口找到ASCII码“hello world”。<br> <img src="https://img-blog.csdnimg.cn/20200601215426323.png" alt="在这里插入图片描述"><br> 然后双击查看，进入数据窗口，去更改缓存区。<br> <img src="https://img-blog.csdnimg.cn/20200601215621469.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JpdHNfc3RkYw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 去更改，hello world 改成 hello rever<br> 尽量不要用更长的字符串，覆盖原字符串，这样会使数据遭到破坏。<br> 改完之后，去运行程序，之后就会弹出窗口。<br> <img src="https://img-blog.csdnimg.cn/20200601215857170.png" alt="在这里插入图片描述"><br> 我们发现以前的hello world 变成了 hello rever。</p> 
  <h5><a id="_103"></a>保存更改到可执行文件</h5> 
  <p>上面的调试中，我们通过修改字符串缓冲区更改了程序显示的消息内容，但是这种更改只是暂时的，我们终止调试的时候。程序中的原字符串没有改变。如果想保存下来，就要把更改后的程序保存一个可执行文件。</p> 
  <ul> 
   <li>在左下数据窗口中，选中更改后的字符串，点击鼠标右键，在弹出的菜单中选择“复制到可执行文件”，然后点击“备份”——&gt;“保存到数据文件”然后输入文件名保存为exe文件。</li> 
  </ul> 
  <p>当我们打开这个已经保存好的文件的时候，弹出的字符串变成了“hello rever”。<br> <img src="https://img-blog.csdnimg.cn/20200603153715826.png" alt="在这里插入图片描述"></p> 
  <h4><a id="2_111"></a>2.在其他内存区域新建字符串并传递给消息函数</h4> 
  <h1><a id="_117"></a>更新中。。。。</h1> 
 </div> 
 <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e0530931f4.css" rel="stylesheet"> 
</div>, newsAttr=2, newsImage=https://profile.csdnimg.cn/5/3/8/3_bits_stdc, orderNum=null, isPublic=null, thumbs=0, visits=0, comments=null, collects=0, newsSource=https://blog.csdn.net/bits_stdc, newsSourceAuthor=_ZXR_, newsSourceTags=安全,笔记, status=null, delFlag=null, createBy=null, createTime=null, updateBy=null, updateTime=null, remark=null, beginTime=null, endTime=null, params={}, newsType=null)
2020-09-03 15:19:25.541 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:45 -接收到消息的时间----->>> 1599117565541
消费tag->>> 13
从消息队列中拿到数据----------->>>> {csdnNews=LinqNews(newsId=null, userId=1, newsTypeId=18, newsTitle=人工智能能力提升指导总结, newsContent=<div id="article_content" class="article_content clearfix"> 
 <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3d4dc5c1de.css"> 
 <div id="content_views" class="markdown_views prism-atom-one-light"> 
  <!-- flowchart 箭头图标 勿删 --> 
  <svg xmlns="http://www.w3.org/2000/svg" style="display: none;"> 
   <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path> 
  </svg> 
  <p></p>
  <div class="toc">
   <h3>文章目录</h3>
   <ul>
    <li><a href="#_3" rel="nofollow">基础知识</a></li>
    <li><a href="#_8" rel="nofollow">人工智能自学之路</a></li>
    <li><a href="#1__10" rel="nofollow">1. 人工智能、机器学习、深度学习的关系</a></li>
    <li><a href="#2__13" rel="nofollow">2. 数据集---需求</a></li>
    <li><a href="#3__35" rel="nofollow">3. 深度学习平台比较</a></li>
    <li><a href="#4__38" rel="nofollow">4. 训练过程可视化</a></li>
    <li><a href="#5__45" rel="nofollow">5. 经典训练案例</a></li>
    <ul>
     <li><a href="#_51" rel="nofollow">训练通用规则</a></li>
     <ul>
      <li><a href="#1__52" rel="nofollow">1. 设置目标</a></li>
      <li><a href="#2__55" rel="nofollow">2. 准备数据集</a></li>
      <li><a href="#3__61" rel="nofollow">3. 模型搭建</a></li>
      <li><a href="#4__67" rel="nofollow">4. 训练网络与测试</a></li>
      <li><a href="#5__72" rel="nofollow">5. 保存模型</a></li>
      <li><a href="#6__84" rel="nofollow">6. 验证模型</a></li>
      <li><a href="#7__87" rel="nofollow">7. 评价模型的方法</a></li>
     </ul>
    </ul>
    <li><a href="#_93" rel="nofollow">参考链接</a></li>
   </ul>
  </div>
  <p></p> 
  <h1><a id="_3"></a>基础知识</h1> 
  <ol> 
   <li><a href="https://www.cis.rit.edu/class/simg782/lectures/" rel="nofollow">传统图像处理基本知识</a><br> 从<a href="https://www.cis.rit.edu/class/simg782/lectures/" rel="nofollow">传统图像处理基本知识</a>可以明白为什么卷积神经网络是有效的。</li> 
   <li><a href="https://seeing-theory.brown.edu/basic-probability/cn.html" rel="nofollow">数学统计基础可视化学习</a></li> 
  </ol> 
  <h1><a id="_8"></a>人工智能自学之路</h1> 
  <p>直接参考这个路线： <a href="https://blog.csdn.net/sinat_36458870/article/details/104829909">人工智能能力构建和模型调参经验分享</a></p> 
  <h1><a id="1__10"></a>1. 人工智能、机器学习、深度学习的关系</h1> 
  <p><a href="https://blog.csdn.net/sinat_36458870/article/details/104793158">博文链接</a></p> 
  <h1><a id="2__13"></a>2. 数据集—需求</h1> 
  <p><a href="https://en.wikipedia.org/wiki/List_of_datasets_for_machine-learning_research" rel="nofollow">所有人工智能数据集总结</a></p> 
  <p><a href="https://www.cs.toronto.edu/~kriz/cifar.html" rel="nofollow">加拿大高级研究所CIFAR-X 系列数据集解析</a></p> 
  <ol> 
   <li> <p><strong>CIFAR-10</strong>：<br> CIFAR-10数据集包含10个不同类，的60,000张32x32彩色图像，有50000个训练图和10000个测试图。</p> </li> 
   <li> <p><strong>CIFAR-100</strong>：<br> Cifar-100数据集包含有100个类，的60000张32X32彩色图片，每个分类包含500-1000，600张图片500-100。</p> </li> 
   <li> <p><strong>Tiny Images</strong>： 该数据集由79,302,017个图像组成，每个图像为32x32彩色图像（500G）；</p> </li> 
   <li> <p><strong>ImageNet-ILSVRC</strong>（Large Scale Visual Recognition Challenge）<br> AI研究员Fei-Fei Li，手工注释了超过1400万个图像，并且在至少100万个图像中，还提供了边界框。<br> ImageNet包含超过20,000个具有典型类别的类别，8<em>8、32</em>32和64*64。</p> </li> 
   <li> <p><strong>COCO</strong> 数据集<br> COCO数据集是微软团队获取的一个可以用来图像识别、分割、标注，数据集.<br> 330K图像、80个对象类别、每幅图像有5个标签、25万个关键点</p> </li> 
  </ol> 
  <h1><a id="3__35"></a>3. 深度学习平台比较</h1> 
  <p><a href="https://en.wikipedia.org/wiki/Comparison_of_deep-learning_software" rel="nofollow">https://en.wikipedia.org/wiki/Comparison_of_deep-learning_software</a></p> 
  <h1><a id="4__38"></a>4. 训练过程可视化</h1> 
  <p><a href="https://playground.tensorflow.org/" rel="nofollow">https://playground.tensorflow.org/</a><br> 很好用：<a href="https://cs.stanford.edu/people/karpathy/convnetjs/" rel="nofollow">https://cs.stanford.edu/people/karpathy/convnetjs/</a><br> <a href="http://vision.stanford.edu/teaching/cs231n/index.html" rel="nofollow">http://vision.stanford.edu/teaching/cs231n/index.html</a><br> <a href="http://neuralnetworksanddeeplearning.com/chap4.html" rel="nofollow">http://neuralnetworksanddeeplearning.com/chap4.html</a><br> <a href="http://colah.github.io/posts/2014-03-NN-Manifolds-Topology/" rel="nofollow">http://colah.github.io/posts/2014-03-NN-Manifolds-Topology/</a></p> 
  <h1><a id="5__45"></a>5. 经典训练案例</h1> 
  <p><a href="https://www.python-course.eu/neural_network_mnist.php" rel="nofollow">通过python 训练 mnist：</a><br> <a href="https://katacoda.com/basiafusinska/courses/tensorflow-getting-started/tensorflow-mnist-beginner" rel="nofollow">TensorFlow: MNIST for beginners step by step：</a><br> <a href="https://machinelearningmastery.com/handwritten-digit-recognition-using-convolutional-neural-networks-python-keras/" rel="nofollow">Handwritten Digit Recognition using Convolutional Neural Networks in Python with Keras</a></p> 
  <hr> 
  <h2><a id="_51"></a>训练通用规则</h2> 
  <h3><a id="1__52"></a>1. 设置目标</h3> 
  <p>基于CIFAR-10数据集，训练一个简单CNN网络；保存训练好的模型，测试；使用GPU训练；</p> 
  <h3><a id="2__55"></a>2. 准备数据集</h3> 
  <p><a href="https://en.wikipedia.org/wiki/List_of_datasets_for_machine-learning_research" rel="nofollow">所有人工智能数据集总结</a><br> <a href="https://www.cs.toronto.edu/~kriz/cifar.html" rel="nofollow">加拿大高级研究所CIFAR-X 系列数据集解析</a></p> 
  <p>找数据，打标签，数据增强，预处理，现在一般都直接用现有的数据；例如：CIFAR-10</p> 
  <h3><a id="3__61"></a>3. 模型搭建</h3> 
  <p><strong>定义网络</strong>—设置<strong>损失函数</strong>，优化<strong>迭代方法</strong></p> 
  <p><a href="https://blog.csdn.net/qq_35082030/article/details/73368962">常见模型</a><br> <a href="https://zhuanlan.zhihu.com/p/35709485" rel="nofollow">常见损失函数</a><br> <a href="https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/3-4-A-speed-up-learning/" rel="nofollow">常见优化方法</a></p> 
  <h3><a id="4__67"></a>4. 训练网络与测试</h3> 
  <p>实际的和标签的差就是loss</p> 
  <p>这里看PPT：<a href="https://github.com/yuneming/DeepLearningTutorial">李宏毅一天搞懂深度学习</a></p> 
  <h3><a id="5__72"></a>5. 保存模型</h3> 
  <ul> 
   <li> <p><code>cfair10.pth（pytorch）</code>：<br> 多 GPU 训练的方法是使用 torch.nn.DataParallel</p> </li> 
   <li> <p><code>model.ckpt</code>：—&gt;&gt;&gt;<code>checkpoint</code><br> <code>xxx.ckpt.data-0000-of-00001</code> 权重;<br> <code>xxx.ckpt.meta</code> 图结构;<br> <code>xxx.ckpt.index</code> 权重节点索引）</p> </li> 
   <li> <p><code>model_deploy.prototxt</code> (描述了网络结构和数据集信息);</p> </li> 
   <li> <p><code>train_iter_100.caffemodel</code>（权重）</p> </li> 
  </ul> 
  <h3><a id="6__84"></a>6. 验证模型</h3> 
  <p>拿些没有用过的图，去用训练好的模型。</p> 
  <h3><a id="7__87"></a>7. 评价模型的方法</h3> 
  <p>待上传</p> 
  <p>例如输出一个模糊矩阵</p> 
  <h1><a id="_93"></a>参考链接</h1> 
  <p><a href="https://www.jianshu.com/p/e704a6f6e8d3" rel="nofollow">https://www.jianshu.com/p/e704a6f6e8d3</a></p> 
 </div> 
 <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e0530931f4.css" rel="stylesheet"> 
</div>, newsAttr=2, newsImage=https://profile.csdnimg.cn/3/8/C/3_sinat_36458870, orderNum=null, isPublic=null, thumbs=536, visits=164, comments=null, collects=536, newsSource=https://blog.csdn.net/sinat_36458870, newsSourceAuthor=BRUCE_WUANG, newsSourceTags=人工智能,深度学习, status=null, delFlag=null, createBy=null, createTime=null, updateBy=null, updateTime=null, remark=null, beginTime=null, endTime=null, params={}, newsType=null)}
2020-09-03 15:19:25.542 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:50 -获取peNews--->>>null
2020-09-03 15:19:25.542 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:51 -获取entertainmentNews--->>>null
2020-09-03 15:19:25.542 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:52 -获取csdnNews--->>>LinqNews(newsId=null, userId=1, newsTypeId=18, newsTitle=人工智能能力提升指导总结, newsContent=<div id="article_content" class="article_content clearfix"> 
 <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3d4dc5c1de.css"> 
 <div id="content_views" class="markdown_views prism-atom-one-light"> 
  <!-- flowchart 箭头图标 勿删 --> 
  <svg xmlns="http://www.w3.org/2000/svg" style="display: none;"> 
   <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path> 
  </svg> 
  <p></p>
  <div class="toc">
   <h3>文章目录</h3>
   <ul>
    <li><a href="#_3" rel="nofollow">基础知识</a></li>
    <li><a href="#_8" rel="nofollow">人工智能自学之路</a></li>
    <li><a href="#1__10" rel="nofollow">1. 人工智能、机器学习、深度学习的关系</a></li>
    <li><a href="#2__13" rel="nofollow">2. 数据集---需求</a></li>
    <li><a href="#3__35" rel="nofollow">3. 深度学习平台比较</a></li>
    <li><a href="#4__38" rel="nofollow">4. 训练过程可视化</a></li>
    <li><a href="#5__45" rel="nofollow">5. 经典训练案例</a></li>
    <ul>
     <li><a href="#_51" rel="nofollow">训练通用规则</a></li>
     <ul>
      <li><a href="#1__52" rel="nofollow">1. 设置目标</a></li>
      <li><a href="#2__55" rel="nofollow">2. 准备数据集</a></li>
      <li><a href="#3__61" rel="nofollow">3. 模型搭建</a></li>
      <li><a href="#4__67" rel="nofollow">4. 训练网络与测试</a></li>
      <li><a href="#5__72" rel="nofollow">5. 保存模型</a></li>
      <li><a href="#6__84" rel="nofollow">6. 验证模型</a></li>
      <li><a href="#7__87" rel="nofollow">7. 评价模型的方法</a></li>
     </ul>
    </ul>
    <li><a href="#_93" rel="nofollow">参考链接</a></li>
   </ul>
  </div>
  <p></p> 
  <h1><a id="_3"></a>基础知识</h1> 
  <ol> 
   <li><a href="https://www.cis.rit.edu/class/simg782/lectures/" rel="nofollow">传统图像处理基本知识</a><br> 从<a href="https://www.cis.rit.edu/class/simg782/lectures/" rel="nofollow">传统图像处理基本知识</a>可以明白为什么卷积神经网络是有效的。</li> 
   <li><a href="https://seeing-theory.brown.edu/basic-probability/cn.html" rel="nofollow">数学统计基础可视化学习</a></li> 
  </ol> 
  <h1><a id="_8"></a>人工智能自学之路</h1> 
  <p>直接参考这个路线： <a href="https://blog.csdn.net/sinat_36458870/article/details/104829909">人工智能能力构建和模型调参经验分享</a></p> 
  <h1><a id="1__10"></a>1. 人工智能、机器学习、深度学习的关系</h1> 
  <p><a href="https://blog.csdn.net/sinat_36458870/article/details/104793158">博文链接</a></p> 
  <h1><a id="2__13"></a>2. 数据集—需求</h1> 
  <p><a href="https://en.wikipedia.org/wiki/List_of_datasets_for_machine-learning_research" rel="nofollow">所有人工智能数据集总结</a></p> 
  <p><a href="https://www.cs.toronto.edu/~kriz/cifar.html" rel="nofollow">加拿大高级研究所CIFAR-X 系列数据集解析</a></p> 
  <ol> 
   <li> <p><strong>CIFAR-10</strong>：<br> CIFAR-10数据集包含10个不同类，的60,000张32x32彩色图像，有50000个训练图和10000个测试图。</p> </li> 
   <li> <p><strong>CIFAR-100</strong>：<br> Cifar-100数据集包含有100个类，的60000张32X32彩色图片，每个分类包含500-1000，600张图片500-100。</p> </li> 
   <li> <p><strong>Tiny Images</strong>： 该数据集由79,302,017个图像组成，每个图像为32x32彩色图像（500G）；</p> </li> 
   <li> <p><strong>ImageNet-ILSVRC</strong>（Large Scale Visual Recognition Challenge）<br> AI研究员Fei-Fei Li，手工注释了超过1400万个图像，并且在至少100万个图像中，还提供了边界框。<br> ImageNet包含超过20,000个具有典型类别的类别，8<em>8、32</em>32和64*64。</p> </li> 
   <li> <p><strong>COCO</strong> 数据集<br> COCO数据集是微软团队获取的一个可以用来图像识别、分割、标注，数据集.<br> 330K图像、80个对象类别、每幅图像有5个标签、25万个关键点</p> </li> 
  </ol> 
  <h1><a id="3__35"></a>3. 深度学习平台比较</h1> 
  <p><a href="https://en.wikipedia.org/wiki/Comparison_of_deep-learning_software" rel="nofollow">https://en.wikipedia.org/wiki/Comparison_of_deep-learning_software</a></p> 
  <h1><a id="4__38"></a>4. 训练过程可视化</h1> 
  <p><a href="https://playground.tensorflow.org/" rel="nofollow">https://playground.tensorflow.org/</a><br> 很好用：<a href="https://cs.stanford.edu/people/karpathy/convnetjs/" rel="nofollow">https://cs.stanford.edu/people/karpathy/convnetjs/</a><br> <a href="http://vision.stanford.edu/teaching/cs231n/index.html" rel="nofollow">http://vision.stanford.edu/teaching/cs231n/index.html</a><br> <a href="http://neuralnetworksanddeeplearning.com/chap4.html" rel="nofollow">http://neuralnetworksanddeeplearning.com/chap4.html</a><br> <a href="http://colah.github.io/posts/2014-03-NN-Manifolds-Topology/" rel="nofollow">http://colah.github.io/posts/2014-03-NN-Manifolds-Topology/</a></p> 
  <h1><a id="5__45"></a>5. 经典训练案例</h1> 
  <p><a href="https://www.python-course.eu/neural_network_mnist.php" rel="nofollow">通过python 训练 mnist：</a><br> <a href="https://katacoda.com/basiafusinska/courses/tensorflow-getting-started/tensorflow-mnist-beginner" rel="nofollow">TensorFlow: MNIST for beginners step by step：</a><br> <a href="https://machinelearningmastery.com/handwritten-digit-recognition-using-convolutional-neural-networks-python-keras/" rel="nofollow">Handwritten Digit Recognition using Convolutional Neural Networks in Python with Keras</a></p> 
  <hr> 
  <h2><a id="_51"></a>训练通用规则</h2> 
  <h3><a id="1__52"></a>1. 设置目标</h3> 
  <p>基于CIFAR-10数据集，训练一个简单CNN网络；保存训练好的模型，测试；使用GPU训练；</p> 
  <h3><a id="2__55"></a>2. 准备数据集</h3> 
  <p><a href="https://en.wikipedia.org/wiki/List_of_datasets_for_machine-learning_research" rel="nofollow">所有人工智能数据集总结</a><br> <a href="https://www.cs.toronto.edu/~kriz/cifar.html" rel="nofollow">加拿大高级研究所CIFAR-X 系列数据集解析</a></p> 
  <p>找数据，打标签，数据增强，预处理，现在一般都直接用现有的数据；例如：CIFAR-10</p> 
  <h3><a id="3__61"></a>3. 模型搭建</h3> 
  <p><strong>定义网络</strong>—设置<strong>损失函数</strong>，优化<strong>迭代方法</strong></p> 
  <p><a href="https://blog.csdn.net/qq_35082030/article/details/73368962">常见模型</a><br> <a href="https://zhuanlan.zhihu.com/p/35709485" rel="nofollow">常见损失函数</a><br> <a href="https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/3-4-A-speed-up-learning/" rel="nofollow">常见优化方法</a></p> 
  <h3><a id="4__67"></a>4. 训练网络与测试</h3> 
  <p>实际的和标签的差就是loss</p> 
  <p>这里看PPT：<a href="https://github.com/yuneming/DeepLearningTutorial">李宏毅一天搞懂深度学习</a></p> 
  <h3><a id="5__72"></a>5. 保存模型</h3> 
  <ul> 
   <li> <p><code>cfair10.pth（pytorch）</code>：<br> 多 GPU 训练的方法是使用 torch.nn.DataParallel</p> </li> 
   <li> <p><code>model.ckpt</code>：—&gt;&gt;&gt;<code>checkpoint</code><br> <code>xxx.ckpt.data-0000-of-00001</code> 权重;<br> <code>xxx.ckpt.meta</code> 图结构;<br> <code>xxx.ckpt.index</code> 权重节点索引）</p> </li> 
   <li> <p><code>model_deploy.prototxt</code> (描述了网络结构和数据集信息);</p> </li> 
   <li> <p><code>train_iter_100.caffemodel</code>（权重）</p> </li> 
  </ul> 
  <h3><a id="6__84"></a>6. 验证模型</h3> 
  <p>拿些没有用过的图，去用训练好的模型。</p> 
  <h3><a id="7__87"></a>7. 评价模型的方法</h3> 
  <p>待上传</p> 
  <p>例如输出一个模糊矩阵</p> 
  <h1><a id="_93"></a>参考链接</h1> 
  <p><a href="https://www.jianshu.com/p/e704a6f6e8d3" rel="nofollow">https://www.jianshu.com/p/e704a6f6e8d3</a></p> 
 </div> 
 <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e0530931f4.css" rel="stylesheet"> 
</div>, newsAttr=2, newsImage=https://profile.csdnimg.cn/3/8/C/3_sinat_36458870, orderNum=null, isPublic=null, thumbs=536, visits=164, comments=null, collects=536, newsSource=https://blog.csdn.net/sinat_36458870, newsSourceAuthor=BRUCE_WUANG, newsSourceTags=人工智能,深度学习, status=null, delFlag=null, createBy=null, createTime=null, updateBy=null, updateTime=null, remark=null, beginTime=null, endTime=null, params={}, newsType=null)
2020-09-03 15:19:25.551 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:45 -接收到消息的时间----->>> 1599117565551
消费tag->>> 14
从消息队列中拿到数据----------->>>> {csdnNews=LinqNews(newsId=null, userId=1, newsTypeId=18, newsTitle=如何根据普通ip地址获取当前地理位置, newsContent=<div id="article_content" class="article_content clearfix"> 
 <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3d4dc5c1de.css"> 
 <div class="htmledit_views" id="content_views"> 
  <h2>前言：</h2> 
  <p>我们现在需要做的功能是根据ip地址获取当前地理位置，是Web 服务API,获取后的位置信息一般是城市级别的，不是很精确的那种获取。</p> 
  <p><span style="color:#3399ea;"><strong>（1）开发者需要做的准备工作：</strong></span></p> 
  <p><img alt="" height="189" src="https://img-blog.csdnimg.cn/20200517164926676.png" width="731"></p> 
  <p>需要登录百度地图的api,点击web 服务API.</p> 
  <p><img alt="" height="783" src="https://img-blog.csdnimg.cn/20200517165445645.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1200"></p> 
  <p>&nbsp;</p> 
  <p>开发文档的地址：<a href="http://lbsyun.baidu.com/index.php?title=webapi/ip-api" rel="nofollow">http://lbsyun.baidu.com/index.php?title=webapi/ip-api</a></p> 
  <p><span style="color:#86ca5e;"><strong>请求的URL</strong></span> 有俩个，</p> 
  <pre>
<code class="language-html">http://api.map.baidu.com/location/ip?ak=您的AK&amp;ip=您的IP&amp;coor=bd09ll //HTTP协议 

https://api.map.baidu.com/location/ip?ak=您的AK&amp;ip=您的IP&amp;coor=bd09ll //HTTPS协议</code></pre> 
  <p><span style="color:#86ca5e;"><strong>请求的参数</strong></span></p> 
  <p>其中需要注意的是： <span style="color:#f33b45;"><strong>ak 是必填的，其他几个参数可选。</strong></span></p> 
  <p><img alt="" height="844" src="https://img-blog.csdnimg.cn/20200517165640331.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1200"></p> 
  <p><span style="color:#3399ea;"><strong>（2）如何申请AK</strong></span></p> 
  <p>地址：<a href="http://lbsyun.baidu.com/apiconsole/key#/home" rel="nofollow">http://lbsyun.baidu.com/apiconsole/key#/home</a></p> 
  <p>首先需要点到我的应用里面，新建应用，我这下面是已经建好了。</p> 
  <p><img alt="" height="614" src="https://img-blog.csdnimg.cn/2020051717003282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1200"></p> 
  <p>&nbsp;</p> 
  <p><img alt="" height="942" src="https://img-blog.csdnimg.cn/20200517170122967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1014"></p> 
  <p>&nbsp;</p> 
  <p>点击确定即可。</p> 
  <p>需要注意的是：ip白名单不建议使用 0.0.0.0/0&nbsp; 可以使用具体的ip名称。</p> 
  <p><span style="color:#3399ea;"><strong>（3）代码调用</strong></span></p> 
  <p><img alt="" height="480" src="https://img-blog.csdnimg.cn/20200517170457816.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1200"></p> 
  <p>获取到的json 我把他复制出来，看一下怎么解析这个json.&nbsp; 我这里用的是阿里巴巴下的jsonObject ,所以需要引用jar 包。</p> 
  <pre>
<code class="language-java">{
	"address": "CN|上海|上海|None|CHINANET|0|0",
	"content": {
		"address_detail": {
			"province": "上海市",
			"city": "上海市",
			"street": "",
			"district": "",
			"street_number": "",
			"city_code": 289
		},
		"address": "上海市",
		"point": {
			"x": "13524118.26",
			"y": "3642780.37"
		}
	},
	"status": 0
}</code></pre> 
  <p><img alt="" height="924" src="https://img-blog.csdnimg.cn/20200517171924477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1200"></p> 
  <p><span style="color:#3399ea;"><strong>（4）代码</strong></span></p> 
  <pre>
<code class="language-java">package com.bos.test;

import com.alibaba.fastjson.JSONObject;
import com.bos.util.SendRequest;


public class MenuTest {

    public static void main(String[] args) {
        String url = "http://api.map.baidu.com/location/ip?&amp;ak=lGhonqkkoUGZurajdlpL1QqciA215kkq";
        JSONObject jsonObject = SendRequest.sendGet2(url);
        System.out.println(jsonObject);
        //获取content中的值
        JSONObject contentJsonObject = jsonObject.getJSONObject("content");
        System.out.println("contentJsonObject-------"+contentJsonObject);
        //获取详细地址数据
        JSONObject addressDetailJsonObject = contentJsonObject.getJSONObject("address_detail");
        String address = addressDetailJsonObject.getString("province");
        String city = addressDetailJsonObject.getString("city");
        System.out.println("address_detail-------"+addressDetailJsonObject);
        System.out.println("address-------"+address);
        System.out.println("city-------"+city);

        String address2 = contentJsonObject.getString("address");
        System.out.println("address2-----"+address2);

        JSONObject pointJsonObject = contentJsonObject.getJSONObject("point");
        String x = pointJsonObject.getString("x");
        String y = pointJsonObject.getString("y");
        System.out.println("x----"+x);
        System.out.println("y----"+y);
    }


}
</code></pre> 
  <pre>
<code class="language-java"> /**
     * 发送get 请求，比如定时任务调用的就是请求
     * @param url
     * @return
     */
    public static JSONObject sendGet2(String url) {
        JSONObject jsonObject = null;
        StringBuffer sb = new StringBuffer();
        BufferedReader in = null;
        try {
            String urlName = url;
            URL realUrl = new URL(urlName);
            // 打开和URL之间的连接
            URLConnection conn = realUrl.openConnection();
            // 设置通用的请求属性
            conn.setRequestProperty("accept", "*/*");
            conn.setRequestProperty("connection", "Keep-Alive");
            conn.setRequestProperty("user-agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)");
            conn.setConnectTimeout(10000);
            // 建立实际的连接
            conn.connect();
            // 定义BufferedReader输入流来读取URL的响应
            in = new BufferedReader(new InputStreamReader(conn.getInputStream(), "UTF-8"));
            String line;
            while ((line = in.readLine()) != null) {
                sb.append(line);
            }
            jsonObject = JSON.parseObject(sb.toString());
        } catch (Exception e) {
            System.out.println("发送GET请求出现异常！" + e);
            // 使用finally块来关闭输入流
        } finally {
            try {
                if (in != null) {
                    in.close();
                }
            } catch (IOException ex) {
                System.out.println("关闭流异常");
            }
        }
        return jsonObject;
    }</code></pre> 
  <p>做到上面其实就可以了，但是如果调用次数太多的话也会报异常。这个时候就需要申请开发者资质认证，我这边先申请一下个人开发者。</p> 
  <p><img alt="" height="1200" src="https://img-blog.csdnimg.cn/20200521084449229.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1080"></p> 
  <p>&nbsp;</p> 
  <p><img alt="" height="621" src="https://img-blog.csdnimg.cn/20200521084602757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1200"></p> 
  <p>&nbsp;</p> 
  <p><img alt="" height="564" src="https://img-blog.csdnimg.cn/2020052108570653.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1073"></p> 
  <p>&nbsp;</p> 
  <p>&nbsp;</p> 
  <h3>番外加赠：</h3> 
  <p>上面的文档可以获取到当前城市的中心点，比如我在上海 ，获取的就是上海市等。 如果想要精确信息，可以根据返回的经纬度做一步查询。</p> 
  <p>文档地址：<a href="http://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-geocoding-abroad" rel="nofollow">http://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-geocoding-abroad</a></p> 
  <p>&nbsp;</p> 
  <p><img alt="" height="778" src="https://img-blog.csdnimg.cn/20200527144127208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1200"></p> 
  <p>&nbsp;</p> 
  <p>其中需要注意的就是要查询自己是否有逆地理编码权限，具体操作图在下面。、</p> 
  <p><img alt="" height="573" src="https://img-blog.csdnimg.cn/20200527144329805.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1200"></p> 
  <p>查询应用是否有逆地理编码的权限。像我的话，没有，点击申请权限。</p> 
  <p><img alt="" height="790" src="https://img-blog.csdnimg.cn/20200527144514646.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1083"></p> 
  <p>点击申请权限往下做下去，我这边就不做了</p> 
  <p>&nbsp;&nbsp;<img alt="" height="883" src="https://img-blog.csdnimg.cn/20200527144611414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="930"></p> 
  <p>&nbsp;</p> 
 </div> 
</div>, newsAttr=2, newsImage=https://profile.csdnimg.cn/8/5/D/3_tangthh123, orderNum=null, isPublic=null, thumbs=153, visits=64, comments=null, collects=153, newsSource=https://blog.csdn.net/tangthh123, newsSourceAuthor=soup_tang, newsSourceTags=知识集锦,# 功能需求, status=null, delFlag=null, createBy=null, createTime=null, updateBy=null, updateTime=null, remark=null, beginTime=null, endTime=null, params={}, newsType=null)}
2020-09-03 15:19:25.552 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:50 -获取peNews--->>>null
2020-09-03 15:19:25.552 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:51 -获取entertainmentNews--->>>null
2020-09-03 15:19:25.552 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:52 -获取csdnNews--->>>LinqNews(newsId=null, userId=1, newsTypeId=18, newsTitle=如何根据普通ip地址获取当前地理位置, newsContent=<div id="article_content" class="article_content clearfix"> 
 <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3d4dc5c1de.css"> 
 <div class="htmledit_views" id="content_views"> 
  <h2>前言：</h2> 
  <p>我们现在需要做的功能是根据ip地址获取当前地理位置，是Web 服务API,获取后的位置信息一般是城市级别的，不是很精确的那种获取。</p> 
  <p><span style="color:#3399ea;"><strong>（1）开发者需要做的准备工作：</strong></span></p> 
  <p><img alt="" height="189" src="https://img-blog.csdnimg.cn/20200517164926676.png" width="731"></p> 
  <p>需要登录百度地图的api,点击web 服务API.</p> 
  <p><img alt="" height="783" src="https://img-blog.csdnimg.cn/20200517165445645.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1200"></p> 
  <p>&nbsp;</p> 
  <p>开发文档的地址：<a href="http://lbsyun.baidu.com/index.php?title=webapi/ip-api" rel="nofollow">http://lbsyun.baidu.com/index.php?title=webapi/ip-api</a></p> 
  <p><span style="color:#86ca5e;"><strong>请求的URL</strong></span> 有俩个，</p> 
  <pre>
<code class="language-html">http://api.map.baidu.com/location/ip?ak=您的AK&amp;ip=您的IP&amp;coor=bd09ll //HTTP协议 

https://api.map.baidu.com/location/ip?ak=您的AK&amp;ip=您的IP&amp;coor=bd09ll //HTTPS协议</code></pre> 
  <p><span style="color:#86ca5e;"><strong>请求的参数</strong></span></p> 
  <p>其中需要注意的是： <span style="color:#f33b45;"><strong>ak 是必填的，其他几个参数可选。</strong></span></p> 
  <p><img alt="" height="844" src="https://img-blog.csdnimg.cn/20200517165640331.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1200"></p> 
  <p><span style="color:#3399ea;"><strong>（2）如何申请AK</strong></span></p> 
  <p>地址：<a href="http://lbsyun.baidu.com/apiconsole/key#/home" rel="nofollow">http://lbsyun.baidu.com/apiconsole/key#/home</a></p> 
  <p>首先需要点到我的应用里面，新建应用，我这下面是已经建好了。</p> 
  <p><img alt="" height="614" src="https://img-blog.csdnimg.cn/2020051717003282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1200"></p> 
  <p>&nbsp;</p> 
  <p><img alt="" height="942" src="https://img-blog.csdnimg.cn/20200517170122967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1014"></p> 
  <p>&nbsp;</p> 
  <p>点击确定即可。</p> 
  <p>需要注意的是：ip白名单不建议使用 0.0.0.0/0&nbsp; 可以使用具体的ip名称。</p> 
  <p><span style="color:#3399ea;"><strong>（3）代码调用</strong></span></p> 
  <p><img alt="" height="480" src="https://img-blog.csdnimg.cn/20200517170457816.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1200"></p> 
  <p>获取到的json 我把他复制出来，看一下怎么解析这个json.&nbsp; 我这里用的是阿里巴巴下的jsonObject ,所以需要引用jar 包。</p> 
  <pre>
<code class="language-java">{
	"address": "CN|上海|上海|None|CHINANET|0|0",
	"content": {
		"address_detail": {
			"province": "上海市",
			"city": "上海市",
			"street": "",
			"district": "",
			"street_number": "",
			"city_code": 289
		},
		"address": "上海市",
		"point": {
			"x": "13524118.26",
			"y": "3642780.37"
		}
	},
	"status": 0
}</code></pre> 
  <p><img alt="" height="924" src="https://img-blog.csdnimg.cn/20200517171924477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1200"></p> 
  <p><span style="color:#3399ea;"><strong>（4）代码</strong></span></p> 
  <pre>
<code class="language-java">package com.bos.test;

import com.alibaba.fastjson.JSONObject;
import com.bos.util.SendRequest;


public class MenuTest {

    public static void main(String[] args) {
        String url = "http://api.map.baidu.com/location/ip?&amp;ak=lGhonqkkoUGZurajdlpL1QqciA215kkq";
        JSONObject jsonObject = SendRequest.sendGet2(url);
        System.out.println(jsonObject);
        //获取content中的值
        JSONObject contentJsonObject = jsonObject.getJSONObject("content");
        System.out.println("contentJsonObject-------"+contentJsonObject);
        //获取详细地址数据
        JSONObject addressDetailJsonObject = contentJsonObject.getJSONObject("address_detail");
        String address = addressDetailJsonObject.getString("province");
        String city = addressDetailJsonObject.getString("city");
        System.out.println("address_detail-------"+addressDetailJsonObject);
        System.out.println("address-------"+address);
        System.out.println("city-------"+city);

        String address2 = contentJsonObject.getString("address");
        System.out.println("address2-----"+address2);

        JSONObject pointJsonObject = contentJsonObject.getJSONObject("point");
        String x = pointJsonObject.getString("x");
        String y = pointJsonObject.getString("y");
        System.out.println("x----"+x);
        System.out.println("y----"+y);
    }


}
</code></pre> 
  <pre>
<code class="language-java"> /**
     * 发送get 请求，比如定时任务调用的就是请求
     * @param url
     * @return
     */
    public static JSONObject sendGet2(String url) {
        JSONObject jsonObject = null;
        StringBuffer sb = new StringBuffer();
        BufferedReader in = null;
        try {
            String urlName = url;
            URL realUrl = new URL(urlName);
            // 打开和URL之间的连接
            URLConnection conn = realUrl.openConnection();
            // 设置通用的请求属性
            conn.setRequestProperty("accept", "*/*");
            conn.setRequestProperty("connection", "Keep-Alive");
            conn.setRequestProperty("user-agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)");
            conn.setConnectTimeout(10000);
            // 建立实际的连接
            conn.connect();
            // 定义BufferedReader输入流来读取URL的响应
            in = new BufferedReader(new InputStreamReader(conn.getInputStream(), "UTF-8"));
            String line;
            while ((line = in.readLine()) != null) {
                sb.append(line);
            }
            jsonObject = JSON.parseObject(sb.toString());
        } catch (Exception e) {
            System.out.println("发送GET请求出现异常！" + e);
            // 使用finally块来关闭输入流
        } finally {
            try {
                if (in != null) {
                    in.close();
                }
            } catch (IOException ex) {
                System.out.println("关闭流异常");
            }
        }
        return jsonObject;
    }</code></pre> 
  <p>做到上面其实就可以了，但是如果调用次数太多的话也会报异常。这个时候就需要申请开发者资质认证，我这边先申请一下个人开发者。</p> 
  <p><img alt="" height="1200" src="https://img-blog.csdnimg.cn/20200521084449229.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1080"></p> 
  <p>&nbsp;</p> 
  <p><img alt="" height="621" src="https://img-blog.csdnimg.cn/20200521084602757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1200"></p> 
  <p>&nbsp;</p> 
  <p><img alt="" height="564" src="https://img-blog.csdnimg.cn/2020052108570653.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1073"></p> 
  <p>&nbsp;</p> 
  <p>&nbsp;</p> 
  <h3>番外加赠：</h3> 
  <p>上面的文档可以获取到当前城市的中心点，比如我在上海 ，获取的就是上海市等。 如果想要精确信息，可以根据返回的经纬度做一步查询。</p> 
  <p>文档地址：<a href="http://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-geocoding-abroad" rel="nofollow">http://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-geocoding-abroad</a></p> 
  <p>&nbsp;</p> 
  <p><img alt="" height="778" src="https://img-blog.csdnimg.cn/20200527144127208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1200"></p> 
  <p>&nbsp;</p> 
  <p>其中需要注意的就是要查询自己是否有逆地理编码权限，具体操作图在下面。、</p> 
  <p><img alt="" height="573" src="https://img-blog.csdnimg.cn/20200527144329805.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1200"></p> 
  <p>查询应用是否有逆地理编码的权限。像我的话，没有，点击申请权限。</p> 
  <p><img alt="" height="790" src="https://img-blog.csdnimg.cn/20200527144514646.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="1083"></p> 
  <p>点击申请权限往下做下去，我这边就不做了</p> 
  <p>&nbsp;&nbsp;<img alt="" height="883" src="https://img-blog.csdnimg.cn/20200527144611414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmd0aGgxMjM=,size_16,color_FFFFFF,t_70" width="930"></p> 
  <p>&nbsp;</p> 
 </div> 
</div>, newsAttr=2, newsImage=https://profile.csdnimg.cn/8/5/D/3_tangthh123, orderNum=null, isPublic=null, thumbs=153, visits=64, comments=null, collects=153, newsSource=https://blog.csdn.net/tangthh123, newsSourceAuthor=soup_tang, newsSourceTags=知识集锦,# 功能需求, status=null, delFlag=null, createBy=null, createTime=null, updateBy=null, updateTime=null, remark=null, beginTime=null, endTime=null, params={}, newsType=null)
2020-09-03 15:19:25.562 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:45 -接收到消息的时间----->>> 1599117565562
消费tag->>> 15
从消息队列中拿到数据----------->>>> {csdnNews=LinqNews(newsId=null, userId=1, newsTypeId=18, newsTitle=Python3.7.0以上版本安装pip报错ModuleNotFoundError: No module named ‘_ctypes‘解决方法, newsContent=<div id="article_content" class="article_content clearfix"> 
 <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3d4dc5c1de.css"> 
 <div id="content_views" class="markdown_views prism-atom-one-light"> 
  <!-- flowchart 箭头图标 勿删 --> 
  <svg xmlns="http://www.w3.org/2000/svg" style="display: none;"> 
   <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path> 
  </svg> 
  <h1><a id="Python37__0"></a>安装Python3.7 可看博客</h1> 
  <p><a href="https://blog.csdn.net/qq_23934063/article/details/103687417">【系统运维】开发环境多版本python共存环境部署-Linux</a></p> 
  <h1><a id="__3"></a>服务器下载 源码包</h1> 
  <p><a href="https://www.python.org/ftp/python/3.7.9/Python-3.7.9.tgz" rel="nofollow">python3.7.9</a><br> wget https://www.python.org/ftp/python/3.7.9/Python-3.7.9.tgz</p> 
  <h1><a id="_7"></a>安装依赖</h1> 
  <p>pip3.7 install<br> FastAPI<mark>0.54.1<br> uvicorn</mark>0.6.1</p> 
  <h1><a id="_12"></a>错误提示</h1> 
  <p>ModuleNotFoundError: No module named ‘_ctypes’</p> 
  <h2><a id="_16"></a>解决方法</h2> 
  <h3><a id="Ubuntu_17"></a>Ubuntu</h3> 
  <p><code>sudo apt-get install libffi-devel</code></p> 
  <h3><a id="CentOS_20"></a>CentOS</h3> 
  <p><code>yum install libffi-devel</code></p> 
  <h3><a id="_23"></a>重新编译安装</h3> 
  <p>make &amp;&amp; make install</p> 
  <h3><a id="_26"></a>再次安装依赖</h3> 
  <p><img src="https://img-blog.csdnimg.cn/20200901103156327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIzOTM0MDYz,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p> 
 </div> 
 <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e0530931f4.css" rel="stylesheet"> 
</div>, newsAttr=2, newsImage=https://profile.csdnimg.cn/1/3/8/3_qq_23934063, orderNum=null, isPublic=null, thumbs=560, visits=1393, comments=null, collects=560, newsSource=https://blog.csdn.net/qq_23934063, newsSourceAuthor=不太灵光的程序员, newsSourceTags=python, status=null, delFlag=null, createBy=null, createTime=null, updateBy=null, updateTime=null, remark=null, beginTime=null, endTime=null, params={}, newsType=null)}
2020-09-03 15:19:25.562 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:50 -获取peNews--->>>null
2020-09-03 15:19:25.562 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:51 -获取entertainmentNews--->>>null
2020-09-03 15:19:25.562 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:52 -获取csdnNews--->>>LinqNews(newsId=null, userId=1, newsTypeId=18, newsTitle=Python3.7.0以上版本安装pip报错ModuleNotFoundError: No module named ‘_ctypes‘解决方法, newsContent=<div id="article_content" class="article_content clearfix"> 
 <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3d4dc5c1de.css"> 
 <div id="content_views" class="markdown_views prism-atom-one-light"> 
  <!-- flowchart 箭头图标 勿删 --> 
  <svg xmlns="http://www.w3.org/2000/svg" style="display: none;"> 
   <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path> 
  </svg> 
  <h1><a id="Python37__0"></a>安装Python3.7 可看博客</h1> 
  <p><a href="https://blog.csdn.net/qq_23934063/article/details/103687417">【系统运维】开发环境多版本python共存环境部署-Linux</a></p> 
  <h1><a id="__3"></a>服务器下载 源码包</h1> 
  <p><a href="https://www.python.org/ftp/python/3.7.9/Python-3.7.9.tgz" rel="nofollow">python3.7.9</a><br> wget https://www.python.org/ftp/python/3.7.9/Python-3.7.9.tgz</p> 
  <h1><a id="_7"></a>安装依赖</h1> 
  <p>pip3.7 install<br> FastAPI<mark>0.54.1<br> uvicorn</mark>0.6.1</p> 
  <h1><a id="_12"></a>错误提示</h1> 
  <p>ModuleNotFoundError: No module named ‘_ctypes’</p> 
  <h2><a id="_16"></a>解决方法</h2> 
  <h3><a id="Ubuntu_17"></a>Ubuntu</h3> 
  <p><code>sudo apt-get install libffi-devel</code></p> 
  <h3><a id="CentOS_20"></a>CentOS</h3> 
  <p><code>yum install libffi-devel</code></p> 
  <h3><a id="_23"></a>重新编译安装</h3> 
  <p>make &amp;&amp; make install</p> 
  <h3><a id="_26"></a>再次安装依赖</h3> 
  <p><img src="https://img-blog.csdnimg.cn/20200901103156327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIzOTM0MDYz,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p> 
 </div> 
 <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e0530931f4.css" rel="stylesheet"> 
</div>, newsAttr=2, newsImage=https://profile.csdnimg.cn/1/3/8/3_qq_23934063, orderNum=null, isPublic=null, thumbs=560, visits=1393, comments=null, collects=560, newsSource=https://blog.csdn.net/qq_23934063, newsSourceAuthor=不太灵光的程序员, newsSourceTags=python, status=null, delFlag=null, createBy=null, createTime=null, updateBy=null, updateTime=null, remark=null, beginTime=null, endTime=null, params={}, newsType=null)
2020-09-03 15:19:25.571 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:45 -接收到消息的时间----->>> 1599117565571
消费tag->>> 16
从消息队列中拿到数据----------->>>> {csdnNews=LinqNews(newsId=null, userId=1, newsTypeId=18, newsTitle=Windows下安装Docker, newsContent=<div id="article_content" class="article_content clearfix"> 
 <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3d4dc5c1de.css"> 
 <div id="content_views" class="markdown_views prism-atom-one-dark"> 
  <!-- flowchart 箭头图标 勿删 --> 
  <svg xmlns="http://www.w3.org/2000/svg" style="display: none;"> 
   <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path> 
  </svg> 
  <h1><a id="_0"></a>前言</h1> 
  <p>本文介绍Windows下安装Docker。<br> <br></p> 
  <h1><a id="_5"></a>环境</h1> 
  <p>1.Windows10<br> 2.Docker</p> 
  <br> 
  <h1><a id="_13"></a>内容</h1> 
  <br> 
  <h2><a id="WindowsDocker_16"></a>Windows下安装Docker</h2> 
  <br> 
  <h3><a id="_19"></a>第一步：检查系统</h3> 
  <p>系统要求：</p> 
  <ul> 
   <li> <p>1.Windows 10 64位：专业版，企业版或教育版(内部版本高于16299)，系统内存最少4G</p> </li> 
   <li> <p>2.Hyper-V和虚拟化功能</p> </li> 
   <li> <p>3.安装WSL 2</p> </li> 
  </ul> 
  <br> 
  <h4><a id="1Win10_32"></a>1.检查Win10系统内存，系统类型及内部版本</h4> 
  <p>打开 “设置-Windows更新” ，点击OS内部版本信息：</p> 
  <ul> 
   <li> <p>查看系统内存，最少为4G；</p> </li> 
   <li> <p>查看系统类型，须是64位操作系统；</p> </li> 
   <li> <p>查看操作系统版本，此版本须大于16299。</p> </li> 
  </ul> 
  <p><img src="https://img-blog.csdnimg.cn/2020090120295539.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MDA0NTg0,size_16,color_FFFFFF,t_70#pic_center" alt=""><br> <img src="https://img-blog.csdnimg.cn/20200901203003792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MDA0NTg0,size_16,color_FFFFFF,t_70#pic_center" alt=""><br> <br></p> 
  <h4><a id="2HyperV_46"></a>2.检查Hyper-V和虚拟化功能是否启用</h4> 
  <p>打开"控制面板 - 程序 - 程序和功能 - 启用或关闭Windows功能"，检查Hyper-V是否启用</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200901203023779.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MDA0NTg0,size_16,color_FFFFFF,t_70#pic_center" alt=""></p> 
  <p>打开"任务管理器 - 性能"，检查虚拟化是否启用</p> 
  <p>(一般大家电脑都已开启，如果没有开启可参考：<a href="http://www.xitongcheng.com/jiaocheng/win10_article_53803.html" rel="nofollow">http://www.xitongcheng.com/jiaocheng/win10_article_53803.html</a>)</p> 
  <p><img src="https://img-blog.csdnimg.cn/202009012030390.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MDA0NTg0,size_16,color_FFFFFF,t_70#pic_center" alt=""></p> 
  <br> 
  <h4><a id="3WSL_2_63"></a>3.安装WSL 2</h4> 
  <p>WSL(Windows Sybsystem for Linux)，是一个为在Win10上运行Linux二进制可执行文件(ELF格式)的兼容层。</p> 
  <p>WSL通过以下地址下载，下载完成后，安装即可(安装过程中采用默认选项)。</p> 
  <p>下载地址：<a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi" rel="nofollow">https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi</a></p> 
  <br> 
  <h3><a id="Docker_76"></a>第二步：下载Docker</h3> 
  <p>下载地址：<a href="https://hub.docker.com/editions/community/docker-ce-desktop-windows" rel="nofollow">https://hub.docker.com/editions/community/docker-ce-desktop-windows</a></p> 
  <p>点击Get Stable，下载稳定版本即可</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200901203217973.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MDA0NTg0,size_16,color_FFFFFF,t_70#pic_center" alt=""></p> 
  <br> 
  <h3><a id="Docker_89"></a>第三步：安装Docker</h3> 
  <p>双击下载的Docker Desktop Installer.exe进行安装(安装过程采用默认选项即可)。安装完成后重启电脑。</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200901203119108.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MDA0NTg0,size_16,color_FFFFFF,t_70#pic_center" alt=""><br> <img src="https://img-blog.csdnimg.cn/20200901203126325.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MDA0NTg0,size_16,color_FFFFFF,t_70#pic_center" alt=""></p> 
  <br> 
  <h3><a id="Docker_98"></a>第四步：启动Docker</h3> 
  <p>安装完成后，打开Docker，Docker启动过程中会在任务栏中看到Docekr图标跳动，直至启动完毕停止跳动。</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200901203234572.jpg#pic_center" alt=""></p> 
  <p><img src="https://img-blog.csdnimg.cn/20200901203247664.png#pic_center" alt=""></p> 
  <p><img src="https://img-blog.csdnimg.cn/2020090120325449.png#pic_center" alt=""></p> 
  <br> 
  <h3><a id="_111"></a>第五步：查看版本</h3> 
  <p>打开cmd，输入命令：docker -v，如果可以成功查看版本，则说明Docker安装成功。</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200901203305434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MDA0NTg0,size_16,color_FFFFFF,t_70#pic_center" alt=""><br> <br></p> 
  <h3><a id="WindowsDocker_119"></a>第六步：Windows下Docker安装完成</h3> 
  <br> 
  <h1><a id="_122"></a>小结</h1> 
  <p>查看docker版本：docker -v</p> 
  <br> 
  <h1><a id="_129"></a>后语</h1> 
  <p>下篇介绍Linux下安装Docker，待续…</p> 
 </div> 
 <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e0530931f4.css" rel="stylesheet"> 
</div>, newsAttr=2, newsImage=https://profile.csdnimg.cn/1/5/6/3_qq_36004584, orderNum=null, isPublic=null, thumbs=2, visits=0, comments=null, collects=2, newsSource=https://blog.csdn.net/qq_36004584, newsSourceAuthor=dotnet之家, newsSourceTags=Docker, status=null, delFlag=null, createBy=null, createTime=null, updateBy=null, updateTime=null, remark=null, beginTime=null, endTime=null, params={}, newsType=null)}
2020-09-03 15:19:25.571 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:50 -获取peNews--->>>null
2020-09-03 15:19:25.571 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:51 -获取entertainmentNews--->>>null
2020-09-03 15:19:25.572 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:52 -获取csdnNews--->>>LinqNews(newsId=null, userId=1, newsTypeId=18, newsTitle=Windows下安装Docker, newsContent=<div id="article_content" class="article_content clearfix"> 
 <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3d4dc5c1de.css"> 
 <div id="content_views" class="markdown_views prism-atom-one-dark"> 
  <!-- flowchart 箭头图标 勿删 --> 
  <svg xmlns="http://www.w3.org/2000/svg" style="display: none;"> 
   <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path> 
  </svg> 
  <h1><a id="_0"></a>前言</h1> 
  <p>本文介绍Windows下安装Docker。<br> <br></p> 
  <h1><a id="_5"></a>环境</h1> 
  <p>1.Windows10<br> 2.Docker</p> 
  <br> 
  <h1><a id="_13"></a>内容</h1> 
  <br> 
  <h2><a id="WindowsDocker_16"></a>Windows下安装Docker</h2> 
  <br> 
  <h3><a id="_19"></a>第一步：检查系统</h3> 
  <p>系统要求：</p> 
  <ul> 
   <li> <p>1.Windows 10 64位：专业版，企业版或教育版(内部版本高于16299)，系统内存最少4G</p> </li> 
   <li> <p>2.Hyper-V和虚拟化功能</p> </li> 
   <li> <p>3.安装WSL 2</p> </li> 
  </ul> 
  <br> 
  <h4><a id="1Win10_32"></a>1.检查Win10系统内存，系统类型及内部版本</h4> 
  <p>打开 “设置-Windows更新” ，点击OS内部版本信息：</p> 
  <ul> 
   <li> <p>查看系统内存，最少为4G；</p> </li> 
   <li> <p>查看系统类型，须是64位操作系统；</p> </li> 
   <li> <p>查看操作系统版本，此版本须大于16299。</p> </li> 
  </ul> 
  <p><img src="https://img-blog.csdnimg.cn/2020090120295539.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MDA0NTg0,size_16,color_FFFFFF,t_70#pic_center" alt=""><br> <img src="https://img-blog.csdnimg.cn/20200901203003792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MDA0NTg0,size_16,color_FFFFFF,t_70#pic_center" alt=""><br> <br></p> 
  <h4><a id="2HyperV_46"></a>2.检查Hyper-V和虚拟化功能是否启用</h4> 
  <p>打开"控制面板 - 程序 - 程序和功能 - 启用或关闭Windows功能"，检查Hyper-V是否启用</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200901203023779.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MDA0NTg0,size_16,color_FFFFFF,t_70#pic_center" alt=""></p> 
  <p>打开"任务管理器 - 性能"，检查虚拟化是否启用</p> 
  <p>(一般大家电脑都已开启，如果没有开启可参考：<a href="http://www.xitongcheng.com/jiaocheng/win10_article_53803.html" rel="nofollow">http://www.xitongcheng.com/jiaocheng/win10_article_53803.html</a>)</p> 
  <p><img src="https://img-blog.csdnimg.cn/202009012030390.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MDA0NTg0,size_16,color_FFFFFF,t_70#pic_center" alt=""></p> 
  <br> 
  <h4><a id="3WSL_2_63"></a>3.安装WSL 2</h4> 
  <p>WSL(Windows Sybsystem for Linux)，是一个为在Win10上运行Linux二进制可执行文件(ELF格式)的兼容层。</p> 
  <p>WSL通过以下地址下载，下载完成后，安装即可(安装过程中采用默认选项)。</p> 
  <p>下载地址：<a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi" rel="nofollow">https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi</a></p> 
  <br> 
  <h3><a id="Docker_76"></a>第二步：下载Docker</h3> 
  <p>下载地址：<a href="https://hub.docker.com/editions/community/docker-ce-desktop-windows" rel="nofollow">https://hub.docker.com/editions/community/docker-ce-desktop-windows</a></p> 
  <p>点击Get Stable，下载稳定版本即可</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200901203217973.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MDA0NTg0,size_16,color_FFFFFF,t_70#pic_center" alt=""></p> 
  <br> 
  <h3><a id="Docker_89"></a>第三步：安装Docker</h3> 
  <p>双击下载的Docker Desktop Installer.exe进行安装(安装过程采用默认选项即可)。安装完成后重启电脑。</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200901203119108.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MDA0NTg0,size_16,color_FFFFFF,t_70#pic_center" alt=""><br> <img src="https://img-blog.csdnimg.cn/20200901203126325.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MDA0NTg0,size_16,color_FFFFFF,t_70#pic_center" alt=""></p> 
  <br> 
  <h3><a id="Docker_98"></a>第四步：启动Docker</h3> 
  <p>安装完成后，打开Docker，Docker启动过程中会在任务栏中看到Docekr图标跳动，直至启动完毕停止跳动。</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200901203234572.jpg#pic_center" alt=""></p> 
  <p><img src="https://img-blog.csdnimg.cn/20200901203247664.png#pic_center" alt=""></p> 
  <p><img src="https://img-blog.csdnimg.cn/2020090120325449.png#pic_center" alt=""></p> 
  <br> 
  <h3><a id="_111"></a>第五步：查看版本</h3> 
  <p>打开cmd，输入命令：docker -v，如果可以成功查看版本，则说明Docker安装成功。</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200901203305434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MDA0NTg0,size_16,color_FFFFFF,t_70#pic_center" alt=""><br> <br></p> 
  <h3><a id="WindowsDocker_119"></a>第六步：Windows下Docker安装完成</h3> 
  <br> 
  <h1><a id="_122"></a>小结</h1> 
  <p>查看docker版本：docker -v</p> 
  <br> 
  <h1><a id="_129"></a>后语</h1> 
  <p>下篇介绍Linux下安装Docker，待续…</p> 
 </div> 
 <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e0530931f4.css" rel="stylesheet"> 
</div>, newsAttr=2, newsImage=https://profile.csdnimg.cn/1/5/6/3_qq_36004584, orderNum=null, isPublic=null, thumbs=2, visits=0, comments=null, collects=2, newsSource=https://blog.csdn.net/qq_36004584, newsSourceAuthor=dotnet之家, newsSourceTags=Docker, status=null, delFlag=null, createBy=null, createTime=null, updateBy=null, updateTime=null, remark=null, beginTime=null, endTime=null, params={}, newsType=null)
2020-09-03 15:19:25.587 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:45 -接收到消息的时间----->>> 1599117565587
消费tag->>> 17
从消息队列中拿到数据----------->>>> {csdnNews=LinqNews(newsId=null, userId=1, newsTypeId=18, newsTitle=Ubuntu:E: 无法获得锁 /var/lib/dpkg/lock - open (11: 资源暂时不可用) E: 无法锁定管理目录(/var/lib/dpkg/)，是否有其他进程正占用它？, newsContent=<div id="article_content" class="article_content clearfix"> 
 <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3d4dc5c1de.css"> 
 <div id="content_views" class="markdown_views prism-atom-one-dark"> 
  <!-- flowchart 箭头图标 勿删 --> 
  <svg xmlns="http://www.w3.org/2000/svg" style="display: none;"> 
   <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path> 
  </svg> 
  <p><font color="red" size="5">重新装了个Ubuntu 16.04中安装 opencv 所需依赖库</font><br> <strong>执行</strong></p> 
  <pre><code class="prism language-c">sudo apt<span class="token operator">-</span>get install cmake libgtk2<span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">-</span>dev libavcodec<span class="token operator">-</span>dev libavformat<span class="token operator">-</span>dev libjpeg<span class="token punctuation">.</span>dev libpng<span class="token operator">-</span>dev libtiff<span class="token operator">-</span>dev libtiff4<span class="token punctuation">.</span>dev libswscale<span class="token operator">-</span>dev libjasper<span class="token operator">-</span>dev libcurl4<span class="token operator">-</span>openssl<span class="token operator">-</span>dev libtbb2 libdc1394<span class="token operator">-</span><span class="token number">22</span><span class="token operator">-</span>dev
</code></pre> 
  <p><strong>却碰到了</strong><br> <img src="https://img-blog.csdnimg.cn/20200902161159674.png#pic_center" alt="在这里插入图片描述"><br> <font color="blue" size="4">想一想这个问题好像碰到过两次，便再次查询便得到了解决方法</font></p> 
  <p><font color="red" size="5">解决方法：</font><br> <img src="https://img-blog.csdnimg.cn/20200902161359340.png#pic_center" alt="在这里插入图片描述"></p> 
  <p><font color="red" size="5">执行：</font></p> 
  <p>sudo rm /var/cache/apt/archives/lock</p> 
  <p>sudo rm /var/lib/dpkg/lock</p> 
  <p><mark>问题完美解决</mark></p> 
 </div> 
 <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e0530931f4.css" rel="stylesheet"> 
</div>, newsAttr=2, newsImage=https://profile.csdnimg.cn/4/B/A/3_hikd_bn, orderNum=null, isPublic=null, thumbs=11, visits=49, comments=null, collects=11, newsSource=https://blog.csdn.net/HikD_bn, newsSourceAuthor=Hik。, newsSourceTags=linux, status=null, delFlag=null, createBy=null, createTime=null, updateBy=null, updateTime=null, remark=null, beginTime=null, endTime=null, params={}, newsType=null)}
2020-09-03 15:19:25.587 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:50 -获取peNews--->>>null
2020-09-03 15:19:25.587 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:51 -获取entertainmentNews--->>>null
2020-09-03 15:19:25.587 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:52 -获取csdnNews--->>>LinqNews(newsId=null, userId=1, newsTypeId=18, newsTitle=Ubuntu:E: 无法获得锁 /var/lib/dpkg/lock - open (11: 资源暂时不可用) E: 无法锁定管理目录(/var/lib/dpkg/)，是否有其他进程正占用它？, newsContent=<div id="article_content" class="article_content clearfix"> 
 <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3d4dc5c1de.css"> 
 <div id="content_views" class="markdown_views prism-atom-one-dark"> 
  <!-- flowchart 箭头图标 勿删 --> 
  <svg xmlns="http://www.w3.org/2000/svg" style="display: none;"> 
   <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path> 
  </svg> 
  <p><font color="red" size="5">重新装了个Ubuntu 16.04中安装 opencv 所需依赖库</font><br> <strong>执行</strong></p> 
  <pre><code class="prism language-c">sudo apt<span class="token operator">-</span>get install cmake libgtk2<span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">-</span>dev libavcodec<span class="token operator">-</span>dev libavformat<span class="token operator">-</span>dev libjpeg<span class="token punctuation">.</span>dev libpng<span class="token operator">-</span>dev libtiff<span class="token operator">-</span>dev libtiff4<span class="token punctuation">.</span>dev libswscale<span class="token operator">-</span>dev libjasper<span class="token operator">-</span>dev libcurl4<span class="token operator">-</span>openssl<span class="token operator">-</span>dev libtbb2 libdc1394<span class="token operator">-</span><span class="token number">22</span><span class="token operator">-</span>dev
</code></pre> 
  <p><strong>却碰到了</strong><br> <img src="https://img-blog.csdnimg.cn/20200902161159674.png#pic_center" alt="在这里插入图片描述"><br> <font color="blue" size="4">想一想这个问题好像碰到过两次，便再次查询便得到了解决方法</font></p> 
  <p><font color="red" size="5">解决方法：</font><br> <img src="https://img-blog.csdnimg.cn/20200902161359340.png#pic_center" alt="在这里插入图片描述"></p> 
  <p><font color="red" size="5">执行：</font></p> 
  <p>sudo rm /var/cache/apt/archives/lock</p> 
  <p>sudo rm /var/lib/dpkg/lock</p> 
  <p><mark>问题完美解决</mark></p> 
 </div> 
 <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e0530931f4.css" rel="stylesheet"> 
</div>, newsAttr=2, newsImage=https://profile.csdnimg.cn/4/B/A/3_hikd_bn, orderNum=null, isPublic=null, thumbs=11, visits=49, comments=null, collects=11, newsSource=https://blog.csdn.net/HikD_bn, newsSourceAuthor=Hik。, newsSourceTags=linux, status=null, delFlag=null, createBy=null, createTime=null, updateBy=null, updateTime=null, remark=null, beginTime=null, endTime=null, params={}, newsType=null)
2020-09-03 15:19:25.597 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:45 -接收到消息的时间----->>> 1599117565597
消费tag->>> 18
从消息队列中拿到数据----------->>>> {csdnNews=LinqNews(newsId=null, userId=1, newsTypeId=18, newsTitle=大数据学习之Shell, newsContent=<div id="article_content" class="article_content clearfix"> 
 <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3d4dc5c1de.css"> 
 <div id="content_views" class="markdown_views prism-atom-one-light"> 
  <!-- flowchart 箭头图标 勿删 --> 
  <svg xmlns="http://www.w3.org/2000/svg" style="display: none;"> 
   <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path> 
  </svg> 
  <h2><a id="1Shell_0"></a>1、Shell概述</h2> 
  <blockquote> 
   <p>我们知道，一台机器是由硬件组装起来的，它还有操作系统，Windows、Linux、Mac等，我们在Linux里面介绍过，而我们今天讲的Shell就是在基于Linux内核的基础上，接收应用程序（用户命令），然后调用起来操作系统的内核来分配资源，进行指令的运行，我们可以参考下图理解</p> 
  </blockquote> 
  <div class="mermaid">
   <svg id="mermaid-svg-NoG3iJVR6vIUfyXn" width="761.3125610351562" xmlns="http://www.w3.org/2000/svg" height="106.078125" viewbox="0 0.000003814697265625 761.3125610351562 106.078125">
    <style>#mermaid-svg-NoG3iJVR6vIUfyXn .label{font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family);fill:#333;color:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .label text{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .node rect,#mermaid-svg-NoG3iJVR6vIUfyXn .node circle,#mermaid-svg-NoG3iJVR6vIUfyXn .node ellipse,#mermaid-svg-NoG3iJVR6vIUfyXn .node polygon,#mermaid-svg-NoG3iJVR6vIUfyXn .node path{fill:#ECECFF;stroke:#9370db;stroke-width:1px}#mermaid-svg-NoG3iJVR6vIUfyXn .node .label{text-align:center;fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .node.clickable{cursor:pointer}#mermaid-svg-NoG3iJVR6vIUfyXn .arrowheadPath{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .edgePath .path{stroke:#333;stroke-width:1.5px}#mermaid-svg-NoG3iJVR6vIUfyXn .flowchart-link{stroke:#333;fill:none}#mermaid-svg-NoG3iJVR6vIUfyXn .edgeLabel{background-color:#e8e8e8;text-align:center}#mermaid-svg-NoG3iJVR6vIUfyXn .edgeLabel rect{opacity:0.9}#mermaid-svg-NoG3iJVR6vIUfyXn .edgeLabel span{color:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .cluster rect{fill:#ffffde;stroke:#aa3;stroke-width:1px}#mermaid-svg-NoG3iJVR6vIUfyXn .cluster text{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family);font-size:12px;background:#ffffde;border:1px solid #aa3;border-radius:2px;pointer-events:none;z-index:100}#mermaid-svg-NoG3iJVR6vIUfyXn .actor{stroke:#ccf;fill:#ECECFF}#mermaid-svg-NoG3iJVR6vIUfyXn text.actor&gt;tspan{fill:#000;stroke:none}#mermaid-svg-NoG3iJVR6vIUfyXn .actor-line{stroke:grey}#mermaid-svg-NoG3iJVR6vIUfyXn .messageLine0{stroke-width:1.5;stroke-dasharray:none;stroke:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .messageLine1{stroke-width:1.5;stroke-dasharray:2, 2;stroke:#333}#mermaid-svg-NoG3iJVR6vIUfyXn #arrowhead path{fill:#333;stroke:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .sequenceNumber{fill:#fff}#mermaid-svg-NoG3iJVR6vIUfyXn #sequencenumber{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn #crosshead path{fill:#333;stroke:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .messageText{fill:#333;stroke:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .labelBox{stroke:#ccf;fill:#ECECFF}#mermaid-svg-NoG3iJVR6vIUfyXn .labelText,#mermaid-svg-NoG3iJVR6vIUfyXn .labelText&gt;tspan{fill:#000;stroke:none}#mermaid-svg-NoG3iJVR6vIUfyXn .loopText,#mermaid-svg-NoG3iJVR6vIUfyXn .loopText&gt;tspan{fill:#000;stroke:none}#mermaid-svg-NoG3iJVR6vIUfyXn .loopLine{stroke-width:2px;stroke-dasharray:2, 2;stroke:#ccf;fill:#ccf}#mermaid-svg-NoG3iJVR6vIUfyXn .note{stroke:#aa3;fill:#fff5ad}#mermaid-svg-NoG3iJVR6vIUfyXn .noteText,#mermaid-svg-NoG3iJVR6vIUfyXn .noteText&gt;tspan{fill:#000;stroke:none}#mermaid-svg-NoG3iJVR6vIUfyXn .activation0{fill:#f4f4f4;stroke:#666}#mermaid-svg-NoG3iJVR6vIUfyXn .activation1{fill:#f4f4f4;stroke:#666}#mermaid-svg-NoG3iJVR6vIUfyXn .activation2{fill:#f4f4f4;stroke:#666}#mermaid-svg-NoG3iJVR6vIUfyXn .mermaid-main-font{font-family:"trebuchet ms", verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn .section{stroke:none;opacity:0.2}#mermaid-svg-NoG3iJVR6vIUfyXn .section0{fill:rgba(102,102,255,0.49)}#mermaid-svg-NoG3iJVR6vIUfyXn .section2{fill:#fff400}#mermaid-svg-NoG3iJVR6vIUfyXn .section1,#mermaid-svg-NoG3iJVR6vIUfyXn .section3{fill:#fff;opacity:0.2}#mermaid-svg-NoG3iJVR6vIUfyXn .sectionTitle0{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .sectionTitle1{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .sectionTitle2{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .sectionTitle3{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .sectionTitle{text-anchor:start;font-size:11px;text-height:14px;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn .grid .tick{stroke:#d3d3d3;opacity:0.8;shape-rendering:crispEdges}#mermaid-svg-NoG3iJVR6vIUfyXn .grid .tick text{font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn .grid path{stroke-width:0}#mermaid-svg-NoG3iJVR6vIUfyXn .today{fill:none;stroke:red;stroke-width:2px}#mermaid-svg-NoG3iJVR6vIUfyXn .task{stroke-width:2}#mermaid-svg-NoG3iJVR6vIUfyXn .taskText{text-anchor:middle;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn .taskText:not([font-size]){font-size:11px}#mermaid-svg-NoG3iJVR6vIUfyXn .taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn .taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}#mermaid-svg-NoG3iJVR6vIUfyXn .task.clickable{cursor:pointer}#mermaid-svg-NoG3iJVR6vIUfyXn .taskText.clickable{cursor:pointer;fill:#003163 !important;font-weight:bold}#mermaid-svg-NoG3iJVR6vIUfyXn .taskTextOutsideLeft.clickable{cursor:pointer;fill:#003163 !important;font-weight:bold}#mermaid-svg-NoG3iJVR6vIUfyXn .taskTextOutsideRight.clickable{cursor:pointer;fill:#003163 !important;font-weight:bold}#mermaid-svg-NoG3iJVR6vIUfyXn .taskText0,#mermaid-svg-NoG3iJVR6vIUfyXn .taskText1,#mermaid-svg-NoG3iJVR6vIUfyXn .taskText2,#mermaid-svg-NoG3iJVR6vIUfyXn .taskText3{fill:#fff}#mermaid-svg-NoG3iJVR6vIUfyXn .task0,#mermaid-svg-NoG3iJVR6vIUfyXn .task1,#mermaid-svg-NoG3iJVR6vIUfyXn .task2,#mermaid-svg-NoG3iJVR6vIUfyXn .task3{fill:#8a90dd;stroke:#534fbc}#mermaid-svg-NoG3iJVR6vIUfyXn .taskTextOutside0,#mermaid-svg-NoG3iJVR6vIUfyXn .taskTextOutside2{fill:#000}#mermaid-svg-NoG3iJVR6vIUfyXn .taskTextOutside1,#mermaid-svg-NoG3iJVR6vIUfyXn .taskTextOutside3{fill:#000}#mermaid-svg-NoG3iJVR6vIUfyXn .active0,#mermaid-svg-NoG3iJVR6vIUfyXn .active1,#mermaid-svg-NoG3iJVR6vIUfyXn .active2,#mermaid-svg-NoG3iJVR6vIUfyXn .active3{fill:#bfc7ff;stroke:#534fbc}#mermaid-svg-NoG3iJVR6vIUfyXn .activeText0,#mermaid-svg-NoG3iJVR6vIUfyXn .activeText1,#mermaid-svg-NoG3iJVR6vIUfyXn .activeText2,#mermaid-svg-NoG3iJVR6vIUfyXn .activeText3{fill:#000 !important}#mermaid-svg-NoG3iJVR6vIUfyXn .done0,#mermaid-svg-NoG3iJVR6vIUfyXn .done1,#mermaid-svg-NoG3iJVR6vIUfyXn .done2,#mermaid-svg-NoG3iJVR6vIUfyXn .done3{stroke:grey;fill:#d3d3d3;stroke-width:2}#mermaid-svg-NoG3iJVR6vIUfyXn .doneText0,#mermaid-svg-NoG3iJVR6vIUfyXn .doneText1,#mermaid-svg-NoG3iJVR6vIUfyXn .doneText2,#mermaid-svg-NoG3iJVR6vIUfyXn .doneText3{fill:#000 !important}#mermaid-svg-NoG3iJVR6vIUfyXn .crit0,#mermaid-svg-NoG3iJVR6vIUfyXn .crit1,#mermaid-svg-NoG3iJVR6vIUfyXn .crit2,#mermaid-svg-NoG3iJVR6vIUfyXn .crit3{stroke:#f88;fill:red;stroke-width:2}#mermaid-svg-NoG3iJVR6vIUfyXn .activeCrit0,#mermaid-svg-NoG3iJVR6vIUfyXn .activeCrit1,#mermaid-svg-NoG3iJVR6vIUfyXn .activeCrit2,#mermaid-svg-NoG3iJVR6vIUfyXn .activeCrit3{stroke:#f88;fill:#bfc7ff;stroke-width:2}#mermaid-svg-NoG3iJVR6vIUfyXn .doneCrit0,#mermaid-svg-NoG3iJVR6vIUfyXn .doneCrit1,#mermaid-svg-NoG3iJVR6vIUfyXn .doneCrit2,#mermaid-svg-NoG3iJVR6vIUfyXn .doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}#mermaid-svg-NoG3iJVR6vIUfyXn .milestone{transform:rotate(45deg) scale(0.8, 0.8)}#mermaid-svg-NoG3iJVR6vIUfyXn .milestoneText{font-style:italic}#mermaid-svg-NoG3iJVR6vIUfyXn .doneCritText0,#mermaid-svg-NoG3iJVR6vIUfyXn .doneCritText1,#mermaid-svg-NoG3iJVR6vIUfyXn .doneCritText2,#mermaid-svg-NoG3iJVR6vIUfyXn .doneCritText3{fill:#000 !important}#mermaid-svg-NoG3iJVR6vIUfyXn .activeCritText0,#mermaid-svg-NoG3iJVR6vIUfyXn .activeCritText1,#mermaid-svg-NoG3iJVR6vIUfyXn .activeCritText2,#mermaid-svg-NoG3iJVR6vIUfyXn .activeCritText3{fill:#000 !important}#mermaid-svg-NoG3iJVR6vIUfyXn .titleText{text-anchor:middle;font-size:18px;fill:#000;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn g.classGroup text{fill:#9370db;stroke:none;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family);font-size:10px}#mermaid-svg-NoG3iJVR6vIUfyXn g.classGroup text .title{font-weight:bolder}#mermaid-svg-NoG3iJVR6vIUfyXn g.clickable{cursor:pointer}#mermaid-svg-NoG3iJVR6vIUfyXn g.classGroup rect{fill:#ECECFF;stroke:#9370db}#mermaid-svg-NoG3iJVR6vIUfyXn g.classGroup line{stroke:#9370db;stroke-width:1}#mermaid-svg-NoG3iJVR6vIUfyXn .classLabel .box{stroke:none;stroke-width:0;fill:#ECECFF;opacity:0.5}#mermaid-svg-NoG3iJVR6vIUfyXn .classLabel .label{fill:#9370db;font-size:10px}#mermaid-svg-NoG3iJVR6vIUfyXn .relation{stroke:#9370db;stroke-width:1;fill:none}#mermaid-svg-NoG3iJVR6vIUfyXn .dashed-line{stroke-dasharray:3}#mermaid-svg-NoG3iJVR6vIUfyXn #compositionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-svg-NoG3iJVR6vIUfyXn #compositionEnd{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-svg-NoG3iJVR6vIUfyXn #aggregationStart{fill:#ECECFF;stroke:#9370db;stroke-width:1}#mermaid-svg-NoG3iJVR6vIUfyXn #aggregationEnd{fill:#ECECFF;stroke:#9370db;stroke-width:1}#mermaid-svg-NoG3iJVR6vIUfyXn #dependencyStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-svg-NoG3iJVR6vIUfyXn #dependencyEnd{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-svg-NoG3iJVR6vIUfyXn #extensionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-svg-NoG3iJVR6vIUfyXn #extensionEnd{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-svg-NoG3iJVR6vIUfyXn .commit-id,#mermaid-svg-NoG3iJVR6vIUfyXn .commit-msg,#mermaid-svg-NoG3iJVR6vIUfyXn .branch-label{fill:lightgrey;color:lightgrey;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn .pieTitleText{text-anchor:middle;font-size:25px;fill:#000;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn .slice{font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn g.stateGroup text{fill:#9370db;stroke:none;font-size:10px;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn g.stateGroup text{fill:#9370db;fill:#333;stroke:none;font-size:10px}#mermaid-svg-NoG3iJVR6vIUfyXn g.statediagram-cluster .cluster-label text{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn g.stateGroup .state-title{font-weight:bolder;fill:#000}#mermaid-svg-NoG3iJVR6vIUfyXn g.stateGroup rect{fill:#ECECFF;stroke:#9370db}#mermaid-svg-NoG3iJVR6vIUfyXn g.stateGroup line{stroke:#9370db;stroke-width:1}#mermaid-svg-NoG3iJVR6vIUfyXn .transition{stroke:#9370db;stroke-width:1;fill:none}#mermaid-svg-NoG3iJVR6vIUfyXn .stateGroup .composit{fill:white;border-bottom:1px}#mermaid-svg-NoG3iJVR6vIUfyXn .stateGroup .alt-composit{fill:#e0e0e0;border-bottom:1px}#mermaid-svg-NoG3iJVR6vIUfyXn .state-note{stroke:#aa3;fill:#fff5ad}#mermaid-svg-NoG3iJVR6vIUfyXn .state-note text{fill:black;stroke:none;font-size:10px}#mermaid-svg-NoG3iJVR6vIUfyXn .stateLabel .box{stroke:none;stroke-width:0;fill:#ECECFF;opacity:0.7}#mermaid-svg-NoG3iJVR6vIUfyXn .edgeLabel text{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .stateLabel text{fill:#000;font-size:10px;font-weight:bold;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn .node circle.state-start{fill:black;stroke:black}#mermaid-svg-NoG3iJVR6vIUfyXn .node circle.state-end{fill:black;stroke:white;stroke-width:1.5}#mermaid-svg-NoG3iJVR6vIUfyXn #statediagram-barbEnd{fill:#9370db}#mermaid-svg-NoG3iJVR6vIUfyXn .statediagram-cluster rect{fill:#ECECFF;stroke:#9370db;stroke-width:1px}#mermaid-svg-NoG3iJVR6vIUfyXn .statediagram-cluster rect.outer{rx:5px;ry:5px}#mermaid-svg-NoG3iJVR6vIUfyXn .statediagram-state .divider{stroke:#9370db}#mermaid-svg-NoG3iJVR6vIUfyXn .statediagram-state .title-state{rx:5px;ry:5px}#mermaid-svg-NoG3iJVR6vIUfyXn .statediagram-cluster.statediagram-cluster .inner{fill:white}#mermaid-svg-NoG3iJVR6vIUfyXn .statediagram-cluster.statediagram-cluster-alt .inner{fill:#e0e0e0}#mermaid-svg-NoG3iJVR6vIUfyXn .statediagram-cluster .inner{rx:0;ry:0}#mermaid-svg-NoG3iJVR6vIUfyXn .statediagram-state rect.basic{rx:5px;ry:5px}#mermaid-svg-NoG3iJVR6vIUfyXn .statediagram-state rect.divider{stroke-dasharray:10,10;fill:#efefef}#mermaid-svg-NoG3iJVR6vIUfyXn .note-edge{stroke-dasharray:5}#mermaid-svg-NoG3iJVR6vIUfyXn .statediagram-note rect{fill:#fff5ad;stroke:#aa3;stroke-width:1px;rx:0;ry:0}:root{--mermaid-font-family: '"trebuchet ms", verdana, arial';--mermaid-font-family: "Comic Sans MS", "Comic Sans", cursive}#mermaid-svg-NoG3iJVR6vIUfyXn .error-icon{fill:#522}#mermaid-svg-NoG3iJVR6vIUfyXn .error-text{fill:#522;stroke:#522}#mermaid-svg-NoG3iJVR6vIUfyXn .edge-thickness-normal{stroke-width:2px}#mermaid-svg-NoG3iJVR6vIUfyXn .edge-thickness-thick{stroke-width:3.5px}#mermaid-svg-NoG3iJVR6vIUfyXn .edge-pattern-solid{stroke-dasharray:0}#mermaid-svg-NoG3iJVR6vIUfyXn .edge-pattern-dashed{stroke-dasharray:3}#mermaid-svg-NoG3iJVR6vIUfyXn .edge-pattern-dotted{stroke-dasharray:2}#mermaid-svg-NoG3iJVR6vIUfyXn .marker{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .marker.cross{stroke:#333}

:root { --mermaid-font-family: "trebuchet ms", verdana, arial;}</style>
    <style>#mermaid-svg-NoG3iJVR6vIUfyXn {
    color: rgba(0, 0, 0, 0.75);
    font: ;
  }</style>
    <g>
     <g class="output">
      <g class="clusters"></g>
      <g class="edgePaths">
       <g class="edgePath LS-A LE-B" id="L-A-B" style="opacity: 1;">
        <path class="path" d="M238.23435974121094,53.0390625L310.61717224121094,53.0390625L382.99998474121094,53.0390625" marker-end="url(#arrowhead5634)" style="fill:none"></path>
        <defs>
         <marker id="arrowhead5634" viewbox="0 0 10 10" refx="9" refy="5" markerunits="strokeWidth" markerwidth="8" markerheight="6" orient="auto">
          <path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path>
         </marker>
        </defs>
       </g>
       <g class="edgePath LS-B LE-D" style="opacity: 1;" id="L-B-D">
        <path class="path" d="M472.6259415661941,46.67305862537887L498.07810974121094,43.0390625L523.0781097412109,44.82328339447467" marker-end="url(#arrowhead5635)" style="fill:none"></path>
        <defs>
         <marker id="arrowhead5635" viewbox="0 0 10 10" refx="9" refy="5" markerunits="strokeWidth" markerwidth="8" markerheight="6" orient="auto">
          <path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path>
         </marker>
        </defs>
       </g>
       <g class="edgePath LS-D LE-B" style="opacity: 1;" id="L-D-B">
        <path class="path" d="M523.0781097412109,61.25484160552533L498.07810974121094,63.0390625L472.6259415661941,59.40506637462113" marker-end="url(#arrowhead5636)" style="fill:none"></path>
        <defs>
         <marker id="arrowhead5636" viewbox="0 0 10 10" refx="9" refy="5" markerunits="strokeWidth" markerwidth="8" markerheight="6" orient="auto">
          <path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path>
         </marker>
        </defs>
       </g>
      </g>
      <g class="edgeLabels">
       <g class="edgeLabel" transform="translate(310.61717224121094,53.0390625)" style="opacity: 1;">
        <g transform="translate(-47.3828125,-18.9765625)" class="label">
         <rect rx="0" ry="0" width="94.765625" height="37.953125" style="fill:#e8e8e8;"></rect>
         <foreignobject width="94.765625" height="37.9599609375">
          <div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">
           <span id="L-L-A-B" class="edgeLabel L-LS-A' L-LE-B">shell脚本</span>
          </div>
         </foreignobject>
        </g>
       </g>
       <g class="edgeLabel" style="opacity: 1;" transform="">
        <g transform="translate(0,0)" class="label">
         <rect rx="0" ry="0" width="0" height="0" style="fill:#e8e8e8;"></rect>
         <foreignobject width="0" height="0">
          <div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">
           <span id="L-L-B-D" class="edgeLabel L-LS-B' L-LE-D"></span>
          </div>
         </foreignobject>
        </g>
       </g>
       <g class="edgeLabel" style="opacity: 1;" transform="">
        <g transform="translate(0,0)" class="label">
         <rect rx="0" ry="0" width="0" height="0" style="fill:#e8e8e8;"></rect>
         <foreignobject width="0" height="0">
          <div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">
           <span id="L-L-D-B" class="edgeLabel L-LS-D' L-LE-B"></span>
          </div>
         </foreignobject>
        </g>
       </g>
      </g>
      <g class="nodes">
       <g class="node default" id="A" transform="translate(123.11717987060547,53.0390625)" style="opacity: 1;">
        <rect rx="0" ry="0" x="-115.1171875" y="-28.9765625" width="230.234375" height="57.953125" class="label-container"></rect>
        <g class="label" transform="translate(0,0)">
         <g transform="translate(-105.1171875,-18.9765625)">
          <foreignobject width="210.24000549316406" height="37.9599609375">
           <div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">
            应用程序或用户命令
           </div>
          </foreignobject>
         </g>
        </g>
       </g>
       <g class="node default" style="opacity: 1;" id="B" transform="translate(428.03904724121094,53.0390625)">
        <circle x="-45.0390625" y="-28.9765625" r="45.0390625" class="label-container"></circle>
        <g class="label" transform="translate(0,0)">
         <g transform="translate(-35.0390625,-18.9765625)">
          <foreignobject width="70.08000183105469" height="37.9599609375">
           <div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">
            服务器
           </div>
          </foreignobject>
         </g>
        </g>
       </g>
       <g class="node default" style="opacity: 1;" id="D" transform="translate(638.1952896118164,53.0390625)">
        <rect rx="0" ry="0" x="-115.1171875" y="-28.9765625" width="230.234375" height="57.953125" class="label-container"></rect>
        <g class="label" transform="translate(0,0)">
         <g transform="translate(-105.1171875,-18.9765625)">
          <foreignobject width="210.24000549316406" height="37.9599609375">
           <div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">
            分配资源及执行脚本
           </div>
          </foreignobject>
         </g>
        </g>
       </g>
      </g>
     </g>
    </g>
   </svg>
  </div> 
  <blockquote> 
   <p>Shell是一个功能相当大的编程语言，易编写、易调试、灵活性强。</p> 
  </blockquote> 
  <ul> 
   <li>Linux自身提供Shell解析器</li> 
  </ul> 
  <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> /etc/shells
/bin/sh
/bin/bash
</code></pre> 
  <ul> 
   <li>bash和sh的关系</li> 
  </ul> 
  <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 bin<span class="token punctuation">]</span>$ ll <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">bash</span>
rwxr-xr-x. 1 root root 941880 5月  11 2016 <span class="token function">bash</span>
lrwxrwxrwx. 1 root root      4 5月  27 2017 sh -<span class="token operator">&gt;</span> <span class="token function">bash</span>
</code></pre> 
  <p>可以看出来sh是bash的软连接</p> 
  <ul> 
   <li>Centos默认的解析器是bash</li> 
  </ul> 
  <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 bin<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$SHELL</span>
/bin/bash
</code></pre> 
  <h2><a id="2Shell_39"></a>2、Shell脚本入门</h2> 
  <ol> 
   <li>脚本格式</li> 
  </ol> 
  <blockquote> 
   <pre><code> 脚本以#!/bin/bash开头(指定的解析器)
</code></pre> 
  </blockquote> 
  <ol start="2"> 
   <li>第一个脚本Shell脚本：helloworld</li> 
  </ol> 
  <blockquote> 
   <p>先创建一个Shell脚本，并且切换到vim编辑模式下</p> 
  </blockquote> 
  <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> helloworld.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim helloworld.sh
</code></pre> 
  <blockquote> 
   <p>对Shell脚本进行编辑</p> 
  </blockquote> 
  <pre><code class="prism language-bash"><span class="token shebang important">#!/bin/bash</span>
<span class="token keyword">echo</span> <span class="token string">"helloworld"</span>
</code></pre> 
  <p>3.脚本常用执行方式</p> 
  <blockquote> 
   <p>①采用bash或sh+脚本的相对路径或绝对路径（不用赋予脚本+x权限）<br> sh+脚本的相对路径和绝对路径</p> 
  </blockquote> 
  <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ sh helloworld.sh 
Helloworld
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ sh /home/atguigu/datas/helloworld.sh 
helloworld
</code></pre> 
  <blockquote> 
   <p>bash+脚本的相对路径和绝对路径</p> 
  </blockquote> 
  <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">bash</span> helloworld.sh 
Helloworld
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">bash</span> /home/atguigu/datas/helloworld.sh 
Helloworld
</code></pre> 
  <blockquote> 
   <p>②采用输入脚本的绝对路径或相对路径执行脚本（必须具有可执行权限+x）</p> 
  </blockquote> 
  <blockquote> 
   <p>(a)首先要赋予helloworld.sh 脚本的+x权限</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 744 helloworld.sh
</code></pre> 
   <p>(b)执行脚本<br> 相对路径</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./helloworld.sh 
Helloworld
</code></pre> 
   <p>绝对路径</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ /home/atguigu/datas/helloworld.sh 
Helloworld
</code></pre> 
  </blockquote> 
  <blockquote> 
   <p>注意：第一种执行方法，本质是bash解析器帮你执行脚本，所以脚本本身不需要执行权限。第二种执行方法，本质是脚本需要自己执行，所以需要执行权限。</p> 
  </blockquote> 
  <blockquote> 
   <p>③在脚本的路径前加上“.”<br> （a）有以下脚本</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">cat</span> test1.sh 
<span class="token comment">#! /bin/bash</span>
A<span class="token operator">=</span><span class="token string">"hello"</span>
</code></pre> 
   <p>(b) 分别使用sh,bash,./ 和 . 的方式来执行，结果如下：</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">bash</span> test1.sh 
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$A</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ sh test1.sh 
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$A</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./test1.sh 
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$A</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">.</span> test1.sh 
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$A</span>
hello
</code></pre> 
  </blockquote> 
  <blockquote> 
   <p>以上三种方式的区别：<br> 前两种方式都是在当前shell中打开一个子shell来执行脚本内容，当脚本内容结束，则子shell关闭，回到父shell中。<br> 第三种，也就是使用在脚本路径前加.的方式，可以使脚本内容在当前shell里执行，而无需打开子shell！<br> 开子shell与不开子shell的区别就在于，环境变量的继承关系，如在子shell中设置的当前变量，父shell是不可见的。</p> 
  </blockquote> 
  <h2><a id="3_116"></a>3、变量</h2> 
  <p>1.常用系统变量</p> 
  <blockquote> 
   <p>常用的系统变量</p> 
   <pre><code class="prism language-bash"><span class="token variable">$HOME</span>、<span class="token variable">$PWD</span>、<span class="token variable">$SHELL</span>、<span class="token variable">$USER</span>等
</code></pre> 
  </blockquote> 
  <p>2.自定义变量</p> 
  <blockquote> 
   <p>①基本语法<br> （a）定义变量：变量=值<br> （b）撤销变量：unset变量<br> （c）声明静态变量：readonly变量，注意：不能unset<br> ②变量定义规则<br> （a）变量名称可以由字母、数字和下划线组成，但是不能以数字开头，环境变量名建议大写。<br> （b）等号两侧不能有空格<br> （c）在bash中，变量默认类型都是字符串类型，无法直接进行数值运算。<br> （d）变量的值如果有空格，需要使用双引号或单引号括起来。<br> ③案例实操<br> 定义变量A</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ A<span class="token operator">=</span>5
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$A</span>
5
</code></pre> 
   <p>给变量A重新赋值</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ A<span class="token operator">=</span>8
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$A</span>
8
</code></pre> 
   <p>撤销变量A</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ unset A
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$A</span>
</code></pre> 
   <p>声明静态的变量B=2，不能unset</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">readonly</span> B<span class="token operator">=</span>2
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$B</span>
2
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ B<span class="token operator">=</span>9
-bash: B: <span class="token function">readonly</span> variable
</code></pre> 
   <p>在bash中，变量默认类型都是字符串类型，无法直接进行数值运算</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 ~<span class="token punctuation">]</span>$ C<span class="token operator">=</span>1+2
<span class="token punctuation">[</span>root@hadoop101 ~<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$C</span>
1+2
</code></pre> 
   <p>变量的值如果有空格，需要使用双引号或单引号括起来</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 ~<span class="token punctuation">]</span>$ D<span class="token operator">=</span>I love banzhang
-bash: world: <span class="token function">command</span> not found
<span class="token punctuation">[</span>root@hadoop101 ~<span class="token punctuation">]</span>$ D<span class="token operator">=</span><span class="token string">"I love banzhang"</span>
<span class="token punctuation">[</span>root@hadoop101 ~<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$D</span>
I love banzhang
</code></pre> 
   <p>可把变量提升为全局环境变量，可供其他Shell程序使用<br> export 变量名</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim helloworld.sh 
</code></pre> 
   <p>在helloworld文件中增加echo$B</p> 
   <pre><code class="prism language-bash"><span class="token shebang important">#!/bin/bash</span>
<span class="token keyword">echo</span> <span class="token string">"helloworld"</span>
<span class="token keyword">echo</span> <span class="token variable">$B</span>
</code></pre> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./helloworld.sh 
Helloworld
</code></pre> 
   <p>发现并没有打印输出变量B的值。</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">export</span> B
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./helloworld.sh 
helloworld
2
</code></pre> 
  </blockquote> 
  <p>3.特殊变量</p> 
  <blockquote> 
   <p>(1)$n<br> ①基本语法<br> $n （功能描述：n为数字，$0代表该脚本名称，$1-<span class="katex--inline"><span class="katex"><span class="katex-mathml">
       <math>
        <semantics>
         <mrow>
          <mn>
           9
          </mn>
          <mi mathvariant="normal">
           代
          </mi>
          <mi mathvariant="normal">
           表
          </mi>
          <mi mathvariant="normal">
           第
          </mi>
          <mi mathvariant="normal">
           一
          </mi>
          <mi mathvariant="normal">
           到
          </mi>
          <mi mathvariant="normal">
           第
          </mi>
          <mi mathvariant="normal">
           九
          </mi>
          <mi mathvariant="normal">
           个
          </mi>
          <mi mathvariant="normal">
           参
          </mi>
          <mi mathvariant="normal">
           数
          </mi>
          <mi mathvariant="normal">
           ，
          </mi>
          <mi mathvariant="normal">
           十
          </mi>
          <mi mathvariant="normal">
           以
          </mi>
          <mi mathvariant="normal">
           上
          </mi>
          <mi mathvariant="normal">
           的
          </mi>
          <mi mathvariant="normal">
           参
          </mi>
          <mi mathvariant="normal">
           数
          </mi>
          <mi mathvariant="normal">
           ，
          </mi>
          <mi mathvariant="normal">
           十
          </mi>
          <mi mathvariant="normal">
           以
          </mi>
          <mi mathvariant="normal">
           上
          </mi>
          <mi mathvariant="normal">
           的
          </mi>
          <mi mathvariant="normal">
           参
          </mi>
          <mi mathvariant="normal">
           数
          </mi>
          <mi mathvariant="normal">
           需
          </mi>
          <mi mathvariant="normal">
           要
          </mi>
          <mi mathvariant="normal">
           用
          </mi>
          <mi mathvariant="normal">
           大
          </mi>
          <mi mathvariant="normal">
           括
          </mi>
          <mi mathvariant="normal">
           号
          </mi>
          <mi mathvariant="normal">
           包
          </mi>
          <mi mathvariant="normal">
           含
          </mi>
          <mi mathvariant="normal">
           ，
          </mi>
          <mi mathvariant="normal">
           如
          </mi>
         </mrow>
         <annotation encoding="application/x-tex">
          9代表第一到第九个参数，十以上的参数，十以上的参数需要用大括号包含，如
         </annotation>
        </semantics>
       </math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.64444em; vertical-align: 0em;"></span><span class="mord">9</span><span class="mord cjk_fallback">代</span><span class="mord cjk_fallback">表</span><span class="mord cjk_fallback">第</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">到</span><span class="mord cjk_fallback">第</span><span class="mord cjk_fallback">九</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">参</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">十</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">上</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">参</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">十</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">上</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">参</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">需</span><span class="mord cjk_fallback">要</span><span class="mord cjk_fallback">用</span><span class="mord cjk_fallback">大</span><span class="mord cjk_fallback">括</span><span class="mord cjk_fallback">号</span><span class="mord cjk_fallback">包</span><span class="mord cjk_fallback">含</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">如</span></span></span></span></span>{10}）<br> ②案例实操</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> parameter.sh 
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim parameter.sh
<span class="token comment">#!/bin/bash</span>
<span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$0</span> <span class="token variable">$1</span> <span class="token variable">$2</span>"</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 777 parameter.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./parameter.sh cls  xz
./parameter.sh  cls   xz
</code></pre> 
   <p>(2) $#<br> ①基本语法<br> $# （功能描述：获取所有输入参数个数，常用于循环）。<br> ②案例实操</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim parameter.sh
<span class="token comment">#!/bin/bash</span>
<span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$0</span> <span class="token variable">$1</span> <span class="token variable">$2</span>"</span>
<span class="token keyword">echo</span> $<span class="token comment">#</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 777 parameter.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./parameter.sh cls  xz
parameter.sh cls xz 
2
</code></pre> 
   <p>(3)</p> 
   <pre><code class="prism language-bash"><span class="token variable">$*</span>、<span class="token variable">$@</span>
</code></pre> 
   <p>①基本语法</p> 
   <pre><code class="prism language-bash"><span class="token variable">$*</span>	（功能描述：这个变量代表命令行中所有的参数，<span class="token variable">$*</span>把所有的参数看成一个整体）
<span class="token variable">$@</span>	（功能描述：这个变量也代表命令行中所有的参数，不过<span class="token variable">$@</span>把每个参数区分对待）
</code></pre> 
   <p>②案例实操</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim parameter.sh
<span class="token comment">#!/bin/bash</span>
<span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$0</span> <span class="token variable">$1</span> <span class="token variable">$2</span>"</span>
<span class="token keyword">echo</span> $<span class="token comment">#</span>
<span class="token keyword">echo</span> <span class="token variable">$*</span>
<span class="token keyword">echo</span> <span class="token variable">$@</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">bash</span> parameter.sh 1 2 3
parameter.sh  1   2
3
1 2 3
1 2 3
</code></pre> 
   <p>(4) $？<br> ①基本语法<br> $？ （功能描述：最后一次执行的命令的返回状态。如果这个变量的值为0，证明上一个命令正确执行；如果这个变量的值为非0（具体是哪个数，由命令自己来决定），则证明上一个命令执行不正确了。）<br> ②案例实操</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./helloworld.sh 
hello world
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$?</span>
0
</code></pre> 
  </blockquote> 
  <h2><a id="4_256"></a>4、运算符</h2> 
  <blockquote> 
   <p>(1)基本语法<br> $((运算式))或<br> $[运算式]<br> (2)案例实操</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span><span class="token comment"># S=$[(2+3)*4]</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span><span class="token comment"># echo $S</span>
</code></pre> 
  </blockquote> 
  <h2><a id="5_265"></a>5、条件判断</h2> 
  <blockquote> 
   <p>(1)基本语法<br> ①test condition<br> ②[ condition ]（注意condition前后要有空格）<br> (2)常用判断条件<br> ①两个整数之间比较<br> -lt 小于 -le 小于等于<br> -eq 等于 -gt 大于<br> -ge 大于等于） -ne 不等于<br> ②按照文件权限进行判断<br> -r 有读的权限（read） -w 有写的权限（write）<br> -x 有执行的权限（execute）<br> ③按照文件类型进行判断<br> -f 文件存在并且是一个常规的文件（file）<br> -e 文件存在（existence） -d 文件存在并是一个目录（directory）<br> (3)案例实操<br> ①23是否大于等于22</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token punctuation">[</span> 23 -ge 22 <span class="token punctuation">]</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$?</span>
0
</code></pre> 
   <p>②helloworld.sh是否具有写权限</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token punctuation">[</span> -w helloworld.sh <span class="token punctuation">]</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$?</span>
0
</code></pre> 
   <p>③/home/atguigu/cls.txt目录中的文件是否存在</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token punctuation">[</span> -e /home/atguigu/cls.txt <span class="token punctuation">]</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$?</span>
1
</code></pre> 
   <p>④多条件判断（&amp;&amp; 表示前一条命令执行成功时，才执行后一条命令，|| 表示上一条命令执行失败后，才执行下一条命令）</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 ~<span class="token punctuation">]</span>$ <span class="token punctuation">[</span> condition <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">echo</span> OK <span class="token operator">||</span> <span class="token keyword">echo</span> notok
OK
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token punctuation">[</span> condition <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token keyword">echo</span> notok
notok
</code></pre> 
  </blockquote> 
  <h2><a id="6_307"></a>6、流程控制</h2> 
  <p>1.if判断</p> 
  <blockquote> 
   <p>(1)基本语法<br> （1）单分支<br> if [ 条件判断式 ];then<br> 程序<br> fi<br> 或者<br> if [ 条件判断式 ]<br> then<br> 程序<br> fi<br> （2）多分支<br> if [ 条件判断式 ]<br> then<br> 程序<br> elif [ 条件判断式 ]<br> then<br> 程序<br> else<br> 程序<br> fi</p> 
  </blockquote> 
  <blockquote> 
   <p>注意事项：<br> （1）[ 条件判断式 ]，中括号和条件判断式之间必须有空格<br> （2）if后要有空格</p> 
  </blockquote> 
  <blockquote> 
   <p>(2)实例实操<br> 输入一个数字，如果是1，则输出banzhang zhen shuai，如果是2，则输出cls zhen mei，如果是其它，什么也不输出。</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> if.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim if.sh
<span class="token comment">#!/bin/bash</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$1</span> -eq <span class="token string">"1"</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
      <span class="token keyword">echo</span> <span class="token string">"banzhang zhen shuai"</span>
<span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$1</span> -eq <span class="token string">"2"</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
      <span class="token keyword">echo</span> <span class="token string">"cls zhen mei"</span>
<span class="token keyword">fi</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 777 if.sh 
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./if.sh 1
banzhang zhen shuai
</code></pre> 
  </blockquote> 
  <p>2.case</p> 
  <blockquote> 
   <p>(1)基本语法<br> case $变量名 in<br> “值1”）<br> 如果变量的值等于值1，则执行程序1<br> ;;<br> “值2”）<br> 如果变量的值等于值2，则执行程序2<br> ;;<br> …省略其他分支…<br> *）<br> 如果变量的值都不是以上的值，则执行此程序<br> ;;<br> esac</p> 
  </blockquote> 
  <blockquote> 
   <p>注意事项：<br> （1）case行尾必须为单词“in”，每一个模式匹配必须以右括号“）”结束。<br> （2）双分号“;;”表示命令序列结束，相当于java中的break。<br> （3）最后的“*）”表示默认模式，相当于java中的default。</p> 
  </blockquote> 
  <blockquote> 
   <p>(2)案例实操<br> 输入一个数字，如果是1，则输出banzhang，如果是2，则输出cls，如果是其它，输出songsong。</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> case.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim case.sh
<span class="token operator">!</span>/bin/bash
<span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span>
<span class="token string">"1"</span><span class="token punctuation">)</span>
      <span class="token keyword">echo</span> <span class="token string">"banzhang"</span>
<span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token string">"2"</span><span class="token punctuation">)</span>
      <span class="token keyword">echo</span> <span class="token string">"cls"</span>
<span class="token punctuation">;</span><span class="token punctuation">;</span>
*<span class="token punctuation">)</span>
      <span class="token keyword">echo</span> <span class="token string">"songsong"</span>
<span class="token punctuation">;</span><span class="token punctuation">;</span>
esac
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 777 case.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./case.sh 1
1
</code></pre> 
  </blockquote> 
  <p>3.for循环</p> 
  <blockquote> 
   <p>(1)基本语法<br> for (( 初始值;循环控制条件;变量变化 ))<br> do<br> 程序<br> done<br> 或者<br> for 变量 in 值1 值2 值3…<br> do<br> 程序<br> done<br> (2)案例实操 从1加到100</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> for1.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim for1.sh
<span class="token comment">#!/bin/bash</span>
s<span class="token operator">=</span>0
<span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span>
<span class="token keyword">do</span>
      s<span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$s</span>+<span class="token variable">$i</span><span class="token punctuation">]</span>
<span class="token keyword">done</span>
<span class="token keyword">echo</span> <span class="token variable">$s</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 777 for1.sh 
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./for1.sh 
“5050”
</code></pre> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> for2.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim for2.sh
<span class="token comment">#!/bin/bash</span>
<span class="token comment">#打印数字</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable">$*</span>
  <span class="token keyword">do</span>
   <span class="token keyword">echo</span> <span class="token string">"ban zhang love <span class="token variable">$i</span> "</span>
<span class="token keyword">done</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 777 for2.sh 
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">bash</span> for2.sh cls xz bd
ban zhang love cls
ban zhang love xz
ban zhang love bd
</code></pre> 
   <p>(3)</p> 
   <pre><code class="prism language-bash"><span class="token comment">#比较比较“$*”和“$@”区别</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim for.sh
<span class="token comment">#!/bin/bash </span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$*</span>"</span> 
<span class="token comment">#$*中的所有参数看成是一个整体，所以这个for循环只会循环一次 </span>
      <span class="token keyword">do</span> 
             <span class="token keyword">echo</span> <span class="token string">"ban zhang love <span class="token variable">$i</span>"</span>
    <span class="token keyword">done</span> 
<span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$@</span>"</span> 
<span class="token comment">#$@中的每个参数都看成是独立的，所以“$@”中有几个参数，就会循环几次 </span>
      <span class="token keyword">do</span> 
             <span class="token keyword">echo</span> <span class="token string">"ban zhang love <span class="token variable">$j</span>"</span> 
<span class="token keyword">done</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 777 for.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">bash</span> for.sh cls xz bd
ban zhang love cls xz bd
ban zhang love cls
ban zhang love xz
ban zhang love bd
</code></pre> 
  </blockquote> 
  <p>4.while循环</p> 
  <blockquote> 
   <p>(1)基本语法<br> while [ 条件判断式 ]<br> do<br> 程序<br> done<br> (2)案例实操<br> 从1加到100</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> while.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim while.sh
<span class="token comment">#!/bin/bash</span>
s<span class="token operator">=</span>0
i<span class="token operator">=</span>1
<span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token variable">$i</span> -le 100 <span class="token punctuation">]</span>
<span class="token keyword">do</span>
      s<span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$s</span>+<span class="token variable">$i</span><span class="token punctuation">]</span>
     i<span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$i</span>+1<span class="token punctuation">]</span>
<span class="token keyword">done</span>
<span class="token keyword">echo</span> <span class="token variable">$s</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 777 while.sh 
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./while.sh 
5050
</code></pre> 
  </blockquote> 
  <h2><a id="7_479"></a>7、读取控制台输出</h2> 
  <blockquote> 
   <p>(1)基本语法<br> read(选项)(参数)<br> 选项：<br> -p：指定读取值时的提示符；<br> -t：指定读取值时等待的时间（秒）。<br> 参数<br> 变量：指定读取值的变量名<br> (2)案例实操<br> 提示7秒内，读取控制台输入的名称</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> read.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim read.sh
<span class="token comment">#!/bin/bash</span>
<span class="token function">read</span> -t 7 -p <span class="token string">"Enter your name in 7 seconds "</span> NAME
<span class="token keyword">echo</span> <span class="token variable">$NAME</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./read.sh 
Enter your name <span class="token keyword">in</span> 7 seconds xiaoze
xiaoze
</code></pre> 
  </blockquote> 
  <h2><a id="8_499"></a>8、函数</h2> 
  <p>1.系统函数</p> 
  <blockquote> 
   <p>(1)basename<br> ①基本语法<br> basename [string / pathname] [suffix] （功能描述：basename命令会删掉所有的前缀包括最后一个（‘/’）字符，然后将字符串显示出来。<br> ②案例实操<br> 截取该/home/atguigu/banzhang.txt路径的文件名称</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">basename</span> /home/atguigu/banzhang.txt 
banzhang.txt
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">basename</span> /home/atguigu/banzhang.txt .txt
banzhang
</code></pre> 
   <p>(2)dirname<br> ①基本语法<br> dirname 文件绝对路径 （功能描述：从给定的包含绝对路径的文件名中去除文件名（非目录的部分），然后返回剩下的路径（目录的部分））<br> ②案例实操<br> 获取banzhang.txt文件的路径</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 ~<span class="token punctuation">]</span>$ <span class="token function">dirname</span> /home/atguigu/banzhang.txt 
/home/atguigu
</code></pre> 
  </blockquote> 
  <p>2.自定义函数</p> 
  <blockquote> 
   <p>(1)基本语法<br> [ function ] funname[()]<br> {<br> Action;<br> [return int;]<br> }<br> funname<br> (2)案例实操</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> fun.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim fun.sh
<span class="token comment">#!/bin/bash</span>
<span class="token keyword">function</span> sum<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
s<span class="token operator">=</span>0
 s<span class="token operator">=</span>$<span class="token punctuation">[</span> <span class="token variable">$1</span> + <span class="token variable">$2</span> <span class="token punctuation">]</span>
  <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$s</span>"</span>
<span class="token punctuation">}</span>
<span class="token function">read</span> -p <span class="token string">"Please input the number1: "</span> n1<span class="token punctuation">;</span>
<span class="token function">read</span> -p <span class="token string">"Please input the number2: "</span> n2<span class="token punctuation">;</span>
<span class="token function">sum</span> <span class="token variable">$n1</span> <span class="token variable">$n2</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 777 fun.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./fun.sh 
Please input the number1: 2
Please input the number2: 5
7
</code></pre> 
  </blockquote> 
  <h2><a id="9Shell_549"></a>9、Shell工具</h2> 
  <p>1.cut</p> 
  <blockquote> 
   <p>cut的工作就是“剪”，具体的说就是在文件中负责剪切数据用的。cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段输出。<br> (1)基本语法<br> cut [选项参数] filename<br> 说明：默认分隔符是制表符<br> (2)选项参数</p> 
  </blockquote> 
  <table> 
   <thead> 
    <tr> 
     <th>选项参数</th> 
     <th>功能</th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <td>-f</td> 
     <td>列号，提取第几列</td> 
    </tr> 
    <tr> 
     <td>-d</td> 
     <td>分隔符，按照指定分隔符分割列</td> 
    </tr> 
    <tr> 
     <td>-c</td> 
     <td>指定具体的字符</td> 
    </tr> 
   </tbody> 
  </table>
  <blockquote> 
   <p>(3)案例实操<br> ①数据准备</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> cut.txt
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim cut.txt
dong shen
guan zhen
wo  wo
lai  lai
le  le
</code></pre> 
   <p>②切割cut.txt第一列</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">cut</span> -d <span class="token string">" "</span> -f 1 cut.txt 
dong
guan
wo
lai
le
</code></pre> 
   <p>③切割cut.txt第二、三列</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">cut</span> -d <span class="token string">" "</span> -f 2,3 cut.txt 
shen
zhen
	wo
	lai
	le
</code></pre> 
   <p>④在cut.txt文件中切割出guan</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">cat</span> cut.txt <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"guan"</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">" "</span> -f 1
guan
</code></pre> 
   <p>⑤选取系统PATH变量值，第2个“：”开始后的所有路径：</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$PATH</span>
/usr/lib64/qt-3.3/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/atguigu/bin
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$PATH</span> <span class="token operator">|</span> <span class="token function">cut</span> -d: -f 3-
/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/atguigu/bin
</code></pre> 
   <p>⑥切割ifconfig 后打印的IP地址</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">ifconfig</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"netmask"</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"t"</span> -f 2 
<span class="token operator">|</span><span class="token function">cut</span> -d <span class="token string">" "</span> -f 2
</code></pre> 
  </blockquote> 
  <p>2.sed</p> 
  <blockquote> 
   <p>sed是一种流编辑器，它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”，接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有改变，除非你使用重定向存储输出。<br> (1)基本语法<br> sed [选项参数] ‘command’ filename<br> (2)选项参数说明</p> 
  </blockquote> 
  <table> 
   <thead> 
    <tr> 
     <th>选项参数</th> 
     <th>功能</th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <td>-e</td> 
     <td>直接在指令列模式上进行sed的动作编辑。</td> 
    </tr> 
    <tr> 
     <td>-i</td> 
     <td>直接编辑文件</td> 
    </tr> 
   </tbody> 
  </table> 
  <table> 
   <thead> 
    <tr> 
     <th>命令</th> 
     <th>功能描述</th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <td>a</td> 
     <td>新增，a的后面可以接字串，在下一行出现</td> 
    </tr> 
    <tr> 
     <td>d</td> 
     <td>删除</td> 
    </tr> 
    <tr> 
     <td>s</td> 
     <td>查找并替换</td> 
    </tr> 
   </tbody> 
  </table>
  <blockquote> 
   <p>(3)案例实操<br> ①数据准备</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> sed.txt
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim sed.txt
dong shen
guan zhen
wo  wo
lai  lai

le  le
</code></pre> 
   <p>②将“mei nv”这个单词插入到sed.txt第二行下，打印。</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">sed</span> <span class="token string">'2a mei nv'</span> sed.txt 
dong shen
guan zhen
mei nv
wo  wo
lai  lai

le  le
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">cat</span> sed.txt 
dong shen
guan zhen
wo  wo
lai  lai

le  le
···
<span class="token comment">#注意：文件并没有改变</span>
③删除sed.txt文件所有包含wo的行
```bash
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">sed</span> <span class="token string">'/wo/d'</span> sed.txt
dong shen
guan zhen
lai  lai

le  le
</code></pre> 
   <p>④将sed.txt文件中wo替换为ni</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">sed</span> <span class="token string">'s/wo/ni/g'</span> sed.txt 
dong shen
guan zhen
ni  ni
lai  lai

le  le
</code></pre> 
   <p>⑤将sed.txt文件中的第二行删除并将wo替换为ni</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">sed</span> -e <span class="token string">'2d'</span> -e <span class="token string">'s/wo/ni/g'</span> sed.txt 
dong shen
ni  ni
lai  lai

le  le
</code></pre> 
  </blockquote> 
  <p>3.awk(重点)</p> 
  <blockquote> 
   <p>一个强大的文本分析工具，把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行分析处理。<br> (1)基本语法<br> awk [选项参数] ‘pattern1{action1} pattern2{action2}…’ filename<br> pattern：表示AWK在数据中查找的内容，就是匹配模式<br> action：在找到匹配内容时所执行的一系列命令<br> (2)选项说明</p> 
  </blockquote> 
  <table> 
   <thead> 
    <tr> 
     <th>选项参数</th> 
     <th>功能</th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <td>-F</td> 
     <td>指定输入文件折分隔符</td> 
    </tr> 
    <tr> 
     <td>-v</td> 
     <td>赋值一个用户定义变量</td> 
    </tr> 
   </tbody> 
  </table>
  <blockquote> 
   <p>(3)案例实操<br> ①数据准备</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">sudo</span> <span class="token function">cp</span> /etc/passwd ./
</code></pre> 
   <p>②搜索passwd文件以root关键字开头的所有行，并输出该行的第7列。</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">awk</span> -F: <span class="token string">'/^root/{print <span class="token variable">$7</span>}'</span> <span class="token function">passwd</span> 
/bin/bash
</code></pre> 
   <p>③搜索passwd文件以root关键字开头的所有行，并输出该行的第1列和第7列，中间以“，”号分割。</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">awk</span> -F: <span class="token string">'/^root/{print <span class="token variable">$1</span>","<span class="token variable">$7</span>}'</span> <span class="token function">passwd</span> 
root,/bin/bash
</code></pre> 
   <p>④只显示/etc/passwd的第一列和第七列，以逗号分割，且在所有行前面添加列名user，shell在最后一行添加"ltc，/bin/zuishuai"。</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">awk</span> -F <span class="token keyword">:</span> <span class="token string">'BEGIN{print "user, shell"} {print <span class="token variable">$1</span>","<span class="token variable">$7</span>} END{print "dahaige,/bin/zuishuai"}'</span> <span class="token function">passwd</span>
user, shell
root,/bin/bash
bin,/sbin/nologin
。。。
atguigu,/bin/bash
ltc,/bin/zuishuai
<span class="token comment">#注意:BEGIN 在所有数据读取行之前执行；END 在所有数据执行之后执行。</span>
</code></pre> 
   <p>⑤将passwd文件中的用户id增加数值1并输出</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">awk</span> -v i<span class="token operator">=</span>1 -F: <span class="token string">'{print <span class="token variable">$3</span>+i}'</span> <span class="token function">passwd</span>
1
2
3
4
</code></pre> 
   <p>(4)awk的内置变量</p> 
  </blockquote> 
  <table> 
   <thead> 
    <tr> 
     <th>变量</th> 
     <th>说明</th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <td>FILENAME</td> 
     <td>文件名</td> 
    </tr> 
    <tr> 
     <td>NR</td> 
     <td>已读的记录数</td> 
    </tr> 
    <tr> 
     <td>NF</td> 
     <td>浏览记录的域的个数（切割后，列的个数）</td> 
    </tr> 
   </tbody> 
  </table>
  <blockquote> 
   <p>(5)案例实操<br> ①统计passwd文件名，每行的行号，每行的列数</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">awk</span> -F: <span class="token string">'{print "filename:" FILENAME ", linenumber:" NR ",columns:" NF}'</span> <span class="token function">passwd</span> 
filename:passwd, linenumber:1,columns:7
filename:passwd, linenumber:2,columns:7
filename:passwd, linenumber:3,columns:7
</code></pre> 
   <p>②切割IP</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">ifconfig</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"netmask"</span> <span class="token operator">|</span> <span class="token function">awk</span> -F <span class="token string">"inet"</span> 
<span class="token string">'{print <span class="token variable">$2</span>}'</span> <span class="token operator">|</span> <span class="token function">awk</span> -F <span class="token string">" "</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span>
</code></pre> 
   <p>③查询sed.txt中空行所在的行号</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">awk</span> <span class="token string">'/^$/{print NR}'</span> sed.txt 
5
</code></pre> 
  </blockquote> 
  <p>4.sort</p> 
  <blockquote> 
   <p>(1)基本语法<br> sort(选项)(参数)</p> 
  </blockquote> 
  <blockquote> 
   <p>(2)选项参数说明</p> 
  </blockquote> 
  <table> 
   <thead> 
    <tr> 
     <th>选项</th> 
     <th>说明</th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <td>-n</td> 
     <td>依照数值的大小排序</td> 
    </tr> 
    <tr> 
     <td>-r</td> 
     <td>以相反的顺序来排序</td> 
    </tr> 
    <tr> 
     <td>-t</td> 
     <td>设置排序时所用的分隔字符</td> 
    </tr> 
    <tr> 
     <td>-k</td> 
     <td>指定需要排序的列</td> 
    </tr> 
   </tbody> 
  </table>
  <blockquote> 
   <p>(3)案例实操<br> ①数据准备</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> sort.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim sort.sh 
bb:40:5.4
bd:20:4.2
xz:50:2.3
cls:10:3.5
ss:30:1.6
</code></pre> 
   <p>②按照“：”分割后的第三列倒序排序。</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">sort</span> -t <span class="token keyword">:</span> -nrk 3  sort.sh 
bb:40:5.4
bd:20:4.2
cls:10:3.5
xz:50:2.3
ss:30:1.6
</code></pre> 
  </blockquote> 
  <p>5.wc</p> 
  <blockquote> 
   <p>(1)基本语法<br> wc [选项参数] filename</p> 
  </blockquote> 
  <blockquote> 
   <p>(2)选项参数</p> 
  </blockquote> 
  <table> 
   <thead> 
    <tr> 
     <th>选项参数</th> 
     <th>功能</th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <td>-l</td> 
     <td>统计文件行数</td> 
    </tr> 
    <tr> 
     <td>-w</td> 
     <td>统计文件的单词数</td> 
    </tr> 
    <tr> 
     <td>-m</td> 
     <td>统计文件的字符数</td> 
    </tr> 
    <tr> 
     <td>-c</td> 
     <td>统计文件的字节数</td> 
    </tr> 
   </tbody> 
  </table>
  <blockquote> 
   <p>(3)案例实操<br> 统计/etc/profile文件的行数、单词数、字节数！</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span><span class="token comment"># wc -w /etc/profile </span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span><span class="token comment"># wc -l /etc/profile </span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span><span class="token comment"># wc -m /etc/profile</span>
</code></pre> 
  </blockquote> 
  <h2><a id="10_811"></a>10、正则表达式</h2> 
  <blockquote> 
   <p>正则表达式我认为很重要，下次专门找个时间做🙂</p> 
  </blockquote> 
 </div> 
 <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e0530931f4.css" rel="stylesheet"> 
</div>, newsAttr=2, newsImage=https://profile.csdnimg.cn/B/7/4/3_qq_43182741, orderNum=null, isPublic=null, thumbs=10, visits=2, comments=null, collects=10, newsSource=https://blog.csdn.net/qq_43182741, newsSourceAuthor=爱学习的老冰棍, newsSourceTags=shell,大数据, status=null, delFlag=null, createBy=null, createTime=null, updateBy=null, updateTime=null, remark=null, beginTime=null, endTime=null, params={}, newsType=null)}
2020-09-03 15:19:25.600 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:50 -获取peNews--->>>null
2020-09-03 15:19:25.600 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:51 -获取entertainmentNews--->>>null
2020-09-03 15:19:25.600 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:52 -获取csdnNews--->>>LinqNews(newsId=null, userId=1, newsTypeId=18, newsTitle=大数据学习之Shell, newsContent=<div id="article_content" class="article_content clearfix"> 
 <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3d4dc5c1de.css"> 
 <div id="content_views" class="markdown_views prism-atom-one-light"> 
  <!-- flowchart 箭头图标 勿删 --> 
  <svg xmlns="http://www.w3.org/2000/svg" style="display: none;"> 
   <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path> 
  </svg> 
  <h2><a id="1Shell_0"></a>1、Shell概述</h2> 
  <blockquote> 
   <p>我们知道，一台机器是由硬件组装起来的，它还有操作系统，Windows、Linux、Mac等，我们在Linux里面介绍过，而我们今天讲的Shell就是在基于Linux内核的基础上，接收应用程序（用户命令），然后调用起来操作系统的内核来分配资源，进行指令的运行，我们可以参考下图理解</p> 
  </blockquote> 
  <div class="mermaid">
   <svg id="mermaid-svg-NoG3iJVR6vIUfyXn" width="761.3125610351562" xmlns="http://www.w3.org/2000/svg" height="106.078125" viewbox="0 0.000003814697265625 761.3125610351562 106.078125">
    <style>#mermaid-svg-NoG3iJVR6vIUfyXn .label{font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family);fill:#333;color:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .label text{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .node rect,#mermaid-svg-NoG3iJVR6vIUfyXn .node circle,#mermaid-svg-NoG3iJVR6vIUfyXn .node ellipse,#mermaid-svg-NoG3iJVR6vIUfyXn .node polygon,#mermaid-svg-NoG3iJVR6vIUfyXn .node path{fill:#ECECFF;stroke:#9370db;stroke-width:1px}#mermaid-svg-NoG3iJVR6vIUfyXn .node .label{text-align:center;fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .node.clickable{cursor:pointer}#mermaid-svg-NoG3iJVR6vIUfyXn .arrowheadPath{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .edgePath .path{stroke:#333;stroke-width:1.5px}#mermaid-svg-NoG3iJVR6vIUfyXn .flowchart-link{stroke:#333;fill:none}#mermaid-svg-NoG3iJVR6vIUfyXn .edgeLabel{background-color:#e8e8e8;text-align:center}#mermaid-svg-NoG3iJVR6vIUfyXn .edgeLabel rect{opacity:0.9}#mermaid-svg-NoG3iJVR6vIUfyXn .edgeLabel span{color:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .cluster rect{fill:#ffffde;stroke:#aa3;stroke-width:1px}#mermaid-svg-NoG3iJVR6vIUfyXn .cluster text{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family);font-size:12px;background:#ffffde;border:1px solid #aa3;border-radius:2px;pointer-events:none;z-index:100}#mermaid-svg-NoG3iJVR6vIUfyXn .actor{stroke:#ccf;fill:#ECECFF}#mermaid-svg-NoG3iJVR6vIUfyXn text.actor&gt;tspan{fill:#000;stroke:none}#mermaid-svg-NoG3iJVR6vIUfyXn .actor-line{stroke:grey}#mermaid-svg-NoG3iJVR6vIUfyXn .messageLine0{stroke-width:1.5;stroke-dasharray:none;stroke:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .messageLine1{stroke-width:1.5;stroke-dasharray:2, 2;stroke:#333}#mermaid-svg-NoG3iJVR6vIUfyXn #arrowhead path{fill:#333;stroke:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .sequenceNumber{fill:#fff}#mermaid-svg-NoG3iJVR6vIUfyXn #sequencenumber{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn #crosshead path{fill:#333;stroke:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .messageText{fill:#333;stroke:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .labelBox{stroke:#ccf;fill:#ECECFF}#mermaid-svg-NoG3iJVR6vIUfyXn .labelText,#mermaid-svg-NoG3iJVR6vIUfyXn .labelText&gt;tspan{fill:#000;stroke:none}#mermaid-svg-NoG3iJVR6vIUfyXn .loopText,#mermaid-svg-NoG3iJVR6vIUfyXn .loopText&gt;tspan{fill:#000;stroke:none}#mermaid-svg-NoG3iJVR6vIUfyXn .loopLine{stroke-width:2px;stroke-dasharray:2, 2;stroke:#ccf;fill:#ccf}#mermaid-svg-NoG3iJVR6vIUfyXn .note{stroke:#aa3;fill:#fff5ad}#mermaid-svg-NoG3iJVR6vIUfyXn .noteText,#mermaid-svg-NoG3iJVR6vIUfyXn .noteText&gt;tspan{fill:#000;stroke:none}#mermaid-svg-NoG3iJVR6vIUfyXn .activation0{fill:#f4f4f4;stroke:#666}#mermaid-svg-NoG3iJVR6vIUfyXn .activation1{fill:#f4f4f4;stroke:#666}#mermaid-svg-NoG3iJVR6vIUfyXn .activation2{fill:#f4f4f4;stroke:#666}#mermaid-svg-NoG3iJVR6vIUfyXn .mermaid-main-font{font-family:"trebuchet ms", verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn .section{stroke:none;opacity:0.2}#mermaid-svg-NoG3iJVR6vIUfyXn .section0{fill:rgba(102,102,255,0.49)}#mermaid-svg-NoG3iJVR6vIUfyXn .section2{fill:#fff400}#mermaid-svg-NoG3iJVR6vIUfyXn .section1,#mermaid-svg-NoG3iJVR6vIUfyXn .section3{fill:#fff;opacity:0.2}#mermaid-svg-NoG3iJVR6vIUfyXn .sectionTitle0{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .sectionTitle1{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .sectionTitle2{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .sectionTitle3{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .sectionTitle{text-anchor:start;font-size:11px;text-height:14px;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn .grid .tick{stroke:#d3d3d3;opacity:0.8;shape-rendering:crispEdges}#mermaid-svg-NoG3iJVR6vIUfyXn .grid .tick text{font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn .grid path{stroke-width:0}#mermaid-svg-NoG3iJVR6vIUfyXn .today{fill:none;stroke:red;stroke-width:2px}#mermaid-svg-NoG3iJVR6vIUfyXn .task{stroke-width:2}#mermaid-svg-NoG3iJVR6vIUfyXn .taskText{text-anchor:middle;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn .taskText:not([font-size]){font-size:11px}#mermaid-svg-NoG3iJVR6vIUfyXn .taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn .taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}#mermaid-svg-NoG3iJVR6vIUfyXn .task.clickable{cursor:pointer}#mermaid-svg-NoG3iJVR6vIUfyXn .taskText.clickable{cursor:pointer;fill:#003163 !important;font-weight:bold}#mermaid-svg-NoG3iJVR6vIUfyXn .taskTextOutsideLeft.clickable{cursor:pointer;fill:#003163 !important;font-weight:bold}#mermaid-svg-NoG3iJVR6vIUfyXn .taskTextOutsideRight.clickable{cursor:pointer;fill:#003163 !important;font-weight:bold}#mermaid-svg-NoG3iJVR6vIUfyXn .taskText0,#mermaid-svg-NoG3iJVR6vIUfyXn .taskText1,#mermaid-svg-NoG3iJVR6vIUfyXn .taskText2,#mermaid-svg-NoG3iJVR6vIUfyXn .taskText3{fill:#fff}#mermaid-svg-NoG3iJVR6vIUfyXn .task0,#mermaid-svg-NoG3iJVR6vIUfyXn .task1,#mermaid-svg-NoG3iJVR6vIUfyXn .task2,#mermaid-svg-NoG3iJVR6vIUfyXn .task3{fill:#8a90dd;stroke:#534fbc}#mermaid-svg-NoG3iJVR6vIUfyXn .taskTextOutside0,#mermaid-svg-NoG3iJVR6vIUfyXn .taskTextOutside2{fill:#000}#mermaid-svg-NoG3iJVR6vIUfyXn .taskTextOutside1,#mermaid-svg-NoG3iJVR6vIUfyXn .taskTextOutside3{fill:#000}#mermaid-svg-NoG3iJVR6vIUfyXn .active0,#mermaid-svg-NoG3iJVR6vIUfyXn .active1,#mermaid-svg-NoG3iJVR6vIUfyXn .active2,#mermaid-svg-NoG3iJVR6vIUfyXn .active3{fill:#bfc7ff;stroke:#534fbc}#mermaid-svg-NoG3iJVR6vIUfyXn .activeText0,#mermaid-svg-NoG3iJVR6vIUfyXn .activeText1,#mermaid-svg-NoG3iJVR6vIUfyXn .activeText2,#mermaid-svg-NoG3iJVR6vIUfyXn .activeText3{fill:#000 !important}#mermaid-svg-NoG3iJVR6vIUfyXn .done0,#mermaid-svg-NoG3iJVR6vIUfyXn .done1,#mermaid-svg-NoG3iJVR6vIUfyXn .done2,#mermaid-svg-NoG3iJVR6vIUfyXn .done3{stroke:grey;fill:#d3d3d3;stroke-width:2}#mermaid-svg-NoG3iJVR6vIUfyXn .doneText0,#mermaid-svg-NoG3iJVR6vIUfyXn .doneText1,#mermaid-svg-NoG3iJVR6vIUfyXn .doneText2,#mermaid-svg-NoG3iJVR6vIUfyXn .doneText3{fill:#000 !important}#mermaid-svg-NoG3iJVR6vIUfyXn .crit0,#mermaid-svg-NoG3iJVR6vIUfyXn .crit1,#mermaid-svg-NoG3iJVR6vIUfyXn .crit2,#mermaid-svg-NoG3iJVR6vIUfyXn .crit3{stroke:#f88;fill:red;stroke-width:2}#mermaid-svg-NoG3iJVR6vIUfyXn .activeCrit0,#mermaid-svg-NoG3iJVR6vIUfyXn .activeCrit1,#mermaid-svg-NoG3iJVR6vIUfyXn .activeCrit2,#mermaid-svg-NoG3iJVR6vIUfyXn .activeCrit3{stroke:#f88;fill:#bfc7ff;stroke-width:2}#mermaid-svg-NoG3iJVR6vIUfyXn .doneCrit0,#mermaid-svg-NoG3iJVR6vIUfyXn .doneCrit1,#mermaid-svg-NoG3iJVR6vIUfyXn .doneCrit2,#mermaid-svg-NoG3iJVR6vIUfyXn .doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}#mermaid-svg-NoG3iJVR6vIUfyXn .milestone{transform:rotate(45deg) scale(0.8, 0.8)}#mermaid-svg-NoG3iJVR6vIUfyXn .milestoneText{font-style:italic}#mermaid-svg-NoG3iJVR6vIUfyXn .doneCritText0,#mermaid-svg-NoG3iJVR6vIUfyXn .doneCritText1,#mermaid-svg-NoG3iJVR6vIUfyXn .doneCritText2,#mermaid-svg-NoG3iJVR6vIUfyXn .doneCritText3{fill:#000 !important}#mermaid-svg-NoG3iJVR6vIUfyXn .activeCritText0,#mermaid-svg-NoG3iJVR6vIUfyXn .activeCritText1,#mermaid-svg-NoG3iJVR6vIUfyXn .activeCritText2,#mermaid-svg-NoG3iJVR6vIUfyXn .activeCritText3{fill:#000 !important}#mermaid-svg-NoG3iJVR6vIUfyXn .titleText{text-anchor:middle;font-size:18px;fill:#000;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn g.classGroup text{fill:#9370db;stroke:none;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family);font-size:10px}#mermaid-svg-NoG3iJVR6vIUfyXn g.classGroup text .title{font-weight:bolder}#mermaid-svg-NoG3iJVR6vIUfyXn g.clickable{cursor:pointer}#mermaid-svg-NoG3iJVR6vIUfyXn g.classGroup rect{fill:#ECECFF;stroke:#9370db}#mermaid-svg-NoG3iJVR6vIUfyXn g.classGroup line{stroke:#9370db;stroke-width:1}#mermaid-svg-NoG3iJVR6vIUfyXn .classLabel .box{stroke:none;stroke-width:0;fill:#ECECFF;opacity:0.5}#mermaid-svg-NoG3iJVR6vIUfyXn .classLabel .label{fill:#9370db;font-size:10px}#mermaid-svg-NoG3iJVR6vIUfyXn .relation{stroke:#9370db;stroke-width:1;fill:none}#mermaid-svg-NoG3iJVR6vIUfyXn .dashed-line{stroke-dasharray:3}#mermaid-svg-NoG3iJVR6vIUfyXn #compositionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-svg-NoG3iJVR6vIUfyXn #compositionEnd{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-svg-NoG3iJVR6vIUfyXn #aggregationStart{fill:#ECECFF;stroke:#9370db;stroke-width:1}#mermaid-svg-NoG3iJVR6vIUfyXn #aggregationEnd{fill:#ECECFF;stroke:#9370db;stroke-width:1}#mermaid-svg-NoG3iJVR6vIUfyXn #dependencyStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-svg-NoG3iJVR6vIUfyXn #dependencyEnd{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-svg-NoG3iJVR6vIUfyXn #extensionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-svg-NoG3iJVR6vIUfyXn #extensionEnd{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-svg-NoG3iJVR6vIUfyXn .commit-id,#mermaid-svg-NoG3iJVR6vIUfyXn .commit-msg,#mermaid-svg-NoG3iJVR6vIUfyXn .branch-label{fill:lightgrey;color:lightgrey;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn .pieTitleText{text-anchor:middle;font-size:25px;fill:#000;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn .slice{font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn g.stateGroup text{fill:#9370db;stroke:none;font-size:10px;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn g.stateGroup text{fill:#9370db;fill:#333;stroke:none;font-size:10px}#mermaid-svg-NoG3iJVR6vIUfyXn g.statediagram-cluster .cluster-label text{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn g.stateGroup .state-title{font-weight:bolder;fill:#000}#mermaid-svg-NoG3iJVR6vIUfyXn g.stateGroup rect{fill:#ECECFF;stroke:#9370db}#mermaid-svg-NoG3iJVR6vIUfyXn g.stateGroup line{stroke:#9370db;stroke-width:1}#mermaid-svg-NoG3iJVR6vIUfyXn .transition{stroke:#9370db;stroke-width:1;fill:none}#mermaid-svg-NoG3iJVR6vIUfyXn .stateGroup .composit{fill:white;border-bottom:1px}#mermaid-svg-NoG3iJVR6vIUfyXn .stateGroup .alt-composit{fill:#e0e0e0;border-bottom:1px}#mermaid-svg-NoG3iJVR6vIUfyXn .state-note{stroke:#aa3;fill:#fff5ad}#mermaid-svg-NoG3iJVR6vIUfyXn .state-note text{fill:black;stroke:none;font-size:10px}#mermaid-svg-NoG3iJVR6vIUfyXn .stateLabel .box{stroke:none;stroke-width:0;fill:#ECECFF;opacity:0.7}#mermaid-svg-NoG3iJVR6vIUfyXn .edgeLabel text{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .stateLabel text{fill:#000;font-size:10px;font-weight:bold;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-NoG3iJVR6vIUfyXn .node circle.state-start{fill:black;stroke:black}#mermaid-svg-NoG3iJVR6vIUfyXn .node circle.state-end{fill:black;stroke:white;stroke-width:1.5}#mermaid-svg-NoG3iJVR6vIUfyXn #statediagram-barbEnd{fill:#9370db}#mermaid-svg-NoG3iJVR6vIUfyXn .statediagram-cluster rect{fill:#ECECFF;stroke:#9370db;stroke-width:1px}#mermaid-svg-NoG3iJVR6vIUfyXn .statediagram-cluster rect.outer{rx:5px;ry:5px}#mermaid-svg-NoG3iJVR6vIUfyXn .statediagram-state .divider{stroke:#9370db}#mermaid-svg-NoG3iJVR6vIUfyXn .statediagram-state .title-state{rx:5px;ry:5px}#mermaid-svg-NoG3iJVR6vIUfyXn .statediagram-cluster.statediagram-cluster .inner{fill:white}#mermaid-svg-NoG3iJVR6vIUfyXn .statediagram-cluster.statediagram-cluster-alt .inner{fill:#e0e0e0}#mermaid-svg-NoG3iJVR6vIUfyXn .statediagram-cluster .inner{rx:0;ry:0}#mermaid-svg-NoG3iJVR6vIUfyXn .statediagram-state rect.basic{rx:5px;ry:5px}#mermaid-svg-NoG3iJVR6vIUfyXn .statediagram-state rect.divider{stroke-dasharray:10,10;fill:#efefef}#mermaid-svg-NoG3iJVR6vIUfyXn .note-edge{stroke-dasharray:5}#mermaid-svg-NoG3iJVR6vIUfyXn .statediagram-note rect{fill:#fff5ad;stroke:#aa3;stroke-width:1px;rx:0;ry:0}:root{--mermaid-font-family: '"trebuchet ms", verdana, arial';--mermaid-font-family: "Comic Sans MS", "Comic Sans", cursive}#mermaid-svg-NoG3iJVR6vIUfyXn .error-icon{fill:#522}#mermaid-svg-NoG3iJVR6vIUfyXn .error-text{fill:#522;stroke:#522}#mermaid-svg-NoG3iJVR6vIUfyXn .edge-thickness-normal{stroke-width:2px}#mermaid-svg-NoG3iJVR6vIUfyXn .edge-thickness-thick{stroke-width:3.5px}#mermaid-svg-NoG3iJVR6vIUfyXn .edge-pattern-solid{stroke-dasharray:0}#mermaid-svg-NoG3iJVR6vIUfyXn .edge-pattern-dashed{stroke-dasharray:3}#mermaid-svg-NoG3iJVR6vIUfyXn .edge-pattern-dotted{stroke-dasharray:2}#mermaid-svg-NoG3iJVR6vIUfyXn .marker{fill:#333}#mermaid-svg-NoG3iJVR6vIUfyXn .marker.cross{stroke:#333}

:root { --mermaid-font-family: "trebuchet ms", verdana, arial;}</style>
    <style>#mermaid-svg-NoG3iJVR6vIUfyXn {
    color: rgba(0, 0, 0, 0.75);
    font: ;
  }</style>
    <g>
     <g class="output">
      <g class="clusters"></g>
      <g class="edgePaths">
       <g class="edgePath LS-A LE-B" id="L-A-B" style="opacity: 1;">
        <path class="path" d="M238.23435974121094,53.0390625L310.61717224121094,53.0390625L382.99998474121094,53.0390625" marker-end="url(#arrowhead5634)" style="fill:none"></path>
        <defs>
         <marker id="arrowhead5634" viewbox="0 0 10 10" refx="9" refy="5" markerunits="strokeWidth" markerwidth="8" markerheight="6" orient="auto">
          <path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path>
         </marker>
        </defs>
       </g>
       <g class="edgePath LS-B LE-D" style="opacity: 1;" id="L-B-D">
        <path class="path" d="M472.6259415661941,46.67305862537887L498.07810974121094,43.0390625L523.0781097412109,44.82328339447467" marker-end="url(#arrowhead5635)" style="fill:none"></path>
        <defs>
         <marker id="arrowhead5635" viewbox="0 0 10 10" refx="9" refy="5" markerunits="strokeWidth" markerwidth="8" markerheight="6" orient="auto">
          <path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path>
         </marker>
        </defs>
       </g>
       <g class="edgePath LS-D LE-B" style="opacity: 1;" id="L-D-B">
        <path class="path" d="M523.0781097412109,61.25484160552533L498.07810974121094,63.0390625L472.6259415661941,59.40506637462113" marker-end="url(#arrowhead5636)" style="fill:none"></path>
        <defs>
         <marker id="arrowhead5636" viewbox="0 0 10 10" refx="9" refy="5" markerunits="strokeWidth" markerwidth="8" markerheight="6" orient="auto">
          <path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path>
         </marker>
        </defs>
       </g>
      </g>
      <g class="edgeLabels">
       <g class="edgeLabel" transform="translate(310.61717224121094,53.0390625)" style="opacity: 1;">
        <g transform="translate(-47.3828125,-18.9765625)" class="label">
         <rect rx="0" ry="0" width="94.765625" height="37.953125" style="fill:#e8e8e8;"></rect>
         <foreignobject width="94.765625" height="37.9599609375">
          <div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">
           <span id="L-L-A-B" class="edgeLabel L-LS-A' L-LE-B">shell脚本</span>
          </div>
         </foreignobject>
        </g>
       </g>
       <g class="edgeLabel" style="opacity: 1;" transform="">
        <g transform="translate(0,0)" class="label">
         <rect rx="0" ry="0" width="0" height="0" style="fill:#e8e8e8;"></rect>
         <foreignobject width="0" height="0">
          <div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">
           <span id="L-L-B-D" class="edgeLabel L-LS-B' L-LE-D"></span>
          </div>
         </foreignobject>
        </g>
       </g>
       <g class="edgeLabel" style="opacity: 1;" transform="">
        <g transform="translate(0,0)" class="label">
         <rect rx="0" ry="0" width="0" height="0" style="fill:#e8e8e8;"></rect>
         <foreignobject width="0" height="0">
          <div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">
           <span id="L-L-D-B" class="edgeLabel L-LS-D' L-LE-B"></span>
          </div>
         </foreignobject>
        </g>
       </g>
      </g>
      <g class="nodes">
       <g class="node default" id="A" transform="translate(123.11717987060547,53.0390625)" style="opacity: 1;">
        <rect rx="0" ry="0" x="-115.1171875" y="-28.9765625" width="230.234375" height="57.953125" class="label-container"></rect>
        <g class="label" transform="translate(0,0)">
         <g transform="translate(-105.1171875,-18.9765625)">
          <foreignobject width="210.24000549316406" height="37.9599609375">
           <div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">
            应用程序或用户命令
           </div>
          </foreignobject>
         </g>
        </g>
       </g>
       <g class="node default" style="opacity: 1;" id="B" transform="translate(428.03904724121094,53.0390625)">
        <circle x="-45.0390625" y="-28.9765625" r="45.0390625" class="label-container"></circle>
        <g class="label" transform="translate(0,0)">
         <g transform="translate(-35.0390625,-18.9765625)">
          <foreignobject width="70.08000183105469" height="37.9599609375">
           <div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">
            服务器
           </div>
          </foreignobject>
         </g>
        </g>
       </g>
       <g class="node default" style="opacity: 1;" id="D" transform="translate(638.1952896118164,53.0390625)">
        <rect rx="0" ry="0" x="-115.1171875" y="-28.9765625" width="230.234375" height="57.953125" class="label-container"></rect>
        <g class="label" transform="translate(0,0)">
         <g transform="translate(-105.1171875,-18.9765625)">
          <foreignobject width="210.24000549316406" height="37.9599609375">
           <div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">
            分配资源及执行脚本
           </div>
          </foreignobject>
         </g>
        </g>
       </g>
      </g>
     </g>
    </g>
   </svg>
  </div> 
  <blockquote> 
   <p>Shell是一个功能相当大的编程语言，易编写、易调试、灵活性强。</p> 
  </blockquote> 
  <ul> 
   <li>Linux自身提供Shell解析器</li> 
  </ul> 
  <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> /etc/shells
/bin/sh
/bin/bash
</code></pre> 
  <ul> 
   <li>bash和sh的关系</li> 
  </ul> 
  <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 bin<span class="token punctuation">]</span>$ ll <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">bash</span>
rwxr-xr-x. 1 root root 941880 5月  11 2016 <span class="token function">bash</span>
lrwxrwxrwx. 1 root root      4 5月  27 2017 sh -<span class="token operator">&gt;</span> <span class="token function">bash</span>
</code></pre> 
  <p>可以看出来sh是bash的软连接</p> 
  <ul> 
   <li>Centos默认的解析器是bash</li> 
  </ul> 
  <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 bin<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$SHELL</span>
/bin/bash
</code></pre> 
  <h2><a id="2Shell_39"></a>2、Shell脚本入门</h2> 
  <ol> 
   <li>脚本格式</li> 
  </ol> 
  <blockquote> 
   <pre><code> 脚本以#!/bin/bash开头(指定的解析器)
</code></pre> 
  </blockquote> 
  <ol start="2"> 
   <li>第一个脚本Shell脚本：helloworld</li> 
  </ol> 
  <blockquote> 
   <p>先创建一个Shell脚本，并且切换到vim编辑模式下</p> 
  </blockquote> 
  <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> helloworld.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim helloworld.sh
</code></pre> 
  <blockquote> 
   <p>对Shell脚本进行编辑</p> 
  </blockquote> 
  <pre><code class="prism language-bash"><span class="token shebang important">#!/bin/bash</span>
<span class="token keyword">echo</span> <span class="token string">"helloworld"</span>
</code></pre> 
  <p>3.脚本常用执行方式</p> 
  <blockquote> 
   <p>①采用bash或sh+脚本的相对路径或绝对路径（不用赋予脚本+x权限）<br> sh+脚本的相对路径和绝对路径</p> 
  </blockquote> 
  <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ sh helloworld.sh 
Helloworld
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ sh /home/atguigu/datas/helloworld.sh 
helloworld
</code></pre> 
  <blockquote> 
   <p>bash+脚本的相对路径和绝对路径</p> 
  </blockquote> 
  <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">bash</span> helloworld.sh 
Helloworld
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">bash</span> /home/atguigu/datas/helloworld.sh 
Helloworld
</code></pre> 
  <blockquote> 
   <p>②采用输入脚本的绝对路径或相对路径执行脚本（必须具有可执行权限+x）</p> 
  </blockquote> 
  <blockquote> 
   <p>(a)首先要赋予helloworld.sh 脚本的+x权限</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 744 helloworld.sh
</code></pre> 
   <p>(b)执行脚本<br> 相对路径</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./helloworld.sh 
Helloworld
</code></pre> 
   <p>绝对路径</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ /home/atguigu/datas/helloworld.sh 
Helloworld
</code></pre> 
  </blockquote> 
  <blockquote> 
   <p>注意：第一种执行方法，本质是bash解析器帮你执行脚本，所以脚本本身不需要执行权限。第二种执行方法，本质是脚本需要自己执行，所以需要执行权限。</p> 
  </blockquote> 
  <blockquote> 
   <p>③在脚本的路径前加上“.”<br> （a）有以下脚本</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">cat</span> test1.sh 
<span class="token comment">#! /bin/bash</span>
A<span class="token operator">=</span><span class="token string">"hello"</span>
</code></pre> 
   <p>(b) 分别使用sh,bash,./ 和 . 的方式来执行，结果如下：</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">bash</span> test1.sh 
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$A</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ sh test1.sh 
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$A</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./test1.sh 
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$A</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">.</span> test1.sh 
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$A</span>
hello
</code></pre> 
  </blockquote> 
  <blockquote> 
   <p>以上三种方式的区别：<br> 前两种方式都是在当前shell中打开一个子shell来执行脚本内容，当脚本内容结束，则子shell关闭，回到父shell中。<br> 第三种，也就是使用在脚本路径前加.的方式，可以使脚本内容在当前shell里执行，而无需打开子shell！<br> 开子shell与不开子shell的区别就在于，环境变量的继承关系，如在子shell中设置的当前变量，父shell是不可见的。</p> 
  </blockquote> 
  <h2><a id="3_116"></a>3、变量</h2> 
  <p>1.常用系统变量</p> 
  <blockquote> 
   <p>常用的系统变量</p> 
   <pre><code class="prism language-bash"><span class="token variable">$HOME</span>、<span class="token variable">$PWD</span>、<span class="token variable">$SHELL</span>、<span class="token variable">$USER</span>等
</code></pre> 
  </blockquote> 
  <p>2.自定义变量</p> 
  <blockquote> 
   <p>①基本语法<br> （a）定义变量：变量=值<br> （b）撤销变量：unset变量<br> （c）声明静态变量：readonly变量，注意：不能unset<br> ②变量定义规则<br> （a）变量名称可以由字母、数字和下划线组成，但是不能以数字开头，环境变量名建议大写。<br> （b）等号两侧不能有空格<br> （c）在bash中，变量默认类型都是字符串类型，无法直接进行数值运算。<br> （d）变量的值如果有空格，需要使用双引号或单引号括起来。<br> ③案例实操<br> 定义变量A</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ A<span class="token operator">=</span>5
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$A</span>
5
</code></pre> 
   <p>给变量A重新赋值</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ A<span class="token operator">=</span>8
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$A</span>
8
</code></pre> 
   <p>撤销变量A</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ unset A
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$A</span>
</code></pre> 
   <p>声明静态的变量B=2，不能unset</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">readonly</span> B<span class="token operator">=</span>2
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$B</span>
2
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ B<span class="token operator">=</span>9
-bash: B: <span class="token function">readonly</span> variable
</code></pre> 
   <p>在bash中，变量默认类型都是字符串类型，无法直接进行数值运算</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 ~<span class="token punctuation">]</span>$ C<span class="token operator">=</span>1+2
<span class="token punctuation">[</span>root@hadoop101 ~<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$C</span>
1+2
</code></pre> 
   <p>变量的值如果有空格，需要使用双引号或单引号括起来</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 ~<span class="token punctuation">]</span>$ D<span class="token operator">=</span>I love banzhang
-bash: world: <span class="token function">command</span> not found
<span class="token punctuation">[</span>root@hadoop101 ~<span class="token punctuation">]</span>$ D<span class="token operator">=</span><span class="token string">"I love banzhang"</span>
<span class="token punctuation">[</span>root@hadoop101 ~<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$D</span>
I love banzhang
</code></pre> 
   <p>可把变量提升为全局环境变量，可供其他Shell程序使用<br> export 变量名</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim helloworld.sh 
</code></pre> 
   <p>在helloworld文件中增加echo$B</p> 
   <pre><code class="prism language-bash"><span class="token shebang important">#!/bin/bash</span>
<span class="token keyword">echo</span> <span class="token string">"helloworld"</span>
<span class="token keyword">echo</span> <span class="token variable">$B</span>
</code></pre> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./helloworld.sh 
Helloworld
</code></pre> 
   <p>发现并没有打印输出变量B的值。</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">export</span> B
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./helloworld.sh 
helloworld
2
</code></pre> 
  </blockquote> 
  <p>3.特殊变量</p> 
  <blockquote> 
   <p>(1)$n<br> ①基本语法<br> $n （功能描述：n为数字，$0代表该脚本名称，$1-<span class="katex--inline"><span class="katex"><span class="katex-mathml">
       <math>
        <semantics>
         <mrow>
          <mn>
           9
          </mn>
          <mi mathvariant="normal">
           代
          </mi>
          <mi mathvariant="normal">
           表
          </mi>
          <mi mathvariant="normal">
           第
          </mi>
          <mi mathvariant="normal">
           一
          </mi>
          <mi mathvariant="normal">
           到
          </mi>
          <mi mathvariant="normal">
           第
          </mi>
          <mi mathvariant="normal">
           九
          </mi>
          <mi mathvariant="normal">
           个
          </mi>
          <mi mathvariant="normal">
           参
          </mi>
          <mi mathvariant="normal">
           数
          </mi>
          <mi mathvariant="normal">
           ，
          </mi>
          <mi mathvariant="normal">
           十
          </mi>
          <mi mathvariant="normal">
           以
          </mi>
          <mi mathvariant="normal">
           上
          </mi>
          <mi mathvariant="normal">
           的
          </mi>
          <mi mathvariant="normal">
           参
          </mi>
          <mi mathvariant="normal">
           数
          </mi>
          <mi mathvariant="normal">
           ，
          </mi>
          <mi mathvariant="normal">
           十
          </mi>
          <mi mathvariant="normal">
           以
          </mi>
          <mi mathvariant="normal">
           上
          </mi>
          <mi mathvariant="normal">
           的
          </mi>
          <mi mathvariant="normal">
           参
          </mi>
          <mi mathvariant="normal">
           数
          </mi>
          <mi mathvariant="normal">
           需
          </mi>
          <mi mathvariant="normal">
           要
          </mi>
          <mi mathvariant="normal">
           用
          </mi>
          <mi mathvariant="normal">
           大
          </mi>
          <mi mathvariant="normal">
           括
          </mi>
          <mi mathvariant="normal">
           号
          </mi>
          <mi mathvariant="normal">
           包
          </mi>
          <mi mathvariant="normal">
           含
          </mi>
          <mi mathvariant="normal">
           ，
          </mi>
          <mi mathvariant="normal">
           如
          </mi>
         </mrow>
         <annotation encoding="application/x-tex">
          9代表第一到第九个参数，十以上的参数，十以上的参数需要用大括号包含，如
         </annotation>
        </semantics>
       </math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.64444em; vertical-align: 0em;"></span><span class="mord">9</span><span class="mord cjk_fallback">代</span><span class="mord cjk_fallback">表</span><span class="mord cjk_fallback">第</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">到</span><span class="mord cjk_fallback">第</span><span class="mord cjk_fallback">九</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">参</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">十</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">上</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">参</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">十</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">上</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">参</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">需</span><span class="mord cjk_fallback">要</span><span class="mord cjk_fallback">用</span><span class="mord cjk_fallback">大</span><span class="mord cjk_fallback">括</span><span class="mord cjk_fallback">号</span><span class="mord cjk_fallback">包</span><span class="mord cjk_fallback">含</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">如</span></span></span></span></span>{10}）<br> ②案例实操</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> parameter.sh 
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim parameter.sh
<span class="token comment">#!/bin/bash</span>
<span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$0</span> <span class="token variable">$1</span> <span class="token variable">$2</span>"</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 777 parameter.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./parameter.sh cls  xz
./parameter.sh  cls   xz
</code></pre> 
   <p>(2) $#<br> ①基本语法<br> $# （功能描述：获取所有输入参数个数，常用于循环）。<br> ②案例实操</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim parameter.sh
<span class="token comment">#!/bin/bash</span>
<span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$0</span> <span class="token variable">$1</span> <span class="token variable">$2</span>"</span>
<span class="token keyword">echo</span> $<span class="token comment">#</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 777 parameter.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./parameter.sh cls  xz
parameter.sh cls xz 
2
</code></pre> 
   <p>(3)</p> 
   <pre><code class="prism language-bash"><span class="token variable">$*</span>、<span class="token variable">$@</span>
</code></pre> 
   <p>①基本语法</p> 
   <pre><code class="prism language-bash"><span class="token variable">$*</span>	（功能描述：这个变量代表命令行中所有的参数，<span class="token variable">$*</span>把所有的参数看成一个整体）
<span class="token variable">$@</span>	（功能描述：这个变量也代表命令行中所有的参数，不过<span class="token variable">$@</span>把每个参数区分对待）
</code></pre> 
   <p>②案例实操</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim parameter.sh
<span class="token comment">#!/bin/bash</span>
<span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$0</span> <span class="token variable">$1</span> <span class="token variable">$2</span>"</span>
<span class="token keyword">echo</span> $<span class="token comment">#</span>
<span class="token keyword">echo</span> <span class="token variable">$*</span>
<span class="token keyword">echo</span> <span class="token variable">$@</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">bash</span> parameter.sh 1 2 3
parameter.sh  1   2
3
1 2 3
1 2 3
</code></pre> 
   <p>(4) $？<br> ①基本语法<br> $？ （功能描述：最后一次执行的命令的返回状态。如果这个变量的值为0，证明上一个命令正确执行；如果这个变量的值为非0（具体是哪个数，由命令自己来决定），则证明上一个命令执行不正确了。）<br> ②案例实操</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./helloworld.sh 
hello world
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$?</span>
0
</code></pre> 
  </blockquote> 
  <h2><a id="4_256"></a>4、运算符</h2> 
  <blockquote> 
   <p>(1)基本语法<br> $((运算式))或<br> $[运算式]<br> (2)案例实操</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span><span class="token comment"># S=$[(2+3)*4]</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span><span class="token comment"># echo $S</span>
</code></pre> 
  </blockquote> 
  <h2><a id="5_265"></a>5、条件判断</h2> 
  <blockquote> 
   <p>(1)基本语法<br> ①test condition<br> ②[ condition ]（注意condition前后要有空格）<br> (2)常用判断条件<br> ①两个整数之间比较<br> -lt 小于 -le 小于等于<br> -eq 等于 -gt 大于<br> -ge 大于等于） -ne 不等于<br> ②按照文件权限进行判断<br> -r 有读的权限（read） -w 有写的权限（write）<br> -x 有执行的权限（execute）<br> ③按照文件类型进行判断<br> -f 文件存在并且是一个常规的文件（file）<br> -e 文件存在（existence） -d 文件存在并是一个目录（directory）<br> (3)案例实操<br> ①23是否大于等于22</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token punctuation">[</span> 23 -ge 22 <span class="token punctuation">]</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$?</span>
0
</code></pre> 
   <p>②helloworld.sh是否具有写权限</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token punctuation">[</span> -w helloworld.sh <span class="token punctuation">]</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$?</span>
0
</code></pre> 
   <p>③/home/atguigu/cls.txt目录中的文件是否存在</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token punctuation">[</span> -e /home/atguigu/cls.txt <span class="token punctuation">]</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$?</span>
1
</code></pre> 
   <p>④多条件判断（&amp;&amp; 表示前一条命令执行成功时，才执行后一条命令，|| 表示上一条命令执行失败后，才执行下一条命令）</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 ~<span class="token punctuation">]</span>$ <span class="token punctuation">[</span> condition <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">echo</span> OK <span class="token operator">||</span> <span class="token keyword">echo</span> notok
OK
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token punctuation">[</span> condition <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token keyword">echo</span> notok
notok
</code></pre> 
  </blockquote> 
  <h2><a id="6_307"></a>6、流程控制</h2> 
  <p>1.if判断</p> 
  <blockquote> 
   <p>(1)基本语法<br> （1）单分支<br> if [ 条件判断式 ];then<br> 程序<br> fi<br> 或者<br> if [ 条件判断式 ]<br> then<br> 程序<br> fi<br> （2）多分支<br> if [ 条件判断式 ]<br> then<br> 程序<br> elif [ 条件判断式 ]<br> then<br> 程序<br> else<br> 程序<br> fi</p> 
  </blockquote> 
  <blockquote> 
   <p>注意事项：<br> （1）[ 条件判断式 ]，中括号和条件判断式之间必须有空格<br> （2）if后要有空格</p> 
  </blockquote> 
  <blockquote> 
   <p>(2)实例实操<br> 输入一个数字，如果是1，则输出banzhang zhen shuai，如果是2，则输出cls zhen mei，如果是其它，什么也不输出。</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> if.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim if.sh
<span class="token comment">#!/bin/bash</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$1</span> -eq <span class="token string">"1"</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
      <span class="token keyword">echo</span> <span class="token string">"banzhang zhen shuai"</span>
<span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$1</span> -eq <span class="token string">"2"</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
      <span class="token keyword">echo</span> <span class="token string">"cls zhen mei"</span>
<span class="token keyword">fi</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 777 if.sh 
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./if.sh 1
banzhang zhen shuai
</code></pre> 
  </blockquote> 
  <p>2.case</p> 
  <blockquote> 
   <p>(1)基本语法<br> case $变量名 in<br> “值1”）<br> 如果变量的值等于值1，则执行程序1<br> ;;<br> “值2”）<br> 如果变量的值等于值2，则执行程序2<br> ;;<br> …省略其他分支…<br> *）<br> 如果变量的值都不是以上的值，则执行此程序<br> ;;<br> esac</p> 
  </blockquote> 
  <blockquote> 
   <p>注意事项：<br> （1）case行尾必须为单词“in”，每一个模式匹配必须以右括号“）”结束。<br> （2）双分号“;;”表示命令序列结束，相当于java中的break。<br> （3）最后的“*）”表示默认模式，相当于java中的default。</p> 
  </blockquote> 
  <blockquote> 
   <p>(2)案例实操<br> 输入一个数字，如果是1，则输出banzhang，如果是2，则输出cls，如果是其它，输出songsong。</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> case.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim case.sh
<span class="token operator">!</span>/bin/bash
<span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span>
<span class="token string">"1"</span><span class="token punctuation">)</span>
      <span class="token keyword">echo</span> <span class="token string">"banzhang"</span>
<span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token string">"2"</span><span class="token punctuation">)</span>
      <span class="token keyword">echo</span> <span class="token string">"cls"</span>
<span class="token punctuation">;</span><span class="token punctuation">;</span>
*<span class="token punctuation">)</span>
      <span class="token keyword">echo</span> <span class="token string">"songsong"</span>
<span class="token punctuation">;</span><span class="token punctuation">;</span>
esac
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 777 case.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./case.sh 1
1
</code></pre> 
  </blockquote> 
  <p>3.for循环</p> 
  <blockquote> 
   <p>(1)基本语法<br> for (( 初始值;循环控制条件;变量变化 ))<br> do<br> 程序<br> done<br> 或者<br> for 变量 in 值1 值2 值3…<br> do<br> 程序<br> done<br> (2)案例实操 从1加到100</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> for1.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim for1.sh
<span class="token comment">#!/bin/bash</span>
s<span class="token operator">=</span>0
<span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span>
<span class="token keyword">do</span>
      s<span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$s</span>+<span class="token variable">$i</span><span class="token punctuation">]</span>
<span class="token keyword">done</span>
<span class="token keyword">echo</span> <span class="token variable">$s</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 777 for1.sh 
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./for1.sh 
“5050”
</code></pre> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> for2.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim for2.sh
<span class="token comment">#!/bin/bash</span>
<span class="token comment">#打印数字</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable">$*</span>
  <span class="token keyword">do</span>
   <span class="token keyword">echo</span> <span class="token string">"ban zhang love <span class="token variable">$i</span> "</span>
<span class="token keyword">done</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 777 for2.sh 
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">bash</span> for2.sh cls xz bd
ban zhang love cls
ban zhang love xz
ban zhang love bd
</code></pre> 
   <p>(3)</p> 
   <pre><code class="prism language-bash"><span class="token comment">#比较比较“$*”和“$@”区别</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim for.sh
<span class="token comment">#!/bin/bash </span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$*</span>"</span> 
<span class="token comment">#$*中的所有参数看成是一个整体，所以这个for循环只会循环一次 </span>
      <span class="token keyword">do</span> 
             <span class="token keyword">echo</span> <span class="token string">"ban zhang love <span class="token variable">$i</span>"</span>
    <span class="token keyword">done</span> 
<span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$@</span>"</span> 
<span class="token comment">#$@中的每个参数都看成是独立的，所以“$@”中有几个参数，就会循环几次 </span>
      <span class="token keyword">do</span> 
             <span class="token keyword">echo</span> <span class="token string">"ban zhang love <span class="token variable">$j</span>"</span> 
<span class="token keyword">done</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 777 for.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">bash</span> for.sh cls xz bd
ban zhang love cls xz bd
ban zhang love cls
ban zhang love xz
ban zhang love bd
</code></pre> 
  </blockquote> 
  <p>4.while循环</p> 
  <blockquote> 
   <p>(1)基本语法<br> while [ 条件判断式 ]<br> do<br> 程序<br> done<br> (2)案例实操<br> 从1加到100</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> while.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim while.sh
<span class="token comment">#!/bin/bash</span>
s<span class="token operator">=</span>0
i<span class="token operator">=</span>1
<span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token variable">$i</span> -le 100 <span class="token punctuation">]</span>
<span class="token keyword">do</span>
      s<span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$s</span>+<span class="token variable">$i</span><span class="token punctuation">]</span>
     i<span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$i</span>+1<span class="token punctuation">]</span>
<span class="token keyword">done</span>
<span class="token keyword">echo</span> <span class="token variable">$s</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 777 while.sh 
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./while.sh 
5050
</code></pre> 
  </blockquote> 
  <h2><a id="7_479"></a>7、读取控制台输出</h2> 
  <blockquote> 
   <p>(1)基本语法<br> read(选项)(参数)<br> 选项：<br> -p：指定读取值时的提示符；<br> -t：指定读取值时等待的时间（秒）。<br> 参数<br> 变量：指定读取值的变量名<br> (2)案例实操<br> 提示7秒内，读取控制台输入的名称</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> read.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim read.sh
<span class="token comment">#!/bin/bash</span>
<span class="token function">read</span> -t 7 -p <span class="token string">"Enter your name in 7 seconds "</span> NAME
<span class="token keyword">echo</span> <span class="token variable">$NAME</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./read.sh 
Enter your name <span class="token keyword">in</span> 7 seconds xiaoze
xiaoze
</code></pre> 
  </blockquote> 
  <h2><a id="8_499"></a>8、函数</h2> 
  <p>1.系统函数</p> 
  <blockquote> 
   <p>(1)basename<br> ①基本语法<br> basename [string / pathname] [suffix] （功能描述：basename命令会删掉所有的前缀包括最后一个（‘/’）字符，然后将字符串显示出来。<br> ②案例实操<br> 截取该/home/atguigu/banzhang.txt路径的文件名称</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">basename</span> /home/atguigu/banzhang.txt 
banzhang.txt
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">basename</span> /home/atguigu/banzhang.txt .txt
banzhang
</code></pre> 
   <p>(2)dirname<br> ①基本语法<br> dirname 文件绝对路径 （功能描述：从给定的包含绝对路径的文件名中去除文件名（非目录的部分），然后返回剩下的路径（目录的部分））<br> ②案例实操<br> 获取banzhang.txt文件的路径</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 ~<span class="token punctuation">]</span>$ <span class="token function">dirname</span> /home/atguigu/banzhang.txt 
/home/atguigu
</code></pre> 
  </blockquote> 
  <p>2.自定义函数</p> 
  <blockquote> 
   <p>(1)基本语法<br> [ function ] funname[()]<br> {<br> Action;<br> [return int;]<br> }<br> funname<br> (2)案例实操</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> fun.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim fun.sh
<span class="token comment">#!/bin/bash</span>
<span class="token keyword">function</span> sum<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
s<span class="token operator">=</span>0
 s<span class="token operator">=</span>$<span class="token punctuation">[</span> <span class="token variable">$1</span> + <span class="token variable">$2</span> <span class="token punctuation">]</span>
  <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$s</span>"</span>
<span class="token punctuation">}</span>
<span class="token function">read</span> -p <span class="token string">"Please input the number1: "</span> n1<span class="token punctuation">;</span>
<span class="token function">read</span> -p <span class="token string">"Please input the number2: "</span> n2<span class="token punctuation">;</span>
<span class="token function">sum</span> <span class="token variable">$n1</span> <span class="token variable">$n2</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 777 fun.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ ./fun.sh 
Please input the number1: 2
Please input the number2: 5
7
</code></pre> 
  </blockquote> 
  <h2><a id="9Shell_549"></a>9、Shell工具</h2> 
  <p>1.cut</p> 
  <blockquote> 
   <p>cut的工作就是“剪”，具体的说就是在文件中负责剪切数据用的。cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段输出。<br> (1)基本语法<br> cut [选项参数] filename<br> 说明：默认分隔符是制表符<br> (2)选项参数</p> 
  </blockquote> 
  <table> 
   <thead> 
    <tr> 
     <th>选项参数</th> 
     <th>功能</th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <td>-f</td> 
     <td>列号，提取第几列</td> 
    </tr> 
    <tr> 
     <td>-d</td> 
     <td>分隔符，按照指定分隔符分割列</td> 
    </tr> 
    <tr> 
     <td>-c</td> 
     <td>指定具体的字符</td> 
    </tr> 
   </tbody> 
  </table>
  <blockquote> 
   <p>(3)案例实操<br> ①数据准备</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> cut.txt
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim cut.txt
dong shen
guan zhen
wo  wo
lai  lai
le  le
</code></pre> 
   <p>②切割cut.txt第一列</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">cut</span> -d <span class="token string">" "</span> -f 1 cut.txt 
dong
guan
wo
lai
le
</code></pre> 
   <p>③切割cut.txt第二、三列</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">cut</span> -d <span class="token string">" "</span> -f 2,3 cut.txt 
shen
zhen
	wo
	lai
	le
</code></pre> 
   <p>④在cut.txt文件中切割出guan</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">cat</span> cut.txt <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"guan"</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">" "</span> -f 1
guan
</code></pre> 
   <p>⑤选取系统PATH变量值，第2个“：”开始后的所有路径：</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$PATH</span>
/usr/lib64/qt-3.3/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/atguigu/bin
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$PATH</span> <span class="token operator">|</span> <span class="token function">cut</span> -d: -f 3-
/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/atguigu/bin
</code></pre> 
   <p>⑥切割ifconfig 后打印的IP地址</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">ifconfig</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"netmask"</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"t"</span> -f 2 
<span class="token operator">|</span><span class="token function">cut</span> -d <span class="token string">" "</span> -f 2
</code></pre> 
  </blockquote> 
  <p>2.sed</p> 
  <blockquote> 
   <p>sed是一种流编辑器，它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”，接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有改变，除非你使用重定向存储输出。<br> (1)基本语法<br> sed [选项参数] ‘command’ filename<br> (2)选项参数说明</p> 
  </blockquote> 
  <table> 
   <thead> 
    <tr> 
     <th>选项参数</th> 
     <th>功能</th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <td>-e</td> 
     <td>直接在指令列模式上进行sed的动作编辑。</td> 
    </tr> 
    <tr> 
     <td>-i</td> 
     <td>直接编辑文件</td> 
    </tr> 
   </tbody> 
  </table> 
  <table> 
   <thead> 
    <tr> 
     <th>命令</th> 
     <th>功能描述</th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <td>a</td> 
     <td>新增，a的后面可以接字串，在下一行出现</td> 
    </tr> 
    <tr> 
     <td>d</td> 
     <td>删除</td> 
    </tr> 
    <tr> 
     <td>s</td> 
     <td>查找并替换</td> 
    </tr> 
   </tbody> 
  </table>
  <blockquote> 
   <p>(3)案例实操<br> ①数据准备</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> sed.txt
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim sed.txt
dong shen
guan zhen
wo  wo
lai  lai

le  le
</code></pre> 
   <p>②将“mei nv”这个单词插入到sed.txt第二行下，打印。</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">sed</span> <span class="token string">'2a mei nv'</span> sed.txt 
dong shen
guan zhen
mei nv
wo  wo
lai  lai

le  le
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">cat</span> sed.txt 
dong shen
guan zhen
wo  wo
lai  lai

le  le
···
<span class="token comment">#注意：文件并没有改变</span>
③删除sed.txt文件所有包含wo的行
```bash
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">sed</span> <span class="token string">'/wo/d'</span> sed.txt
dong shen
guan zhen
lai  lai

le  le
</code></pre> 
   <p>④将sed.txt文件中wo替换为ni</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">sed</span> <span class="token string">'s/wo/ni/g'</span> sed.txt 
dong shen
guan zhen
ni  ni
lai  lai

le  le
</code></pre> 
   <p>⑤将sed.txt文件中的第二行删除并将wo替换为ni</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">sed</span> -e <span class="token string">'2d'</span> -e <span class="token string">'s/wo/ni/g'</span> sed.txt 
dong shen
ni  ni
lai  lai

le  le
</code></pre> 
  </blockquote> 
  <p>3.awk(重点)</p> 
  <blockquote> 
   <p>一个强大的文本分析工具，把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行分析处理。<br> (1)基本语法<br> awk [选项参数] ‘pattern1{action1} pattern2{action2}…’ filename<br> pattern：表示AWK在数据中查找的内容，就是匹配模式<br> action：在找到匹配内容时所执行的一系列命令<br> (2)选项说明</p> 
  </blockquote> 
  <table> 
   <thead> 
    <tr> 
     <th>选项参数</th> 
     <th>功能</th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <td>-F</td> 
     <td>指定输入文件折分隔符</td> 
    </tr> 
    <tr> 
     <td>-v</td> 
     <td>赋值一个用户定义变量</td> 
    </tr> 
   </tbody> 
  </table>
  <blockquote> 
   <p>(3)案例实操<br> ①数据准备</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">sudo</span> <span class="token function">cp</span> /etc/passwd ./
</code></pre> 
   <p>②搜索passwd文件以root关键字开头的所有行，并输出该行的第7列。</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">awk</span> -F: <span class="token string">'/^root/{print <span class="token variable">$7</span>}'</span> <span class="token function">passwd</span> 
/bin/bash
</code></pre> 
   <p>③搜索passwd文件以root关键字开头的所有行，并输出该行的第1列和第7列，中间以“，”号分割。</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">awk</span> -F: <span class="token string">'/^root/{print <span class="token variable">$1</span>","<span class="token variable">$7</span>}'</span> <span class="token function">passwd</span> 
root,/bin/bash
</code></pre> 
   <p>④只显示/etc/passwd的第一列和第七列，以逗号分割，且在所有行前面添加列名user，shell在最后一行添加"ltc，/bin/zuishuai"。</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">awk</span> -F <span class="token keyword">:</span> <span class="token string">'BEGIN{print "user, shell"} {print <span class="token variable">$1</span>","<span class="token variable">$7</span>} END{print "dahaige,/bin/zuishuai"}'</span> <span class="token function">passwd</span>
user, shell
root,/bin/bash
bin,/sbin/nologin
。。。
atguigu,/bin/bash
ltc,/bin/zuishuai
<span class="token comment">#注意:BEGIN 在所有数据读取行之前执行；END 在所有数据执行之后执行。</span>
</code></pre> 
   <p>⑤将passwd文件中的用户id增加数值1并输出</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">awk</span> -v i<span class="token operator">=</span>1 -F: <span class="token string">'{print <span class="token variable">$3</span>+i}'</span> <span class="token function">passwd</span>
1
2
3
4
</code></pre> 
   <p>(4)awk的内置变量</p> 
  </blockquote> 
  <table> 
   <thead> 
    <tr> 
     <th>变量</th> 
     <th>说明</th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <td>FILENAME</td> 
     <td>文件名</td> 
    </tr> 
    <tr> 
     <td>NR</td> 
     <td>已读的记录数</td> 
    </tr> 
    <tr> 
     <td>NF</td> 
     <td>浏览记录的域的个数（切割后，列的个数）</td> 
    </tr> 
   </tbody> 
  </table>
  <blockquote> 
   <p>(5)案例实操<br> ①统计passwd文件名，每行的行号，每行的列数</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">awk</span> -F: <span class="token string">'{print "filename:" FILENAME ", linenumber:" NR ",columns:" NF}'</span> <span class="token function">passwd</span> 
filename:passwd, linenumber:1,columns:7
filename:passwd, linenumber:2,columns:7
filename:passwd, linenumber:3,columns:7
</code></pre> 
   <p>②切割IP</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">ifconfig</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"netmask"</span> <span class="token operator">|</span> <span class="token function">awk</span> -F <span class="token string">"inet"</span> 
<span class="token string">'{print <span class="token variable">$2</span>}'</span> <span class="token operator">|</span> <span class="token function">awk</span> -F <span class="token string">" "</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span>
</code></pre> 
   <p>③查询sed.txt中空行所在的行号</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">awk</span> <span class="token string">'/^$/{print NR}'</span> sed.txt 
5
</code></pre> 
  </blockquote> 
  <p>4.sort</p> 
  <blockquote> 
   <p>(1)基本语法<br> sort(选项)(参数)</p> 
  </blockquote> 
  <blockquote> 
   <p>(2)选项参数说明</p> 
  </blockquote> 
  <table> 
   <thead> 
    <tr> 
     <th>选项</th> 
     <th>说明</th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <td>-n</td> 
     <td>依照数值的大小排序</td> 
    </tr> 
    <tr> 
     <td>-r</td> 
     <td>以相反的顺序来排序</td> 
    </tr> 
    <tr> 
     <td>-t</td> 
     <td>设置排序时所用的分隔字符</td> 
    </tr> 
    <tr> 
     <td>-k</td> 
     <td>指定需要排序的列</td> 
    </tr> 
   </tbody> 
  </table>
  <blockquote> 
   <p>(3)案例实操<br> ①数据准备</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">touch</span> sort.sh
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ vim sort.sh 
bb:40:5.4
bd:20:4.2
xz:50:2.3
cls:10:3.5
ss:30:1.6
</code></pre> 
   <p>②按照“：”分割后的第三列倒序排序。</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span>$ <span class="token function">sort</span> -t <span class="token keyword">:</span> -nrk 3  sort.sh 
bb:40:5.4
bd:20:4.2
cls:10:3.5
xz:50:2.3
ss:30:1.6
</code></pre> 
  </blockquote> 
  <p>5.wc</p> 
  <blockquote> 
   <p>(1)基本语法<br> wc [选项参数] filename</p> 
  </blockquote> 
  <blockquote> 
   <p>(2)选项参数</p> 
  </blockquote> 
  <table> 
   <thead> 
    <tr> 
     <th>选项参数</th> 
     <th>功能</th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <td>-l</td> 
     <td>统计文件行数</td> 
    </tr> 
    <tr> 
     <td>-w</td> 
     <td>统计文件的单词数</td> 
    </tr> 
    <tr> 
     <td>-m</td> 
     <td>统计文件的字符数</td> 
    </tr> 
    <tr> 
     <td>-c</td> 
     <td>统计文件的字节数</td> 
    </tr> 
   </tbody> 
  </table>
  <blockquote> 
   <p>(3)案例实操<br> 统计/etc/profile文件的行数、单词数、字节数！</p> 
   <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span><span class="token comment"># wc -w /etc/profile </span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span><span class="token comment"># wc -l /etc/profile </span>
<span class="token punctuation">[</span>root@hadoop101 datas<span class="token punctuation">]</span><span class="token comment"># wc -m /etc/profile</span>
</code></pre> 
  </blockquote> 
  <h2><a id="10_811"></a>10、正则表达式</h2> 
  <blockquote> 
   <p>正则表达式我认为很重要，下次专门找个时间做🙂</p> 
  </blockquote> 
 </div> 
 <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e0530931f4.css" rel="stylesheet"> 
</div>, newsAttr=2, newsImage=https://profile.csdnimg.cn/B/7/4/3_qq_43182741, orderNum=null, isPublic=null, thumbs=10, visits=2, comments=null, collects=10, newsSource=https://blog.csdn.net/qq_43182741, newsSourceAuthor=爱学习的老冰棍, newsSourceTags=shell,大数据, status=null, delFlag=null, createBy=null, createTime=null, updateBy=null, updateTime=null, remark=null, beginTime=null, endTime=null, params={}, newsType=null)
2020-09-03 15:19:25.613 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:45 -接收到消息的时间----->>> 1599117565613
消费tag->>> 19
从消息队列中拿到数据----------->>>> {csdnNews=LinqNews(newsId=null, userId=1, newsTypeId=18, newsTitle=大厂Redis高并发场景设计，面试问的都在这！, newsContent=<div id="article_content" class="article_content clearfix"> 
 <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3d4dc5c1de.css"> 
 <div id="content_views" class="markdown_views prism-atom-one-dark"> 
  <!-- flowchart 箭头图标 勿删 --> 
  <svg xmlns="http://www.w3.org/2000/svg" style="display: none;"> 
   <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path> 
  </svg> 
  <p></p>
  <div class="toc">
   <h3>文章目录</h3>
   <ul>
    <ul>
     <li><a href="#_1" rel="nofollow">写在前面</a></li>
     <li><a href="#_4" rel="nofollow">正文</a></li>
     <li><a href="#_10" rel="nofollow">一、常用指令</a></li>
     <li><a href="#_18" rel="nofollow">二、场景解析</a></li>
     <ul>
      <li><a href="#11string_20" rel="nofollow">1.1string存储</a></li>
      <li><a href="#12String__23" rel="nofollow">1.2String 类型使用场景</a></li>
      <li><a href="#21hash_44" rel="nofollow">2.1hash存储数据</a></li>
      <li><a href="#22Hash__50" rel="nofollow">2.2Hash 类型使用场景</a></li>
      <li><a href="#23_68" rel="nofollow">2.3实现信息存储的优缺点</a></li>
      <li><a href="#31List__96" rel="nofollow">3.1List 类型使用场景</a></li>
      <li><a href="#41set__123" rel="nofollow">4.1set 类型使用场景</a></li>
      <li><a href="#42Set_137" rel="nofollow">4.2Set集合特殊的操作命令</a></li>
      <li><a href="#43Set_153" rel="nofollow">4.3Set集合特殊的操作命令应用场景</a></li>
      <li><a href="#51_Zset_162" rel="nofollow">5.1 Zset有序集合</a></li>
      <li><a href="#52Zset__169" rel="nofollow">5.2Zset 类型使用场景</a></li>
     </ul>
    </ul>
   </ul>
  </div>
  <p></p> 
  <h2><a id="_1"></a>写在前面</h2> 
  <p><strong>2020年面试必备的Java后端进阶面试题总结了一份复习指南在Github上，内容详细，图文并茂，有需要学习的朋友可以Star一下！</strong><br> <strong>GitHub地址：</strong> <a href="https://github.com/Java-Ling/Java-Interview-guide">https://github.com/Java-Ling/Java-Interview-guide</a></p> 
  <h2><a id="_4"></a>正文</h2> 
  <p>分布式缓存是分布式系统中的重要组件，主要解决高并发、大数据场景下，热点数据访问的性能问题，提供高性能的数据快速访问。</p> 
  <p>使用缓存常见场景是：项目中部分数据访问比较频繁，对下游 DB（例如 MySQL）造成服务压力，这时候可以使用缓存来提高效率。<strong>下面来讲BAT等一线企业中Redis各种应用场景核心设计！</strong></p> 
  <h2><a id="_10"></a>一、常用指令</h2> 
  <p>接下来看看每个数据结构常用的指令有哪些，我们用一张表比较清晰的展示：</p> 
  <p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8zLzEwLzE3MGMzYmE5MmZmZjcyNTQ?x-oss-process=image/format,png" alt="img"></p> 
  <h2><a id="_18"></a>二、场景解析</h2> 
  <h3><a id="11string_20"></a>1.1string存储</h3> 
  <p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8zLzEwLzE3MGMzYmMyMzcyYWRmNmI?x-oss-process=image/format,png" alt="img"></p> 
  <h3><a id="12String__23"></a>1.2String 类型使用场景</h3> 
  <p><strong>场景一：商品库存数</strong></p> 
  <p>从业务上，商品库存数据是热点数据，交易行为会直接影响库存。而 Redis 自身 String 类型提供了：</p> 
  <ol> 
   <li>set goods_id 10; 设置 id 为 good_id 的商品的库存初始值为 10；</li> 
   <li>decr goods_id; 当商品被购买时候，库存数据减 1。</li> 
  </ol> 
  <p><strong>依次类推的场景</strong>：商品的浏览次数，问题或者回复的点赞次数等。这种计数的场景都可以考虑利用 Redis 来实现。</p> 
  <p><strong>场景二：时效信息存储</strong></p> 
  <p>Redis 的数据存储具有自动失效能力。也就是存储的 key-value 可以设置过期时间：set(key, value, expireTime)。</p> 
  <p>比如，用户登录某个 App 需要获取登录验证码， 验证码在 30 秒内有效。那么我们就可以使用 String 类型存储验证码，同时设置 30 秒的失效时间。</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200519213848101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J4aDgxMQ==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-YVYYAIf9-1589895386136)(data:image/svg+xml;utf8,)]"></p> 
  <h3><a id="21hash_44"></a>2.1hash存储数据</h3> 
  <p><img src="https://img-blog.csdnimg.cn/20200519213854667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J4aDgxMQ==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-EJFSijlP-1589895386138)(data:image/svg+xml;utf8,)]"></p> 
  <h3><a id="22Hash__50"></a>2.2Hash 类型使用场景</h3> 
  <p>Redis 在存储对象（例如：用户信息）的时候需要对对象进行序列化转换然后存储。</p> 
  <p>还有一种形式，就是将对象数据转换为 JSON 结构数据，然后存储 JSON 的字符串到 Redis。</p> 
  <p>对于一些对象类型，还有一种比较方便的类型，那就是按照 Redis 的 Hash 类型进行存储。</p> 
  <p>例如，我们存储一些网站用户的基本信息， 我们可以使用：</p> 
  <p>这样就存储了一个用户基本信息，存储信息有：{name : 小明， phone : “123456”，sex : “男”}</p> 
  <p>当然这种类似场景还非常多， 比如存储订单的数据，产品的数据，商家基本信息等。<strong>以淘宝购物车为主</strong></p> 
  <p><img src="https://img-blog.csdnimg.cn/20200519213903365.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J4aDgxMQ==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-rKfgbmuK-1589895386139)(data:image/svg+xml;utf8,)]"></p> 
  <h3><a id="23_68"></a>2.3实现信息存储的优缺点</h3> 
  <p><strong>1.原生:</strong></p> 
  <ul> 
   <li>set user: 1:name james;</li> 
   <li>set user:1:age 23;</li> 
   <li>set user:1:sex boy;</li> 
  </ul> 
  <p><strong>优点:</strong> 简单直观，每个键对应一个值</p> 
  <p><strong>缺点:</strong> 键数过多，占用内存多，用户信息过于分散，不用于生产环境</p> 
  <p><strong>2.将对象序列化存入</strong></p> 
  <p>redis set user:1 serial ize (userInfo);</p> 
  <p><strong>优点:</strong> 编程简单，若使用序列化合理内存使用率高</p> 
  <p><strong>缺点:</strong> 序列化与反序列化有一定开销，更新属性时需要把userInfo全取出来进行反序列化，更新后再序列化到redis</p> 
  <p><strong>3.hash存储:</strong></p> 
  <p>hmset user:1 name james age 23 sex boy</p> 
  <p><strong>优点:</strong> 简单直观，使用合理可减少内存空间消耗</p> 
  <p><strong>缺点:</strong> 要控制ziplist 与hashtable两种编码转换，Mhashtable会消耗更多内存。</p> 
  <h3><a id="31List__96"></a>3.1List 类型使用场景</h3> 
  <p>list 是按照插入顺序排序的字符串链表。可以在头部和尾部插入新的元素（双向链表实现，两端添加元素的时间复杂度为 O(1)） 。</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200519213932776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J4aDgxMQ==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Zvx5IVDF-1589895386139)(data:image/svg+xml;utf8,)]"></p> 
  <p><strong>场景一：消息队列实现</strong></p> 
  <p>目前有很多专业的消息队列组件 Kafka、RabbitMQ 等。 我们在这里仅仅是使用 list 的特征来实现消息队列的要求。在实际技术选型的过程中，大家可以慎重思考。</p> 
  <p><strong>list 存储就是一个队列的存储形式：</strong></p> 
  <ol> 
   <li>lpush key value; 在 key 对应 list 的头部添加字符串元素；</li> 
   <li>rpop key;移除列表的最后一个元素，返回值为移除的元素。</li> 
  </ol> 
  <p><strong>场景二：最新上架商品</strong></p> 
  <p>在交易网站首页经常会有新上架产品推荐的模块， 这个模块是存储了最新上架前 100 名。</p> 
  <p>这时候使用 Redis 的 list 数据结构，来进行 TOP 100 新上架产品的存储。</p> 
  <p>Redis ltrim 指令对一个列表进行修剪（trim），这样 list 就会只包含指定范围的指定元素。</p> 
  <p>start 和 stop 都是由 0 开始计数的，这里的 0 是列表里的第一个元素（表头），1 是第二个元素。</p> 
  <h3><a id="41set__123"></a>4.1set 类型使用场景</h3> 
  <p>set 也是存储了一个集合列表功能。和 list 不同，set 具备去重功能。当需要存储一个列表信息，同时要求列表内的元素不能有重复，这时候使用 set 比较合适。与此同时，set 还提供的交集、并集、差集。</p> 
  <p>例如，在交易网站，我们会存储用户感兴趣的商品信息，在进行相似用户分析的时候， 可以通过计算两个不同用户之间感兴趣商品的数量来提供一些依据。</p> 
  <p>获取到两个用户相似的产品， 然后确定相似产品的类目就可以进行用户分析。</p> 
  <p>类似的应用场景还有， 社交场景下共同关注好友， 相似兴趣 tag 等场景的支持。</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200519213955472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J4aDgxMQ==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Ig9Ydf02-1589895386140)(data:image/svg+xml;utf8,)]"></p> 
  <h3><a id="42Set_137"></a>4.2Set集合特殊的操作命令</h3> 
  <p><strong>setA={A,B,C} setB={B, C}</strong></p> 
  <blockquote> 
   <p>1）集合与集合之间的交集</p> 
   <p>sinter setA setB－－&gt;得到集合{B,C}</p> 
   <ol start="2"> 
    <li>集合与集合之间的并集</li> 
   </ol> 
   <p>sunion setA setB －－&gt;得到集合{A,B,C}</p> 
   <p>3）集合与集合之间的差集</p> 
   <p>sdiff setA setB－－&gt;得到集合{A}</p> 
  </blockquote> 
  <h3><a id="43Set_153"></a>4.3Set集合特殊的操作命令应用场景</h3> 
  <p><strong>如何实现微博的微关系设计？（看视频更香）</strong></p> 
  <p><a href="https://www.bilibili.com/video/av92159723" rel="nofollow">www.bilibili.com/video/av921…</a></p> 
  <p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8zLzEwLzE3MGMzYzU5NDk2NTE1MWI?x-oss-process=image/format,png" alt="img"></p> 
  <h3><a id="51_Zset_162"></a>5.1 Zset有序集合</h3> 
  <p>常用于排行榜，如视频网站需要对用户上传视频做排行榜，或点赞数与集合有联系，不能有重复的成员</p> 
  <p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8zLzEwLzE3MGMzYzZlZmIzNWUwYzM?x-oss-process=image/format,png" alt="img"></p> 
  <h3><a id="52Zset__169"></a>5.2Zset 类型使用场景</h3> 
  <p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8zLzEwLzE3MGMzYzhjMjVmYzU3MTQ?x-oss-process=image/format,png" alt="img"></p> 
 </div> 
 <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e0530931f4.css" rel="stylesheet"> 
</div>, newsAttr=2, newsImage=https://profile.csdnimg.cn/1/4/0/3_rxh811, orderNum=null, isPublic=null, thumbs=132, visits=6, comments=null, collects=132, newsSource=https://blog.csdn.net/rxh811, newsSourceAuthor=码农清风, newsSourceTags=链表,Redis,队列,java,列表,redis, status=null, delFlag=null, createBy=null, createTime=null, updateBy=null, updateTime=null, remark=null, beginTime=null, endTime=null, params={}, newsType=null)}
2020-09-03 15:19:25.614 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:50 -获取peNews--->>>null
2020-09-03 15:19:25.614 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:51 -获取entertainmentNews--->>>null
2020-09-03 15:19:25.614 INFO  [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1]com.linq.news.task.listener.NewsConsumer.receiveNews:52 -获取csdnNews--->>>LinqNews(newsId=null, userId=1, newsTypeId=18, newsTitle=大厂Redis高并发场景设计，面试问的都在这！, newsContent=<div id="article_content" class="article_content clearfix"> 
 <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3d4dc5c1de.css"> 
 <div id="content_views" class="markdown_views prism-atom-one-dark"> 
  <!-- flowchart 箭头图标 勿删 --> 
  <svg xmlns="http://www.w3.org/2000/svg" style="display: none;"> 
   <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path> 
  </svg> 
  <p></p>
  <div class="toc">
   <h3>文章目录</h3>
   <ul>
    <ul>
     <li><a href="#_1" rel="nofollow">写在前面</a></li>
     <li><a href="#_4" rel="nofollow">正文</a></li>
     <li><a href="#_10" rel="nofollow">一、常用指令</a></li>
     <li><a href="#_18" rel="nofollow">二、场景解析</a></li>
     <ul>
      <li><a href="#11string_20" rel="nofollow">1.1string存储</a></li>
      <li><a href="#12String__23" rel="nofollow">1.2String 类型使用场景</a></li>
      <li><a href="#21hash_44" rel="nofollow">2.1hash存储数据</a></li>
      <li><a href="#22Hash__50" rel="nofollow">2.2Hash 类型使用场景</a></li>
      <li><a href="#23_68" rel="nofollow">2.3实现信息存储的优缺点</a></li>
      <li><a href="#31List__96" rel="nofollow">3.1List 类型使用场景</a></li>
      <li><a href="#41set__123" rel="nofollow">4.1set 类型使用场景</a></li>
      <li><a href="#42Set_137" rel="nofollow">4.2Set集合特殊的操作命令</a></li>
      <li><a href="#43Set_153" rel="nofollow">4.3Set集合特殊的操作命令应用场景</a></li>
      <li><a href="#51_Zset_162" rel="nofollow">5.1 Zset有序集合</a></li>
      <li><a href="#52Zset__169" rel="nofollow">5.2Zset 类型使用场景</a></li>
     </ul>
    </ul>
   </ul>
  </div>
  <p></p> 
  <h2><a id="_1"></a>写在前面</h2> 
  <p><strong>2020年面试必备的Java后端进阶面试题总结了一份复习指南在Github上，内容详细，图文并茂，有需要学习的朋友可以Star一下！</strong><br> <strong>GitHub地址：</strong> <a href="https://github.com/Java-Ling/Java-Interview-guide">https://github.com/Java-Ling/Java-Interview-guide</a></p> 
  <h2><a id="_4"></a>正文</h2> 
  <p>分布式缓存是分布式系统中的重要组件，主要解决高并发、大数据场景下，热点数据访问的性能问题，提供高性能的数据快速访问。</p> 
  <p>使用缓存常见场景是：项目中部分数据访问比较频繁，对下游 DB（例如 MySQL）造成服务压力，这时候可以使用缓存来提高效率。<strong>下面来讲BAT等一线企业中Redis各种应用场景核心设计！</strong></p> 
  <h2><a id="_10"></a>一、常用指令</h2> 
  <p>接下来看看每个数据结构常用的指令有哪些，我们用一张表比较清晰的展示：</p> 
  <p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8zLzEwLzE3MGMzYmE5MmZmZjcyNTQ?x-oss-process=image/format,png" alt="img"></p> 
  <h2><a id="_18"></a>二、场景解析</h2> 
  <h3><a id="11string_20"></a>1.1string存储</h3> 
  <p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8zLzEwLzE3MGMzYmMyMzcyYWRmNmI?x-oss-process=image/format,png" alt="img"></p> 
  <h3><a id="12String__23"></a>1.2String 类型使用场景</h3> 
  <p><strong>场景一：商品库存数</strong></p> 
  <p>从业务上，商品库存数据是热点数据，交易行为会直接影响库存。而 Redis 自身 String 类型提供了：</p> 
  <ol> 
   <li>set goods_id 10; 设置 id 为 good_id 的商品的库存初始值为 10；</li> 
   <li>decr goods_id; 当商品被购买时候，库存数据减 1。</li> 
  </ol> 
  <p><strong>依次类推的场景</strong>：商品的浏览次数，问题或者回复的点赞次数等。这种计数的场景都可以考虑利用 Redis 来实现。</p> 
  <p><strong>场景二：时效信息存储</strong></p> 
  <p>Redis 的数据存储具有自动失效能力。也就是存储的 key-value 可以设置过期时间：set(key, value, expireTime)。</p> 
  <p>比如，用户登录某个 App 需要获取登录验证码， 验证码在 30 秒内有效。那么我们就可以使用 String 类型存储验证码，同时设置 30 秒的失效时间。</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200519213848101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J4aDgxMQ==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-YVYYAIf9-1589895386136)(data:image/svg+xml;utf8,)]"></p> 
  <h3><a id="21hash_44"></a>2.1hash存储数据</h3> 
  <p><img src="https://img-blog.csdnimg.cn/20200519213854667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J4aDgxMQ==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-EJFSijlP-1589895386138)(data:image/svg+xml;utf8,)]"></p> 
  <h3><a id="22Hash__50"></a>2.2Hash 类型使用场景</h3> 
  <p>Redis 在存储对象（例如：用户信息）的时候需要对对象进行序列化转换然后存储。</p> 
  <p>还有一种形式，就是将对象数据转换为 JSON 结构数据，然后存储 JSON 的字符串到 Redis。</p> 
  <p>对于一些对象类型，还有一种比较方便的类型，那就是按照 Redis 的 Hash 类型进行存储。</p> 
  <p>例如，我们存储一些网站用户的基本信息， 我们可以使用：</p> 
  <p>这样就存储了一个用户基本信息，存储信息有：{name : 小明， phone : “123456”，sex : “男”}</p> 
  <p>当然这种类似场景还非常多， 比如存储订单的数据，产品的数据，商家基本信息等。<strong>以淘宝购物车为主</strong></p> 
  <p><img src="https://img-blog.csdnimg.cn/20200519213903365.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J4aDgxMQ==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-rKfgbmuK-1589895386139)(data:image/svg+xml;utf8,)]"></p> 
  <h3><a id="23_68"></a>2.3实现信息存储的优缺点</h3> 
  <p><strong>1.原生:</strong></p> 
  <ul> 
   <li>set user: 1:name james;</li> 
   <li>set user:1:age 23;</li> 
   <li>set user:1:sex boy;</li> 
  </ul> 
  <p><strong>优点:</strong> 简单直观，每个键对应一个值</p> 
  <p><strong>缺点:</strong> 键数过多，占用内存多，用户信息过于分散，不用于生产环境</p> 
  <p><strong>2.将对象序列化存入</strong></p> 
  <p>redis set user:1 serial ize (userInfo);</p> 
  <p><strong>优点:</strong> 编程简单，若使用序列化合理内存使用率高</p> 
  <p><strong>缺点:</strong> 序列化与反序列化有一定开销，更新属性时需要把userInfo全取出来进行反序列化，更新后再序列化到redis</p> 
  <p><strong>3.hash存储:</strong></p> 
  <p>hmset user:1 name james age 23 sex boy</p> 
  <p><strong>优点:</strong> 简单直观，使用合理可减少内存空间消耗</p> 
  <p><strong>缺点:</strong> 要控制ziplist 与hashtable两种编码转换，Mhashtable会消耗更多内存。</p> 
  <h3><a id="31List__96"></a>3.1List 类型使用场景</h3> 
  <p>list 是按照插入顺序排序的字符串链表。可以在头部和尾部插入新的元素（双向链表实现，两端添加元素的时间复杂度为 O(1)） 。</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200519213932776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J4aDgxMQ==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Zvx5IVDF-1589895386139)(data:image/svg+xml;utf8,)]"></p> 
  <p><strong>场景一：消息队列实现</strong></p> 
  <p>目前有很多专业的消息队列组件 Kafka、RabbitMQ 等。 我们在这里仅仅是使用 list 的特征来实现消息队列的要求。在实际技术选型的过程中，大家可以慎重思考。</p> 
  <p><strong>list 存储就是一个队列的存储形式：</strong></p> 
  <ol> 
   <li>lpush key value; 在 key 对应 list 的头部添加字符串元素；</li> 
   <li>rpop key;移除列表的最后一个元素，返回值为移除的元素。</li> 
  </ol> 
  <p><strong>场景二：最新上架商品</strong></p> 
  <p>在交易网站首页经常会有新上架产品推荐的模块， 这个模块是存储了最新上架前 100 名。</p> 
  <p>这时候使用 Redis 的 list 数据结构，来进行 TOP 100 新上架产品的存储。</p> 
  <p>Redis ltrim 指令对一个列表进行修剪（trim），这样 list 就会只包含指定范围的指定元素。</p> 
  <p>start 和 stop 都是由 0 开始计数的，这里的 0 是列表里的第一个元素（表头），1 是第二个元素。</p> 
  <h3><a id="41set__123"></a>4.1set 类型使用场景</h3> 
  <p>set 也是存储了一个集合列表功能。和 list 不同，set 具备去重功能。当需要存储一个列表信息，同时要求列表内的元素不能有重复，这时候使用 set 比较合适。与此同时，set 还提供的交集、并集、差集。</p> 
  <p>例如，在交易网站，我们会存储用户感兴趣的商品信息，在进行相似用户分析的时候， 可以通过计算两个不同用户之间感兴趣商品的数量来提供一些依据。</p> 
  <p>获取到两个用户相似的产品， 然后确定相似产品的类目就可以进行用户分析。</p> 
  <p>类似的应用场景还有， 社交场景下共同关注好友， 相似兴趣 tag 等场景的支持。</p> 
  <p><img src="https://img-blog.csdnimg.cn/20200519213955472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J4aDgxMQ==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Ig9Ydf02-1589895386140)(data:image/svg+xml;utf8,)]"></p> 
  <h3><a id="42Set_137"></a>4.2Set集合特殊的操作命令</h3> 
  <p><strong>setA={A,B,C} setB={B, C}</strong></p> 
  <blockquote> 
   <p>1）集合与集合之间的交集</p> 
   <p>sinter setA setB－－&gt;得到集合{B,C}</p> 
   <ol start="2"> 
    <li>集合与集合之间的并集</li> 
   </ol> 
   <p>sunion setA setB －－&gt;得到集合{A,B,C}</p> 
   <p>3）集合与集合之间的差集</p> 
   <p>sdiff setA setB－－&gt;得到集合{A}</p> 
  </blockquote> 
  <h3><a id="43Set_153"></a>4.3Set集合特殊的操作命令应用场景</h3> 
  <p><strong>如何实现微博的微关系设计？（看视频更香）</strong></p> 
  <p><a href="https://www.bilibili.com/video/av92159723" rel="nofollow">www.bilibili.com/video/av921…</a></p> 
  <p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8zLzEwLzE3MGMzYzU5NDk2NTE1MWI?x-oss-process=image/format,png" alt="img"></p> 
  <h3><a id="51_Zset_162"></a>5.1 Zset有序集合</h3> 
  <p>常用于排行榜，如视频网站需要对用户上传视频做排行榜，或点赞数与集合有联系，不能有重复的成员</p> 
  <p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8zLzEwLzE3MGMzYzZlZmIzNWUwYzM?x-oss-process=image/format,png" alt="img"></p> 
  <h3><a id="52Zset__169"></a>5.2Zset 类型使用场景</h3> 
  <p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8zLzEwLzE3MGMzYzhjMjVmYzU3MTQ?x-oss-process=image/format,png" alt="img"></p> 
 </div> 
 <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e0530931f4.css" rel="stylesheet"> 
</div>, newsAttr=2, newsImage=https://profile.csdnimg.cn/1/4/0/3_rxh811, orderNum=null, isPublic=null, thumbs=132, visits=6, comments=null, collects=132, newsSource=https://blog.csdn.net/rxh811, newsSourceAuthor=码农清风, newsSourceTags=链表,Redis,队列,java,列表,redis, status=null, delFlag=null, createBy=null, createTime=null, updateBy=null, updateTime=null, remark=null, beginTime=null, endTime=null, params={}, newsType=null)
2020-09-03 15:19:25.734 INFO  [SpringContextShutdownHook]com.linq.framework.manager.ShutdownManager.shutdownAsyncManager:25 -====关闭后台任务任务线程池====
2020-09-03 15:19:25.735 WARN  [SpringContextShutdownHook]o.s.context.annotation.CommonAnnotationBeanPostProcessor.postProcessBeforeDestruction:185 -Destroy method on bean with name 'shutdownManager' threw an exception: java.lang.ExceptionInInitializerError
2020-09-03 15:19:25.740 INFO  [SpringContextShutdownHook]com.alibaba.druid.pool.DruidDataSource.close:2003 -{dataSource-1} closing ...
2020-09-03 15:19:25.752 INFO  [SpringContextShutdownHook]com.alibaba.druid.pool.DruidDataSource.close:2075 -{dataSource-1} closed
