<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.linq.system.mapper.SysDeptMapper">
    <resultMap id="BaseResultMap" type="com.linq.common.core.domain.entity.SysDept">
        <!--@mbg.generated-->
        <!--@Table sys_dept-->
        <id column="dept_id" jdbcType="BIGINT" property="deptId"/>
        <result column="parent_id" jdbcType="BIGINT" property="parentId"/>
        <result column="ancestors" jdbcType="VARCHAR" property="ancestors"/>
        <result column="dept_name" jdbcType="VARCHAR" property="deptName"/>
        <result column="order_num" jdbcType="INTEGER" property="orderNum"/>
        <result column="leader" jdbcType="VARCHAR" property="leader"/>
        <result column="phone" jdbcType="VARCHAR" property="phone"/>
        <result column="email" jdbcType="VARCHAR" property="email"/>
        <result column="status" jdbcType="CHAR" property="status"/>
        <result column="del_flag" jdbcType="CHAR" property="delFlag"/>
        <result column="create_by" jdbcType="VARCHAR" property="createBy"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_by" jdbcType="VARCHAR" property="updateBy"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="remark" jdbcType="VARCHAR" property="remark"/>
    </resultMap>
    <sql id="Base_Column_List">
        <!--@mbg.generated-->
        dept_id, parent_id, ancestors, dept_name, order_num, leader, phone, email, `status`,
        del_flag, create_by, create_time, update_by, update_time, remark
    </sql>
    <sql id="findDeptVo">
        select d.dept_id,
               d.parent_id,
               d.ancestors,
               d.dept_name,
               d.order_num,
               d.leader,
               d.phone,
               d.email,
               d.status,
               d.del_flag,
               d.create_by,
               d.create_time
        from sys_dept d
    </sql>
    <!--
   /**
     * 查询部门管理数据
     *
     * @param dept 部门信息
     *
     * @return 部门信息集合
     */
    List<SysDept> findList(@Param("dept") SysDept dept);
    -->
    <select id="findDeptList" resultMap="BaseResultMap">
        <include refid="findDeptVo"/>
        where d.del_flag = '0'
        <if test="dept.parentId != null and dept.parentId != 0">
            AND parent_id = #{dept.parentId}
        </if>
        <if test="dept.deptName != null and dept.deptName != ''">
            AND dept_name like '%${dept.deptName}%'
        </if>
        <if test="dept.status != null and dept.status != ''">
            AND status = #{dept.status}
        </if>
        order by d.parent_id, d.order_num
    </select>
    <!--
        /**
         * 根据角色ID查询部门树信息
         *
         * @param roleId 角色ID
         *
         * @return 选中部门列表
         */
        List<Long> findDeptListByRoleId(@Param("roleId") Long roleId);
    -->
    <select id="findDeptListByRoleId" resultType="java.lang.Long">
        select d.dept_id, d.parent_id
        from sys_dept d
                     left join sys_role_dept rd on d.dept_id = rd.dept_id
        where rd.role_id = #{roleId}
          and d.dept_id not in (select d.parent_id
                                from sys_dept d
                                             inner join sys_role_dept rd on d.dept_id = rd.dept_id and rd.role_id = #{roleId})
        order by d.parent_id, d.order_num
    </select>
    <!--
       /**
         * 根据ID查询所有子部门（正常状态）
         *
         * @param deptId 部门ID
         *
         * @return 子部门数
         */
        int findNormalChildrenDeptById(Long deptId);
    -->
    <select id="findNormalChildrenDeptById" resultType="int">
        select count(*)
        from sys_dept
        where status = '0'
          and del_flag = '0'
          and find_in_set(#{deptId}, ancestors)
    </select>
    <!--
        /**
         * 根据ID查询所有子部门
         *
         * @param deptId 部门ID
         *
         * @return 部门列表
         */
        List<SysDept> findChildrenDeptById(@Param("deptId") Long deptId);
    -->
    <select id="findChildrenDeptById" resultMap="BaseResultMap">
        select *
        from sys_dept
        where find_in_set(#{deptId}, ancestors)
    </select>
    <!--
       /**
         * 修改子元素关系
         *
         * @param depts 子元素
         *
         * @return 结果
         */
        int updateDeptChildren(List<SysDept> children);
    -->
    <update id="updateDeptChildren">
        update sys_dept set ancestors =
        <foreach collection="depts" item="item" index="index"
                 separator=" " open="case dept_id" close="end">
            when #{item.deptId} then #{item.ancestors}
        </foreach>
        where dept_id in
        <foreach collection="depts" item="item" index="index"
                 separator="," open="(" close=")">
            #{item.deptId}
        </foreach>
    </update>
    <update id="updateDeptStatus">
        update sys_dept
        <set>
            <if test="dept.status != null and dept.status != ''">
                status = #{dept.status},
            </if>
        </set>
        where dept_id in (${dept.ancestors})
    </update>
    <!--
        /**
         * 查询部门是否存在用户
         *
         * @param deptId 部门ID
         *
         * @return 结果
         */
    -->
    <select id="checkDeptExistUser" resultType="int">
        select count(1)
        from sys_user
        where dept_id = #{deptId}
          and del_flag = '0'
    </select>
</mapper>