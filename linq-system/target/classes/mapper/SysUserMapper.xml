<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.linq.system.mapper.SysUserMapper">
    <resultMap id="BaseResultMap" type="com.linq.common.core.domain.entity.SysUser">
        <!--@mbg.generated-->
        <!--@Table sys_user-->
        <id column="user_id" jdbcType="BIGINT" property="userId"/>
        <result column="dept_id" jdbcType="BIGINT" property="deptId"/>
        <result column="username" jdbcType="VARCHAR" property="username"/>
        <result column="nick_name" jdbcType="VARCHAR" property="nickName"/>
        <result column="user_type" jdbcType="VARCHAR" property="userType"/>
        <result column="email" jdbcType="VARCHAR" property="email"/>
        <result column="phone" jdbcType="VARCHAR" property="phone"/>
        <result column="sex" jdbcType="CHAR" property="sex"/>
        <result column="avatar" jdbcType="VARCHAR" property="avatar"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="status" jdbcType="CHAR" property="status"/>
        <result column="del_flag" jdbcType="CHAR" property="delFlag"/>
        <result column="login_ip" jdbcType="VARCHAR" property="loginIp"/>
        <result column="login_date" jdbcType="TIMESTAMP" property="loginDate"/>
        <result column="create_by" jdbcType="VARCHAR" property="createBy"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_by" jdbcType="VARCHAR" property="updateBy"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="remark" jdbcType="VARCHAR" property="remark"/>
        <association property="dept" column="dept_id" javaType="com.linq.common.core.domain.entity.SysDept" resultMap="deptResult"/>
        <collection property="roles" javaType="java.util.List" resultMap="RoleResult"/>
    </resultMap>

    <resultMap id="deptResult" type="com.linq.common.core.domain.entity.SysDept">
        <id property="deptId" column="dept_id"/>
        <result property="parentId" column="parent_id"/>
        <result property="deptName" column="dept_name"/>
        <result property="orderNum" column="order_num"/>
        <result property="leader" column="leader"/>
        <result property="status" column="dept_status"/>
    </resultMap>

    <resultMap id="RoleResult" type="com.linq.common.core.domain.entity.SysRole">
        <id property="roleId" column="role_id"/>
        <result property="roleName" column="role_name"/>
        <result property="roleKey" column="role_key"/>
        <result property="roleSort" column="role_sort"/>
        <result property="dataScope" column="data_scope"/>
        <result property="status" column="role_status"/>
    </resultMap>


    <sql id="Base_Column_List">
        <!--@mbg.generated-->
        user_id, dept_id, username, nick_name, user_type, email, phone, sex, avatar, `password`,
        `status`, del_flag, login_ip, login_date, create_by, create_time, update_by, update_time,
        remark
    </sql>
    <sql id="findUserVo">
        select u.user_id,
               u.dept_id,
               u.username,
               u.nick_name,
               u.email,
               u.avatar,
               u.phone,
               u.password,
               u.sex,
               u.status,
               u.del_flag,
               u.login_ip,
               u.login_date,
               u.create_by,
               u.create_time,
               u.remark,
               d.dept_id,
               d.parent_id,
               d.dept_name,
               d.order_num,
               d.leader,
               d.status as dept_status,
               r.role_id,
               r.role_name,
               r.role_key,
               r.role_sort,
               r.data_scope,
               r.status as role_status
        from sys_user u
                     left join sys_dept d on u.dept_id = d.dept_id
                     left join sys_user_role ur on u.user_id = ur.user_id
                     left join sys_role r on r.role_id = ur.role_id
    </sql>
    <!--
    /**
     * 获取用户列表
     *
     * @param page 分页参数
     * @param user 条件查询对象，user
     *
     * @return IPage<SysUser>
     */
    IPage<SysUser> findPage(Page<SysUser> page,@Param("user") SysUser user);
    -->
    <select id="findPage" resultMap="BaseResultMap">
        select u.user_id,
               u.dept_id,
               u.nick_name,
               u.username,
               u.email,
               u.avatar,
               u.phone,
               u.password,
               u.sex,
               u.status,
               u.del_flag,
               u.login_ip,
               u.login_date,
               u.create_by,
               u.create_time,
               u.remark,
               d.dept_name,
               d.leader
        from sys_user u
                     left join sys_dept d on u.dept_id = d.dept_id
                where u.del_flag = '0'
        <if test="user.username != null and user.username != ''">
            AND u.username like '%${user.username}%'
        </if>
        <if test="user.status != null and user.status != ''">
            AND u.status = #{user.status}
        </if>
        <if test="user.phone != null and user.phone != ''">
            AND u.phone like '%${user.phone}%'
        </if>
        <if test="user.beginTime != null and user.beginTime != ''">
            <!-- 开始时间检索 -->
            AND date_format(u.create_time, '%y%m%d')&gt;= date_format(#{user.beginTime}, '%y%m%d')
        </if>
        <if test="user.endTime != null and user.endTime != ''">
            <!-- 结束时间检索 -->
            AND date_format(u.create_time, '%y%m%d')&lt;= date_format(#{user.endTime}, '%y%m%d')
        </if>
        <if test="user.deptId != null and user.deptId != 0">
            AND (u.dept_id = #{user.deptId} OR
                 u.dept_id IN (SELECT t.dept_id FROM sys_dept t WHERE FIND_IN_SET(#{user.deptId}, ancestors)))
        </if>
    </select>
    <!--
       /**
         * 通过用户ID查询用户
         *
         * @param userId 用户ID
         *
         * @return 用户对象信息
         */
        SysUser findByUserId(Long userId);
    -->
    <select id="findByUserId" resultMap="BaseResultMap">
        <include refid="findUserVo"/>
        where u.user_id = #{userId}
    </select>
</mapper>